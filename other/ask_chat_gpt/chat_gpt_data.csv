func_name,func_text,query,response
A,call printf,Name the following assembly function:\ncall printf,Calling printf
_init
,4011b8  sub     rsp, 0x8\n4011bc  mov     rax,  [0x606fd0]\n4011c3  test    rax, rax\n4011c6  je      0x4011ca\n4011ca  add     rsp, 0x8\n4011ce  ret     \n4011c8  call    rax\n,Name the following assembly function:\n4011b8  sub     rsp, 0x8\n4011bc  mov     rax,  [0x606fd0]\n4011c3  test    rax, rax\n4011c6  je      0x4011ca\n4011ca  add     rsp, 0x8\n4011ce  ret     \n4011c8  call    rax\n,\nCall Function at 0x606fd0sub_4011d0
,4011d0  push     [0x606e70]\n4011d6  jmp      [0x606e78]\n,Name the following assembly function:\n4011d0  push     [0x606e70]\n4011d6  jmp      [0x606e78]\n,\nJump to Memory Address from Variablesub_4011dc
,4011dc  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4011dc  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)free
,4011e0  jmp      [0x606e80]\n,Name the following assembly function:\n4011e0  jmp      [0x606e80]\n,\nIndirect Jumpabort
,4011f0  jmp      [0x606e88]\n,Name the following assembly function:\n4011f0  jmp      [0x606e88]\n,\nIndirect Jumpstrncmp
,401210  jmp      [0x606e98]\n,Name the following assembly function:\n401210  jmp      [0x606e98]\n,\nFar Jump_exit
,401220  jmp      [0x606ea0]\n,Name the following assembly function:\n401220  jmp      [0x606ea0]\n,\nFar Jumpwrite
,401240  jmp      [0x606eb0]\n,Name the following assembly function:\n401240  jmp      [0x606eb0]\n,\nIndirect Jump.textdomain
,401250  jmp      [0x606eb8]\n,Name the following assembly function:\n401250  jmp      [0x606eb8]\n,\nFar Jumpfclose
,401260  jmp      [0x606ec0]\n,Name the following assembly function:\n401260  jmp      [0x606ec0]\n,\nIndirect Jump.bindtextdomain
,401270  jmp      [0x606ec8]\n,Name the following assembly function:\n401270  jmp      [0x606ec8]\n,\nIndirect Jumpdcgettext
,401280  jmp      [0x606ed0]\n,Name the following assembly function:\n401280  jmp      [0x606ed0]\n,\nIndirect Jumpstrlen
,4012a0  jmp      [0x606ee0]\n,Name the following assembly function:\n4012a0  jmp      [0x606ee0]\n,\nJump to Memory Address 0x606ee0getopt_long
,4012c0  jmp      [0x606ef0]\n,Name the following assembly function:\n4012c0  jmp      [0x606ef0]\n,\nIndirect Jumpmbrtowc
,4012d0  jmp      [0x606ef8]\n,Name the following assembly function:\n4012d0  jmp      [0x606ef8]\n,\nJump to Memory Location 0x606ef8strrchr
,4012e0  jmp      [0x606f00]\n,Name the following assembly function:\n4012e0  jmp      [0x606f00]\n,\nJump to Address at 0x606f00lseek
,4012f0  jmp      [0x606f08]\n,Name the following assembly function:\n4012f0  jmp      [0x606f08]\n,\nIndirect Jump Functionmemset
,401300  jmp      [0x606f10]\n,Name the following assembly function:\n401300  jmp      [0x606f10]\n,\nJump to Memory Address 0x606f10memcmp
,401310  jmp      [0x606f18]\n,Name the following assembly function:\n401310  jmp      [0x606f18]\n,\nJump to Address in Memoryfputs_unlocked
,401320  jmp      [0x606f20]\n,Name the following assembly function:\n401320  jmp      [0x606f20]\n,\nIndirect Jumpcalloc
,401330  jmp      [0x606f28]\n,Name the following assembly function:\n401330  jmp      [0x606f28]\n,\nIndirect Jumpmemcpy
,401340  jmp      [0x606f30]\n,Name the following assembly function:\n401340  jmp      [0x606f30]\n,\nIndirect JMPfileno
,401350  jmp      [0x606f38]\n,Name the following assembly function:\n401350  jmp      [0x606f38]\n,\nIndirect Jumpmalloc
,401360  jmp      [0x606f40]\n,Name the following assembly function:\n401360  jmp      [0x606f40]\n,\nIndirect Jumpfflush
,401370  jmp      [0x606f48]\n,Name the following assembly function:\n401370  jmp      [0x606f48]\n,\nIndirect Jumpnl_langinfo
,401380  jmp      [0x606f50]\n,Name the following assembly function:\n401380  jmp      [0x606f50]\n,\nIndirect Jumprealloc
,4013a0  jmp      [0x606f60]\n,Name the following assembly function:\n4013a0  jmp      [0x606f60]\n,\nJump to Address at 0x606f60setlocale
,4013b0  jmp      [0x606f68]\n,Name the following assembly function:\n4013b0  jmp      [0x606f68]\n,\nDirect jump to address in memory.error
,4013d0  jmp      [0x606f78]\n,Name the following assembly function:\n4013d0  jmp      [0x606f78]\n,\nJump to Address 0x606f78fseeko
,4013e0  jmp      [0x606f80]\n,Name the following assembly function:\n4013e0  jmp      [0x606f80]\n,\nJump to Address at 0x606f80exit
,401400  jmp      [0x606f90]\n,Name the following assembly function:\n401400  jmp      [0x606f90]\n,\nIndirect jump.fwrite
,401410  jmp      [0x606f98]\n,Name the following assembly function:\n401410  jmp      [0x606f98]\n,\nIndirect jumpmbsinit
,401430  jmp      [0x606fa8]\n,Name the following assembly function:\n401430  jmp      [0x606fa8]\n,\nFar Jumpiswprint
,401440  jmp      [0x606fb0]\n,Name the following assembly function:\n401440  jmp      [0x606fb0]\n,\nIndirect Jumpmain
,401470  push    r15\n401472  push    r14\n401474  push    r13\n401476  push    r12\n401478  mov     r12d, edi\n40147b  push    rbp\n40147c  push    rbx\n40147d  mov     rbx, rsi\n401480  sub     rsp, 0x18\n401484  mov     rdi, qword  ptr  [rsi]\n401487  call    set_program_name\n40148c  lea     rsi,  [0x4050c1]\n401493  mov     edi, 0x6\n401498  call    setlocale\n40149d  lea     rsi,  [0x40494b]\n4014a4  lea     rdi,  [0x404922]\n4014ab  call    bindtextdomain\n4014b0  lea     rdi,  [0x404922]\n4014b7  call    textdomain\n4014bc  lea     rdi,  [close_stdout]\n4014c3  call    atexit\n4014c8  lea     rax,  [0x404963]\n4014cf  sub     rsp, 0x8\n4014d3  mov     r8,  [Version]\n4014da  push    0x0\n4014dc  lea     rdx,  [0x4048a4]\n4014e3  lea     rcx,  [0x40491e]\n4014ea  push    rax\n4014eb  lea     rax,  [usage]\n4014f2  mov     r9d, 0x1\n4014f8  mov     rsi, rbx\n4014fb  mov     edi, r12d\n4014fe  push    rax\n4014ff  xor     eax, eax\n401501  call    parse_gnu_standard_options_only\n401506  movsxd  rdx,  [optind@@GLIBC_2.2.5]\n40150d  mov     rax, rdx\n401510  lea     rbp,  [rbx+rdx*0x8]\n401514  movsxd  rdx, r12d\n401517  lea     rdx,  [rbx+rdx*0x8]\n40151b  mov     qword  ptr  [rsp+0x20], rdx\n401520  add     rsp, 0x20\n401524  cmp     eax, r12d\n401527  jne     0x40153f\n401529  mov     rax, rdx\n40152c  lea     rdx,  [0x404973]\n401533  add     rax, 0x8\n401537  mov     qword  ptr  [rax-0x8], rdx\n40153b  mov     qword  ptr  [rsp], rax\n\n40153f  cmp     qword  ptr  [rsp], rbp\n401543  jbe     0x4016a0\n40153f  cmp     qword  ptr  [rsp], rbp\n401543  jbe     0x4016a0\n4016a0  mov     edi, 0x2000\n4016a5  call    xmalloc\n401549  mov     r13, qword  ptr  [rbp]\n40154d  mov     rbx, rbp\n401550  mov     r15d, 0x1\n401556  xor     r12d, r12d\n401559  mov     r14, r13\n\n40155c  mov     rdi, r14\n40155f  add     rbx, 0x8\n401563  call    strlen\n4016aa  mov     byte  ptr  [rax-0x1], 0xa\n4016ae  ud2     \n401568  add     rax, 0x1\n40156c  add     r12, rax\n40156f  cmp     rbx, qword  ptr  [rsp]\n401573  jae     0x401590\n401575  add     rax, r14\n401578  mov     r14, qword  ptr  [rbx]\n40157b  cmp     rax, r14\n40157e  mov     eax, 0x0\n401583  cmovne  r15d, eax\n401587  jmp     0x40155c\n401590  cmp     r12, 0x1000\n401597  jbe     0x4015ed\n40155c  mov     rdi, r14\n40155f  add     rbx, 0x8\n401563  call    strlen\n4015ed  mov     r12d, 0x2000\n\n4015f3  mov     rdi, r12\n4015f6  xor     r15d, r15d\n4015f9  call    xmalloc\n401599  test    r15b, r15b\n40159c  je      0x4015f3\n4015fe  mov     r13, rax\n401601  jmp     0x40159e\n4015f3  mov     rdi, r12\n4015f6  xor     r15d, r15d\n4015f9  call    xmalloc\n40159e  xor     ebx, ebx\n4015a0  jmp     0x4015c0\n4015c0  mov     rsi, qword  ptr  [rbp]\n4015c4  mov     rdi, rsi\n4015c7  mov     qword  ptr  [rsp+0x8], rsi\n4015cc  call    strlen\n4015d1  test    r15b, r15b\n4015d4  mov     r14, rax\n4015d7  mov     rsi, qword  ptr  [rsp+0x8]\n4015dc  jne     0x4015a8\n4015de  lea     rdi,  [r13+rbx]\n4015e3  mov     rdx, rax\n4015e6  call    memcpy\n4015a8  lea     rax,  [r14+rbx]\n4015ac  add     rbp, 0x8\n4015b0  lea     rbx,  [rax+0x1]\n4015b4  add     rax, r13\n4015b7  cmp     qword  ptr  [rsp], rbp\n4015bb  mov     byte  ptr  [rax], 0x20\n4015be  jbe     0x401608\n4015eb  jmp     0x4015a8\n401608  xor     edx, edx\n40160a  mov     byte  ptr  [rax], 0xa\n40160d  mov     rax, r12\n401610  div     rbx\n401613  mov     rbp, rax\n401616  mov     r12, rax\n401619  sub     rbp, 0x1\n40161d  je      0x401646\n401646  mov     rdx, rbx\n401649  mov     rsi, r13\n40164c  mov     edi, 0x1\n401651  call    full_write\n40161f  lea     rcx,  [r13+rbx]\n401624  nop     dword  ptr  [rax]\n\n401628  mov     rdi, rcx\n40162b  mov     rdx, rbx\n40162e  mov     rsi, r13\n401631  call    memcpy\n401656  cmp     rax, rbx\n401659  je      0x401646\n401636  mov     rcx, rax\n401639  add     rcx, rbx\n40163c  sub     rbp, 0x1\n401640  jne     0x401628\n40165b  lea     rsi,  [0x404975]\n401662  mov     edx, 0x5\n401667  xor     edi, edi\n401669  call    dcgettext\n401642  imul    rbx, r12\n\n401646  mov     rdx, rbx\n401649  mov     rsi, r13\n40164c  mov     edi, 0x1\n401651  call    full_write\n401628  mov     rdi, rcx\n40162b  mov     rdx, rbx\n40162e  mov     rsi, r13\n401631  call    memcpy\n40166e  mov     rbx, rax\n401671  call    __errno_location\n401676  mov     esi, dword  ptr  [rax]\n401678  mov     rdx, rbx\n40167b  xor     eax, eax\n40167d  xor     edi, edi\n40167f  call    error\n401684  add     rsp, 0x18\n401688  mov     eax, 0x1\n40168d  pop     rbx\n40168e  pop     rbp\n40168f  pop     r12\n401691  pop     r13\n401693  pop     r14\n401695  pop     r15\n401697  ret     \n,Name the following assembly function:\n401470  push    r15\n401472  push    r14\n401474  push    r13\n401476  push    r12\n401478  mov     r12d, edi\n40147b  push    rbp\n40147c  push    rbx\n40147d  mov     rbx, rsi\n401480  sub     rsp, 0x18\n401484  mov     rdi, qword  ptr  [rsi]\n401487  call    set_program_name\n40148c  lea     rsi,  [0x4050c1]\n401493  mov     edi, 0x6\n401498  call    setlocale\n40149d  lea     rsi,  [0x40494b]\n4014a4  lea     rdi,  [0x404922]\n4014ab  call    bindtextdomain\n4014b0  lea     rdi,  [0x404922]\n4014b7  call    textdomain\n4014bc  lea     rdi,  [close_stdout]\n4014c3  call    atexit\n4014c8  lea     rax,  [0x404963]\n4014cf  sub     rsp, 0x8\n4014d3  mov     r8,  [Version]\n4014da  push    0x0\n4014dc  lea     rdx,  [0x4048a4]\n4014e3  lea     rcx,  [0x40491e]\n4014ea  push    rax\n4014eb  lea     rax,  [usage]\n4014f2  mov     r9d, 0x1\n4014f8  mov     rsi, rbx\n4014fb  mov     edi, r12d\n4014fe  push    rax\n4014ff  xor     eax, eax\n401501  call    parse_gnu_standard_options_only\n401506  movsxd  rdx,  [optind@@GLIBC_2.2.5]\n40150d  mov     rax, rdx\n401510  lea     rbp,  [rbx+rdx*0x8]\n401514  movsxd  rdx, r12d\n401517  lea     rdx,  [rbx+rdx*0x8]\n40151b  mov     qword  ptr  [rsp+0x20], rdx\n401520  add     rsp, 0x20\n401524  cmp     eax, r12d\n401527  jne     0x40153f\n401529  mov     rax, rdx\n40152c  lea     rdx,  [0x404973]\n401533  add     rax, 0x8\n401537  mov     qword  ptr  [rax-0x8], rdx\n40153b  mov     qword  ptr  [rsp], rax\n\n40153f  cmp     qword  ptr  [rsp], rbp\n401543  jbe     0x4016a0\n40153f  cmp     qword  ptr  [rsp], rbp\n401543  jbe     0x4016a0\n4016a0  mov     edi, 0x2000\n4016a5  call    xmalloc\n401549  mov     r13, qword  ptr  [rbp]\n40154d  mov     rbx, rbp\n401550  mov     r15d, 0x1\n401556  xor     r12d, r12d\n401559  mov     r14, r13\n\n40155c  mov     rdi, r14\n40155f  add     rbx, 0x8\n401563  call    strlen\n4016aa  mov     byte  ptr  [rax-0x1], 0xa\n4016ae  ud2     \n401568  add     rax, 0x1\n40156c  add     r12, rax\n40156f  cmp     rbx, qword  ptr  [rsp]\n401573  jae     0x401590\n401575  add     rax, r14\n401578  mov     r14, qword  ptr  [rbx]\n40157b  cmp     rax, r14\n40157e  mov     eax, 0x0\n401583  cmovne  r15d, eax\n401587  jmp     0x40155c\n401590  cmp     r12, 0x1000\n401597  jbe     0x4015ed\n40155c  mov     rdi, r14\n40155f  add     rbx, 0x8\n401563  call    strlen\n4015ed  mov     r12d, 0x2000\n\n4015f3  mov     rdi, r12\n4015f6  xor     r15d, r15d\n4015f9  call    xmalloc\n401599  test    r15b, r15b\n40159c  je      0x4015f3\n4015fe  mov     r13, rax\n401601  jmp     0x40159e\n4015f3  mov     rdi, r12\n4015f6  xor     r15d, r15d\n4015f9  call    xmalloc\n40159e  xor     ebx, ebx\n4015a0  jmp     0x4015c0\n4015c0  mov     rsi, qword  ptr  [rbp]\n4015c4  mov     rdi, rsi\n4015c7  mov     qword  ptr  [rsp+0x8], rsi\n4015cc  call    strlen\n4015d1  test    r15b, r15b\n4015d4  mov     r14, rax\n4015d7  mov     rsi, qword  ptr  [rsp+0x8]\n4015dc  jne     0x4015a8\n4015de  lea     rdi,  [r13+rbx]\n4015e3  mov     rdx, rax\n4015e6  call    memcpy\n4015a8  lea     rax,  [r14+rbx]\n4015ac  add     rbp, 0x8\n4015b0  lea     rbx,  [rax+0x1]\n4015b4  add     rax, r13\n4015b7  cmp     qword  ptr  [rsp], rbp\n4015bb  mov     byte  ptr  [rax], 0x20\n4015be  jbe     0x401608\n4015eb  jmp     0x4015a8\n401608  xor     edx, edx\n40160a  mov     byte  ptr  [rax], 0xa\n40160d  mov     rax, r12\n401610  div     rbx\n401613  mov     rbp, rax\n401616  mov     r12, rax\n401619  sub     rbp, 0x1\n40161d  je      0x401646\n401646  mov     rdx, rbx\n401649  mov     rsi, r13\n40164c  mov     edi, 0x1\n401651  call    full_write\n40161f  lea     rcx,  [r13+rbx]\n401624  nop     dword  ptr  [rax]\n\n401628  mov     rdi, rcx\n40162b  mov     rdx, rbx\n40162e  mov     rsi, r13\n401631  call    memcpy\n401656  cmp     rax, rbx\n401659  je      0x401646\n401636  mov     rcx, rax\n401639  add     rcx, rbx\n40163c  sub     rbp, 0x1\n401640  jne     0x401628\n40165b  lea     rsi,  [0x404975]\n401662  mov     edx, 0x5\n401667  xor     edi, edi\n401669  call    dcgettext\n401642  imul    rbx, r12\n\n401646  mov     rdx, rbx\n401649  mov     rsi, r13\n40164c  mov     edi, 0x1\n401651  call    full_write\n401628  mov     rdi, rcx\n40162b  mov     rdx, rbx\n40162e  mov     rsi, r13\n401631  call    memcpy\n40166e  mov     rbx, rax\n401671  call    __errno_location\n401676  mov     esi, dword  ptr  [rax]\n401678  mov     rdx, rbx\n40167b  xor     eax, eax\n40167d  xor     edi, edi\n40167f  call    error\n401684  add     rsp, 0x18\n401688  mov     eax, 0x1\n40168d  pop     rbx\n40168e  pop     rbp\n40168f  pop     r12\n401691  pop     r13\n401693  pop     r14\n401695  pop     r15\n401697  ret     \n,an error occurred.\nThis model's maximum context length is 4097 tokens, however you requested 4727 tokens (2227 in your prompt; 2500 for the completion). Please reduce your prompt; or completion length.sub_401589
,401589  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401589  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4015a2
,4015a2  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4015a2  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_401603
,401603  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401603  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionsub_401698
,401698  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401698  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)_start
,4016b0  xor     ebp, ebp\n4016b2  mov     r9, rdx\n4016b5  pop     rsi\n4016b6  mov     rdx, rsp\n4016b9  and     rsp, 0xfffffffffffffff0\n4016bd  push    rax\n4016be  push    rsp\n4016bf  lea     r8,  [__libc_csu_fini]\n4016c6  lea     rcx,  [__libc_csu_init]\n4016cd  lea     rdi,  [main]\n4016d4  call     [0x606fc8]\n,Name the following assembly function:\n4016b0  xor     ebp, ebp\n4016b2  mov     r9, rdx\n4016b5  pop     rsi\n4016b6  mov     rdx, rsp\n4016b9  and     rsp, 0xfffffffffffffff0\n4016bd  push    rax\n4016be  push    rsp\n4016bf  lea     r8,  [__libc_csu_fini]\n4016c6  lea     rcx,  [__libc_csu_init]\n4016cd  lea     rdi,  [main]\n4016d4  call     [0x606fc8]\n,\nFunction 0x606fc8sub_4016da
,4016da  hlt     \n,Name the following assembly function:\n4016da  hlt     \n,\nHalt (HLT)sub_4016db
,4016db  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4016db  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)deregister_tm_clones
,4016e0  lea     rdi,  [program_invocation_short_name@@GLIBC_2.2.5]\n4016e7  push    rbp\n4016e8  lea     rax,  [program_invocation_short_name@@GLIBC_2.2.5]\n4016ef  cmp     rax, rdi\n4016f2  mov     rbp, rsp\n4016f5  je      0x401710\n401710  pop     rbp\n401711  ret     \n4016f7  mov     rax,  [0x606fc0]\n4016fe  test    rax, rax\n401701  je      0x401710\n401703  pop     rbp\n401704  jmp     rax\n,Name the following assembly function:\n4016e0  lea     rdi,  [program_invocation_short_name@@GLIBC_2.2.5]\n4016e7  push    rbp\n4016e8  lea     rax,  [program_invocation_short_name@@GLIBC_2.2.5]\n4016ef  cmp     rax, rdi\n4016f2  mov     rbp, rsp\n4016f5  je      0x401710\n401710  pop     rbp\n401711  ret     \n4016f7  mov     rax,  [0x606fc0]\n4016fe  test    rax, rax\n401701  je      0x401710\n401703  pop     rbp\n401704  jmp     rax\n,\nprogram_invocation_short_name@@GLIBC_2.2.5sub_401712
,401712  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401712  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)register_tm_clones
,401720  lea     rdi,  [program_invocation_short_name@@GLIBC_2.2.5]\n401727  lea     rsi,  [program_invocation_short_name@@GLIBC_2.2.5]\n40172e  push    rbp\n40172f  sub     rsi, rdi\n401732  mov     rbp, rsp\n401735  sar     rsi, 0x3\n401739  mov     rax, rsi\n40173c  shr     rax, 0x3f\n401740  add     rsi, rax\n401743  sar     rsi, 0x1\n401746  je      0x401760\n401760  pop     rbp\n401761  ret     \n401748  mov     rax,  [0x606fd8]\n40174f  test    rax, rax\n401752  je      0x401760\n401754  pop     rbp\n401755  jmp     rax\n401757  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n401720  lea     rdi,  [program_invocation_short_name@@GLIBC_2.2.5]\n401727  lea     rsi,  [program_invocation_short_name@@GLIBC_2.2.5]\n40172e  push    rbp\n40172f  sub     rsi, rdi\n401732  mov     rbp, rsp\n401735  sar     rsi, 0x3\n401739  mov     rax, rsi\n40173c  shr     rax, 0x3f\n401740  add     rsi, rax\n401743  sar     rsi, 0x1\n401746  je      0x401760\n401760  pop     rbp\n401761  ret     \n401748  mov     rax,  [0x606fd8]\n40174f  test    rax, rax\n401752  je      0x401760\n401754  pop     rbp\n401755  jmp     rax\n401757  nop     word  ptr  [rax+rax]\n,\nstrncmp ()sub_401762
,401762  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401762  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4017a1
,4017a1  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4017a1  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4017aa
,4017aa  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4017aa  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Word Pointer on RAX + RAXframe_dummy
,4017b0  push    rbp\n4017b1  mov     rbp, rsp\n4017b4  pop     rbp\n4017b5  jmp     register_tm_clones\n,Name the following assembly function:\n4017b0  push    rbp\n4017b1  mov     rbp, rsp\n4017b4  pop     rbp\n4017b5  jmp     register_tm_clones\n,\nregister_tm_clonessub_4017ba
,4017ba  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4017ba  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)usage
,4017c0  push    r13\n4017c2  push    r12\n4017c4  mov     edx, 0x5\n4017c9  push    rbp\n4017ca  push    rbx\n4017cb  mov     ebp, edi\n4017cd  sub     rsp, 0x88\n4017d4  mov     rbx,  [program_name]\n4017e4  mov     qword  ptr  [rsp+0x78], rax\n4017e9  xor     eax, eax\n4017eb  test    edi, edi\n4017ed  je      0x40181d\n40181d  lea     rsi,  [0x4049b0]\n401824  xor     edi, edi\n401826  call    dcgettext\n4017ef  lea     rsi,  [0x404988]\n4017f6  xor     edi, edi\n4017f8  call    dcgettext\n40182b  mov     rcx, rbx\n40182e  mov     rdx, rbx\n401831  mov     rsi, rax\n401834  mov     edi, 0x1\n401839  xor     eax, eax\n40183b  call    __printf_chk\n4017fd  mov     rdi,  [stderr@@GLIBC_2.2.5]\n401804  mov     rdx, rax\n401807  mov     rcx, rbx\n40180a  mov     esi, 0x1\n40180f  xor     eax, eax\n401811  call    __fprintf_chk\n401840  mov     rbx,  [stdout@@GLIBC_2.2.5]\n401847  lea     rsi,  [0x4049d8]\n40184e  mov     edx, 0x5\n401853  xor     edi, edi\n401855  call    dcgettext\n401816  mov     edi, ebp\n401818  call    exit\n40185a  mov     rsi, rbx\n40185d  mov     rdi, rax\n401860  call    fputs_unlocked\n401865  mov     rbx,  [stdout@@GLIBC_2.2.5]\n40186c  lea     rsi,  [0x404a20]\n401873  mov     edx, 0x5\n401878  xor     edi, edi\n40187a  call    dcgettext\n40187f  mov     rsi, rbx\n401882  mov     rdi, rax\n401885  call    fputs_unlocked\n40188a  mov     rbx,  [stdout@@GLIBC_2.2.5]\n401891  lea     rsi,  [0x404a50]\n401898  mov     edx, 0x5\n40189d  xor     edi, edi\n40189f  call    dcgettext\n4018a4  mov     rsi, rbx\n4018a7  mov     rdi, rax\n4018aa  lea     rbx,  [0x4048a4]\n4018b1  call    fputs_unlocked\n4018b6  lea     rax,  [0x4048a8]\n4018bd  lea     rcx,  [0x4048e9]\n4018c4  mov     qword  ptr  [rsp+0x60], 0x0\n4018cd  mov     qword  ptr  [rsp+0x68], 0x0\n4018d6  mov     rdx, rsp\n4018d9  mov     qword  ptr  [rsp], rax\n4018dd  lea     rax,  [0x4048aa]\n4018e4  mov     qword  ptr  [rsp+0x30], rcx\n4018e9  lea     rcx,  [0x4048f3]\n4018f0  mov     qword  ptr  [rsp+0x8], rax\n4018f5  lea     rax,  [0x404922]\n4018fc  mov     qword  ptr  [rsp+0x40], rcx\n401901  lea     rcx,  [0x4048fd]\n401908  mov     qword  ptr  [rsp+0x10], rax\n40190d  lea     rax,  [0x4048ba]\n401914  mov     qword  ptr  [rsp+0x50], rcx\n401919  mov     qword  ptr  [rsp+0x18], rax\n40191e  lea     rax,  [0x4048d0]\n401925  mov     qword  ptr  [rsp+0x20], rax\n40192a  lea     rax,  [0x4048da]\n401931  mov     qword  ptr  [rsp+0x28], rax\n401936  mov     qword  ptr  [rsp+0x38], rax\n40193b  mov     qword  ptr  [rsp+0x48], rax\n401940  mov     qword  ptr  [rsp+0x58], rax\n401945  nop     dword  ptr  [rax]\n\n401948  add     rdx, 0x10\n40194c  mov     rdi, qword  ptr  [rdx]\n40194f  test    rdi, rdi\n401952  je      0x401967\n401967  mov     r12, qword  ptr  [rdx+0x8]\n40196b  xor     edi, edi\n40196d  mov     edx, 0x5\n401972  lea     rsi,  [0x404907]\n401979  test    r12, r12\n40197c  je      0x401a43\n  401954  mov     ecx, 0x4\n  401959  mov     rsi, rbx\n  \n@ 40195c  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401a43  call    dcgettext\n401982  call    dcgettext\n40195e  seta    al\n401961  sbb     al, 0x0\n401963  test    al, al\n401965  jne     0x401948\n@ 40195c  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401a48  lea     rcx,  [0x404a88]\n401a4f  lea     rdx,  [0x40491e]\n401a56  mov     rsi, rax\n401a59  mov     edi, 0x1\n401a5e  xor     eax, eax\n401a60  call    __printf_chk\n401987  lea     rcx,  [0x404a88]\n40198e  lea     rdx,  [0x40491e]\n401995  mov     rsi, rax\n401998  mov     edi, 0x1\n40199d  xor     eax, eax\n40199f  call    __printf_chk\n401948  add     rdx, 0x10\n40194c  mov     rdi, qword  ptr  [rdx]\n40194f  test    rdi, rdi\n401952  je      0x401967\n401a65  xor     esi, esi\n401a67  mov     edi, 0x5\n401a6c  call    setlocale\n4019a4  xor     esi, esi\n4019a6  mov     edi, 0x5\n4019ab  call    setlocale\n401a71  test    rax, rax\n401a74  je      0x401a8e\n4019b0  test    rax, rax\n4019b3  je      0x4019d1\n401a8e  lea     rsi,  [0x404930]\n401a95  mov     edx, 0x5\n401a9a  xor     edi, edi\n401a9c  lea     r12,  [0x4048a4]\n401aa3  lea     rbx,  [0x4048c4]\n401aaa  call    dcgettext\n401a76  lea     rsi,  [0x40492c]\n401a7d  mov     edx, 0x3\n401a82  mov     rdi, rax\n401a85  call    strncmp\n4019d1  lea     rsi,  [0x404930]\n4019d8  xor     edi, edi\n4019da  mov     edx, 0x5\n4019df  call    dcgettext\n4019b5  lea     rsi,  [0x40492c]\n4019bc  mov     edx, 0x3\n4019c1  mov     rdi, rax\n4019c4  call    strncmp\n401aaf  lea     rcx,  [0x4048a4]\n401ab6  lea     rdx,  [0x404a88]\n401abd  mov     rsi, rax\n401ac0  mov     edi, 0x1\n401ac5  xor     eax, eax\n401ac7  call    __printf_chk\n401a8a  test    eax, eax\n401a8c  jne     0x401ad1\n4019e4  lea     rcx,  [0x4048a4]\n4019eb  lea     rdx,  [0x404a88]\n4019f2  mov     rsi, rax\n4019f5  mov     edi, 0x1\n4019fa  xor     eax, eax\n4019fc  call    __printf_chk\n4019c9  test    eax, eax\n4019cb  jne     0x401ad8\n401acc  jmp     0x401a16\n401ad1  lea     r12,  [0x4048a4]\n\n401ad8  mov     r13,  [stdout@@GLIBC_2.2.5]\n401adf  lea     rsi,  [0x404ab0]\n401ae6  xor     edi, edi\n401ae8  mov     edx, 0x5\n401aed  call    dcgettext\n401a01  cmp     r12, rbx\n401a04  lea     rcx,  [0x4048c4]\n401a0b  lea     rbx,  [0x4050c1]\n401a12  cmove   rbx, rcx\n\n401a16  lea     rsi,  [0x404af8]\n401a1d  xor     edi, edi\n401a1f  mov     edx, 0x5\n401a24  call    dcgettext\n401ad8  mov     r13,  [stdout@@GLIBC_2.2.5]\n401adf  lea     rsi,  [0x404ab0]\n401ae6  xor     edi, edi\n401ae8  mov     edx, 0x5\n401aed  call    dcgettext\n401a16  lea     rsi,  [0x404af8]\n401a1d  xor     edi, edi\n401a1f  mov     edx, 0x5\n401a24  call    dcgettext\n401af2  mov     rsi, r13\n401af5  mov     rdi, rax\n401af8  call    fputs_unlocked\n401a29  mov     rcx, rbx\n401a2c  mov     rsi, rax\n401a2f  mov     rdx, r12\n401a32  mov     edi, 0x1\n401a37  xor     eax, eax\n401a39  call    __printf_chk\n401afd  jmp     0x4019d1\n401a3e  jmp     0x401816\n,Name the following assembly function:\n4017c0  push    r13\n4017c2  push    r12\n4017c4  mov     edx, 0x5\n4017c9  push    rbp\n4017ca  push    rbx\n4017cb  mov     ebp, edi\n4017cd  sub     rsp, 0x88\n4017d4  mov     rbx,  [program_name]\n4017e4  mov     qword  ptr  [rsp+0x78], rax\n4017e9  xor     eax, eax\n4017eb  test    edi, edi\n4017ed  je      0x40181d\n40181d  lea     rsi,  [0x4049b0]\n401824  xor     edi, edi\n401826  call    dcgettext\n4017ef  lea     rsi,  [0x404988]\n4017f6  xor     edi, edi\n4017f8  call    dcgettext\n40182b  mov     rcx, rbx\n40182e  mov     rdx, rbx\n401831  mov     rsi, rax\n401834  mov     edi, 0x1\n401839  xor     eax, eax\n40183b  call    __printf_chk\n4017fd  mov     rdi,  [stderr@@GLIBC_2.2.5]\n401804  mov     rdx, rax\n401807  mov     rcx, rbx\n40180a  mov     esi, 0x1\n40180f  xor     eax, eax\n401811  call    __fprintf_chk\n401840  mov     rbx,  [stdout@@GLIBC_2.2.5]\n401847  lea     rsi,  [0x4049d8]\n40184e  mov     edx, 0x5\n401853  xor     edi, edi\n401855  call    dcgettext\n401816  mov     edi, ebp\n401818  call    exit\n40185a  mov     rsi, rbx\n40185d  mov     rdi, rax\n401860  call    fputs_unlocked\n401865  mov     rbx,  [stdout@@GLIBC_2.2.5]\n40186c  lea     rsi,  [0x404a20]\n401873  mov     edx, 0x5\n401878  xor     edi, edi\n40187a  call    dcgettext\n40187f  mov     rsi, rbx\n401882  mov     rdi, rax\n401885  call    fputs_unlocked\n40188a  mov     rbx,  [stdout@@GLIBC_2.2.5]\n401891  lea     rsi,  [0x404a50]\n401898  mov     edx, 0x5\n40189d  xor     edi, edi\n40189f  call    dcgettext\n4018a4  mov     rsi, rbx\n4018a7  mov     rdi, rax\n4018aa  lea     rbx,  [0x4048a4]\n4018b1  call    fputs_unlocked\n4018b6  lea     rax,  [0x4048a8]\n4018bd  lea     rcx,  [0x4048e9]\n4018c4  mov     qword  ptr  [rsp+0x60], 0x0\n4018cd  mov     qword  ptr  [rsp+0x68], 0x0\n4018d6  mov     rdx, rsp\n4018d9  mov     qword  ptr  [rsp], rax\n4018dd  lea     rax,  [0x4048aa]\n4018e4  mov     qword  ptr  [rsp+0x30], rcx\n4018e9  lea     rcx,  [0x4048f3]\n4018f0  mov     qword  ptr  [rsp+0x8], rax\n4018f5  lea     rax,  [0x404922]\n4018fc  mov     qword  ptr  [rsp+0x40], rcx\n401901  lea     rcx,  [0x4048fd]\n401908  mov     qword  ptr  [rsp+0x10], rax\n40190d  lea     rax,  [0x4048ba]\n401914  mov     qword  ptr  [rsp+0x50], rcx\n401919  mov     qword  ptr  [rsp+0x18], rax\n40191e  lea     rax,  [0x4048d0]\n401925  mov     qword  ptr  [rsp+0x20], rax\n40192a  lea     rax,  [0x4048da]\n401931  mov     qword  ptr  [rsp+0x28], rax\n401936  mov     qword  ptr  [rsp+0x38], rax\n40193b  mov     qword  ptr  [rsp+0x48], rax\n401940  mov     qword  ptr  [rsp+0x58], rax\n401945  nop     dword  ptr  [rax]\n\n401948  add     rdx, 0x10\n40194c  mov     rdi, qword  ptr  [rdx]\n40194f  test    rdi, rdi\n401952  je      0x401967\n401967  mov     r12, qword  ptr  [rdx+0x8]\n40196b  xor     edi, edi\n40196d  mov     edx, 0x5\n401972  lea     rsi,  [0x404907]\n401979  test    r12, r12\n40197c  je      0x401a43\n  401954  mov     ecx, 0x4\n  401959  mov     rsi, rbx\n  \n@ 40195c  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401a43  call    dcgettext\n401982  call    dcgettext\n40195e  seta    al\n401961  sbb     al, 0x0\n401963  test    al, al\n401965  jne     0x401948\n@ 40195c  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401a48  lea     rcx,  [0x404a88]\n401a4f  lea     rdx,  [0x40491e]\n401a56  mov     rsi, rax\n401a59  mov     edi, 0x1\n401a5e  xor     eax, eax\n401a60  call    __printf_chk\n401987  lea     rcx,  [0x404a88]\n40198e  lea     rdx,  [0x40491e]\n401995  mov     rsi, rax\n401998  mov     edi, 0x1\n40199d  xor     eax, eax\n40199f  call    __printf_chk\n401948  add     rdx, 0x10\n40194c  mov     rdi, qword  ptr  [rdx]\n40194f  test    rdi, rdi\n401952  je      0x401967\n401a65  xor     esi, esi\n401a67  mov     edi, 0x5\n401a6c  call    setlocale\n4019a4  xor     esi, esi\n4019a6  mov     edi, 0x5\n4019ab  call    setlocale\n401a71  test    rax, rax\n401a74  je      0x401a8e\n4019b0  test    rax, rax\n4019b3  je      0x4019d1\n401a8e  lea     rsi,  [0x404930]\n401a95  mov     edx, 0x5\n401a9a  xor     edi, edi\n401a9c  lea     r12,  [0x4048a4]\n401aa3  lea     rbx,  [0x4048c4]\n401aaa  call    dcgettext\n401a76  lea     rsi,  [0x40492c]\n401a7d  mov     edx, 0x3\n401a82  mov     rdi, rax\n401a85  call    strncmp\n4019d1  lea     rsi,  [0x404930]\n4019d8  xor     edi, edi\n4019da  mov     edx, 0x5\n4019df  call    dcgettext\n4019b5  lea     rsi,  [0x40492c]\n4019bc  mov     edx, 0x3\n4019c1  mov     rdi, rax\n4019c4  call    strncmp\n401aaf  lea     rcx,  [0x4048a4]\n401ab6  lea     rdx,  [0x404a88]\n401abd  mov     rsi, rax\n401ac0  mov     edi, 0x1\n401ac5  xor     eax, eax\n401ac7  call    __printf_chk\n401a8a  test    eax, eax\n401a8c  jne     0x401ad1\n4019e4  lea     rcx,  [0x4048a4]\n4019eb  lea     rdx,  [0x404a88]\n4019f2  mov     rsi, rax\n4019f5  mov     edi, 0x1\n4019fa  xor     eax, eax\n4019fc  call    __printf_chk\n4019c9  test    eax, eax\n4019cb  jne     0x401ad8\n401acc  jmp     0x401a16\n401ad1  lea     r12,  [0x4048a4]\n\n401ad8  mov     r13,  [stdout@@GLIBC_2.2.5]\n401adf  lea     rsi,  [0x404ab0]\n401ae6  xor     edi, edi\n401ae8  mov     edx, 0x5\n401aed  call    dcgettext\n401a01  cmp     r12, rbx\n401a04  lea     rcx,  [0x4048c4]\n401a0b  lea     rbx,  [0x4050c1]\n401a12  cmove   rbx, rcx\n\n401a16  lea     rsi,  [0x404af8]\n401a1d  xor     edi, edi\n401a1f  mov     edx, 0x5\n401a24  call    dcgettext\n401ad8  mov     r13,  [stdout@@GLIBC_2.2.5]\n401adf  lea     rsi,  [0x404ab0]\n401ae6  xor     edi, edi\n401ae8  mov     edx, 0x5\n401aed  call    dcgettext\n401a16  lea     rsi,  [0x404af8]\n401a1d  xor     edi, edi\n401a1f  mov     edx, 0x5\n401a24  call    dcgettext\n401af2  mov     rsi, r13\n401af5  mov     rdi, rax\n401af8  call    fputs_unlocked\n401a29  mov     rcx, rbx\n401a2c  mov     rsi, rax\n401a2f  mov     rdx, r12\n401a32  mov     edi, 0x1\n401a37  xor     eax, eax\n401a39  call    __printf_chk\n401afd  jmp     0x4019d1\n401a3e  jmp     0x401816\n,an error occurred.\nThis model's maximum context length is 4097 tokens, however you requested 5497 tokens (2997 in your prompt; 2500 for the completion). Please reduce your prompt; or completion length.sub_401b02
,401b0c  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401b0c  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)close_stdout_set_file_name
,401b10  mov      [file_name], rdi\n401b17  ret     \n,Name the following assembly function:\n401b10  mov      [file_name], rdi\n401b17  ret     \n,\nfile_name functionsub_401b18
,401b18  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401b18  nop     dword  ptr  [rax+rax]\n,\nNoOperation (NOP)close_stdout_set_ignore_EPIPE
,401b20  mov      [ignore_EPIPE], dil\n401b27  ret     \n,Name the following assembly function:\n401b20  mov      [ignore_EPIPE], dil\n401b27  ret     \n,\nignore_EPIPE functionsub_401b28
,401b28  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401b28  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)close_stdout
,401b30  push    rbp\n401b31  push    rbx\n401b32  sub     rsp, 0x8\n401b36  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401b3d  call    close_stream\n401b42  test    eax, eax\n401b44  je      0x401b5c\n401b5c  mov     rdi,  [stderr@@GLIBC_2.2.5]\n401b63  call    close_stream\n401b46  call    __errno_location\n401b68  test    eax, eax\n401b6a  jne     0x401bb2\n401b4b  cmp      [ignore_EPIPE], 0x0\n401b52  mov     rbx, rax\n401b55  je      0x401b73\n401b6c  add     rsp, 0x8\n401b70  pop     rbx\n401b71  pop     rbp\n401b72  ret     \n401bb2  mov     edi,  [exit_failure]\n401bb8  call    _exit\n401b73  lea     rsi,  [0x404b30]\n401b7a  xor     edi, edi\n401b7c  mov     edx, 0x5\n401b81  call    dcgettext\n401b57  cmp     dword  ptr  [rax], 0x20\n401b5a  jne     0x401b73\n401bbd  mov     esi, dword  ptr  [rbx]\n401bbf  lea     rdx,  [0x404b40]\n401bc6  mov     rcx, rax\n401bc9  xor     edi, edi\n401bcb  xor     eax, eax\n401bcd  call    error\n401b86  mov     rdi,  [file_name]\n401b8d  mov     rbp, rax\n401b90  test    rdi, rdi\n401b93  je      0x401bbd\n401bd2  jmp     0x401bb2\n401b95  call    quotearg_colon\n401b9a  mov     esi, dword  ptr  [rbx]\n401b9c  lea     rdx,  [0x404b3c]\n401ba3  mov     rcx, rax\n401ba6  mov     r8, rbp\n401ba9  xor     edi, edi\n401bab  xor     eax, eax\n401bad  call    error\n,Name the following assembly function:\n401b30  push    rbp\n401b31  push    rbx\n401b32  sub     rsp, 0x8\n401b36  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401b3d  call    close_stream\n401b42  test    eax, eax\n401b44  je      0x401b5c\n401b5c  mov     rdi,  [stderr@@GLIBC_2.2.5]\n401b63  call    close_stream\n401b46  call    __errno_location\n401b68  test    eax, eax\n401b6a  jne     0x401bb2\n401b4b  cmp      [ignore_EPIPE], 0x0\n401b52  mov     rbx, rax\n401b55  je      0x401b73\n401b6c  add     rsp, 0x8\n401b70  pop     rbx\n401b71  pop     rbp\n401b72  ret     \n401bb2  mov     edi,  [exit_failure]\n401bb8  call    _exit\n401b73  lea     rsi,  [0x404b30]\n401b7a  xor     edi, edi\n401b7c  mov     edx, 0x5\n401b81  call    dcgettext\n401b57  cmp     dword  ptr  [rax], 0x20\n401b5a  jne     0x401b73\n401bbd  mov     esi, dword  ptr  [rbx]\n401bbf  lea     rdx,  [0x404b40]\n401bc6  mov     rcx, rax\n401bc9  xor     edi, edi\n401bcb  xor     eax, eax\n401bcd  call    error\n401b86  mov     rdi,  [file_name]\n401b8d  mov     rbp, rax\n401b90  test    rdi, rdi\n401b93  je      0x401bbd\n401bd2  jmp     0x401bb2\n401b95  call    quotearg_colon\n401b9a  mov     esi, dword  ptr  [rbx]\n401b9c  lea     rdx,  [0x404b3c]\n401ba3  mov     rcx, rax\n401ba6  mov     r8, rbp\n401ba9  xor     edi, edi\n401bab  xor     eax, eax\n401bad  call    error\n,\nclose_stream functionsub_401bd4
,401bde  nop     \n,Name the following assembly function:\n401bde  nop     \n,401bdf  mov     edx, [ebp+arg_0]\n\nFunction1full_write
,401be0  push    r13\n401be2  push    r12\n401be4  push    rbp\n401be5  push    rbx\n401be6  sub     rsp, 0x8\n401bea  test    rdx, rdx\n401bed  je      0x401c51\n401c51  xor     r12d, r12d\n401c54  jmp     0x401c24\n401bef  mov     r13d, edi\n401bf2  mov     rbp, rsi\n401bf5  mov     rbx, rdx\n401bf8  xor     r12d, r12d\n401bfb  jmp     0x401c10\n401c24  add     rsp, 0x8\n401c28  mov     rax, r12\n401c2b  pop     rbx\n401c2c  pop     rbp\n401c2d  pop     r12\n401c2f  pop     r13\n401c31  ret     \n401c10  mov     rdx, rbx\n401c13  mov     rsi, rbp\n401c16  mov     edi, r13d\n401c19  call    safe_write\n401c1e  cmp     rax, -0x1\n401c22  jne     0x401c00\n401c00  test    rax, rax\n401c03  je      0x401c38\n401c38  call    __errno_location\n401c05  add     r12, rax\n401c08  add     rbp, rax\n401c0b  sub     rbx, rax\n401c0e  je      0x401c24\n401c3d  mov     dword  ptr  [rax], 0x1c\n401c43  add     rsp, 0x8\n401c47  mov     rax, r12\n401c4a  pop     rbx\n401c4b  pop     rbp\n401c4c  pop     r12\n401c4e  pop     r13\n401c50  ret     \n,Name the following assembly function:\n401be0  push    r13\n401be2  push    r12\n401be4  push    rbp\n401be5  push    rbx\n401be6  sub     rsp, 0x8\n401bea  test    rdx, rdx\n401bed  je      0x401c51\n401c51  xor     r12d, r12d\n401c54  jmp     0x401c24\n401bef  mov     r13d, edi\n401bf2  mov     rbp, rsi\n401bf5  mov     rbx, rdx\n401bf8  xor     r12d, r12d\n401bfb  jmp     0x401c10\n401c24  add     rsp, 0x8\n401c28  mov     rax, r12\n401c2b  pop     rbx\n401c2c  pop     rbp\n401c2d  pop     r12\n401c2f  pop     r13\n401c31  ret     \n401c10  mov     rdx, rbx\n401c13  mov     rsi, rbp\n401c16  mov     edi, r13d\n401c19  call    safe_write\n401c1e  cmp     rax, -0x1\n401c22  jne     0x401c00\n401c00  test    rax, rax\n401c03  je      0x401c38\n401c38  call    __errno_location\n401c05  add     r12, rax\n401c08  add     rbp, rax\n401c0b  sub     rbx, rax\n401c0e  je      0x401c24\n401c3d  mov     dword  ptr  [rax], 0x1c\n401c43  add     rsp, 0x8\n401c47  mov     rax, r12\n401c4a  pop     rbx\n401c4b  pop     rbp\n401c4c  pop     r12\n401c4e  pop     r13\n401c50  ret     \n,\nsafe_write()sub_401bfd
,401bfd  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401bfd  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_401c32
,401c32  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n401c32  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_401c56
,,Name the following assembly function:\n,\nGetProcAddress\n\nAnswer: GetProcAddressparse_long_options
,401c60  push    r13\n401c62  push    r12\n401c64  mov     r13, r8\n401c67  push    rbp\n401c68  push    rbx\n401c69  mov     rbp, rdx\n401c6c  mov     r12, rcx\n401c6f  sub     rsp, 0xe8\n401c76  test    al, al\n401c78  je      0x401cb4\n401cbd  mov     qword  ptr  [rsp+0x28], rax\n401cc2  xor     eax, eax\n401cc4  cmp     edi, 0x2\n401cc7  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401ccd  mov      [opterr@@GLIBC_2.2.5], 0x0\n401cd7  je      0x401d10\n401c7a  movaps  xmmword  ptr  [rsp+0x60], xmm0\n401c7f  movaps  xmmword  ptr  [rsp+0x70], xmm1\n401c84  movaps  xmmword  ptr  [rsp+0x80], xmm2\n401c8c  movaps  xmmword  ptr  [rsp+0x90], xmm3\n401c94  movaps  xmmword  ptr  [rsp+0xa0], xmm4\n401c9c  movaps  xmmword  ptr  [rsp+0xb0], xmm5\n401ca4  movaps  xmmword  ptr  [rsp+0xc0], xmm6\n401cac  movaps  xmmword  ptr  [rsp+0xd0], xmm7\n\n401cbd  mov     qword  ptr  [rsp+0x28], rax\n401cc2  xor     eax, eax\n401cc4  cmp     edi, 0x2\n401cc7  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401ccd  mov      [opterr@@GLIBC_2.2.5], 0x0\n401cd7  je      0x401d10\n401d10  lea     rcx,  [long_options]\n401d17  lea     rdx,  [0x404b43]\n401d1e  xor     r8d, r8d\n401d21  mov     qword  ptr  [rsp+0x8], r9\n401d26  call    getopt_long\n401cd9  mov     rax, qword  ptr  [rsp+0x28]\n401ce7  mov      [opterr@@GLIBC_2.2.5], ebx\n401ced  mov      [optind@@GLIBC_2.2.5], 0x0\n401cf7  jne     0x401d9a\n401d2b  cmp     eax, -0x1\n401d2e  je      0x401cd9\n401cfd  add     rsp, 0xe8\n401d04  pop     rbx\n401d05  pop     rbp\n401d06  pop     r12\n401d08  pop     r13\n401d0a  ret     \n401d9a  call    __stack_chk_fail\n401d30  cmp     eax, 0x68\n401d33  mov     r9, qword  ptr  [rsp+0x8]\n401d38  je      0x401d90\n401d90  xor     edi, edi\n401d92  call    r9\n401d3a  cmp     eax, 0x76\n401d3d  jne     0x401cd9\n401d95  jmp     0x401cd9\n401d3f  lea     rax,  [rsp+0x110]\n401d47  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401d4e  lea     r8,  [rsp+0x10]\n401d53  mov     rcx, r13\n401d56  mov     rdx, r12\n401d59  mov     rsi, rbp\n401d5c  mov     qword  ptr  [rsp+0x18], rax\n401d61  lea     rax,  [rsp+0x30]\n401d66  mov     dword  ptr  [rsp+0x10], 0x30\n401d6e  mov     dword  ptr  [rsp+0x14], 0x30\n401d76  mov     qword  ptr  [rsp+0x20], rax\n401d7b  call    version_etc_va\n401d80  xor     edi, edi\n401d82  call    exit\n,Name the following assembly function:\n401c60  push    r13\n401c62  push    r12\n401c64  mov     r13, r8\n401c67  push    rbp\n401c68  push    rbx\n401c69  mov     rbp, rdx\n401c6c  mov     r12, rcx\n401c6f  sub     rsp, 0xe8\n401c76  test    al, al\n401c78  je      0x401cb4\n401cbd  mov     qword  ptr  [rsp+0x28], rax\n401cc2  xor     eax, eax\n401cc4  cmp     edi, 0x2\n401cc7  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401ccd  mov      [opterr@@GLIBC_2.2.5], 0x0\n401cd7  je      0x401d10\n401c7a  movaps  xmmword  ptr  [rsp+0x60], xmm0\n401c7f  movaps  xmmword  ptr  [rsp+0x70], xmm1\n401c84  movaps  xmmword  ptr  [rsp+0x80], xmm2\n401c8c  movaps  xmmword  ptr  [rsp+0x90], xmm3\n401c94  movaps  xmmword  ptr  [rsp+0xa0], xmm4\n401c9c  movaps  xmmword  ptr  [rsp+0xb0], xmm5\n401ca4  movaps  xmmword  ptr  [rsp+0xc0], xmm6\n401cac  movaps  xmmword  ptr  [rsp+0xd0], xmm7\n\n401cbd  mov     qword  ptr  [rsp+0x28], rax\n401cc2  xor     eax, eax\n401cc4  cmp     edi, 0x2\n401cc7  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401ccd  mov      [opterr@@GLIBC_2.2.5], 0x0\n401cd7  je      0x401d10\n401d10  lea     rcx,  [long_options]\n401d17  lea     rdx,  [0x404b43]\n401d1e  xor     r8d, r8d\n401d21  mov     qword  ptr  [rsp+0x8], r9\n401d26  call    getopt_long\n401cd9  mov     rax, qword  ptr  [rsp+0x28]\n401ce7  mov      [opterr@@GLIBC_2.2.5], ebx\n401ced  mov      [optind@@GLIBC_2.2.5], 0x0\n401cf7  jne     0x401d9a\n401d2b  cmp     eax, -0x1\n401d2e  je      0x401cd9\n401cfd  add     rsp, 0xe8\n401d04  pop     rbx\n401d05  pop     rbp\n401d06  pop     r12\n401d08  pop     r13\n401d0a  ret     \n401d9a  call    __stack_chk_fail\n401d30  cmp     eax, 0x68\n401d33  mov     r9, qword  ptr  [rsp+0x8]\n401d38  je      0x401d90\n401d90  xor     edi, edi\n401d92  call    r9\n401d3a  cmp     eax, 0x76\n401d3d  jne     0x401cd9\n401d95  jmp     0x401cd9\n401d3f  lea     rax,  [rsp+0x110]\n401d47  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401d4e  lea     r8,  [rsp+0x10]\n401d53  mov     rcx, r13\n401d56  mov     rdx, r12\n401d59  mov     rsi, rbp\n401d5c  mov     qword  ptr  [rsp+0x18], rax\n401d61  lea     rax,  [rsp+0x30]\n401d66  mov     dword  ptr  [rsp+0x10], 0x30\n401d6e  mov     dword  ptr  [rsp+0x14], 0x30\n401d76  mov     qword  ptr  [rsp+0x20], rax\n401d7b  call    version_etc_va\n401d80  xor     edi, edi\n401d82  call    exit\n,\ngetopt_long functionsub_401d0b
,401d0b  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401d0b  nop     dword  ptr  [rax+rax]\n,\nNOP DWORD PTR [RAX+RAX]sub_401d87
,401d87  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n401d87  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_401d9f
,401d9f  nop     \n,Name the following assembly function:\n401d9f  nop     \n,\nNOP (No Operation)parse_gnu_standard_options_only
,401da0  push    r14\n401da2  push    r13\n401da4  mov     r14, r8\n401da7  push    r12\n401da9  push    rbp\n401daa  mov     r12, rdx\n401dad  push    rbx\n401dae  mov     r13, rcx\n401db1  sub     rsp, 0xd0\n401db8  test    al, al\n401dba  mov     rbp, qword  ptr  [rsp+0x100]\n401dc2  je      0x401dfb\n401e04  mov     qword  ptr  [rsp+0x18], rax\n401e09  xor     eax, eax\n401e0b  lea     rdx,  [0x4050c1]\n401e12  lea     rax,  [0x404b43]\n401e19  test    r9b, r9b\n401e1c  lea     rcx,  [long_options]\n401e23  cmove   rdx, rax\n401e27  xor     r8d, r8d\n401e2a  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401e30  mov      [opterr@@GLIBC_2.2.5], 0x1\n401e3a  call    getopt_long\n401dc4  movaps  xmmword  ptr  [rsp+0x50], xmm0\n401dc9  movaps  xmmword  ptr  [rsp+0x60], xmm1\n401dce  movaps  xmmword  ptr  [rsp+0x70], xmm2\n401dd3  movaps  xmmword  ptr  [rsp+0x80], xmm3\n401ddb  movaps  xmmword  ptr  [rsp+0x90], xmm4\n401de3  movaps  xmmword  ptr  [rsp+0xa0], xmm5\n401deb  movaps  xmmword  ptr  [rsp+0xb0], xmm6\n401df3  movaps  xmmword  ptr  [rsp+0xc0], xmm7\n\n401e04  mov     qword  ptr  [rsp+0x18], rax\n401e09  xor     eax, eax\n401e0b  lea     rdx,  [0x4050c1]\n401e12  lea     rax,  [0x404b43]\n401e19  test    r9b, r9b\n401e1c  lea     rcx,  [long_options]\n401e23  cmove   rdx, rax\n401e27  xor     r8d, r8d\n401e2a  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401e30  mov      [opterr@@GLIBC_2.2.5], 0x1\n401e3a  call    getopt_long\n401e3f  cmp     eax, -0x1\n401e42  je      0x401ea8\n401ea8  mov     rax, qword  ptr  [rsp+0x18]\n401eb6  mov      [opterr@@GLIBC_2.2.5], ebx\n401ebc  jne     0x401ed6\n401e44  cmp     eax, 0x68\n401e47  je      0x401ed0\n401ebe  add     rsp, 0xd0\n401ec5  pop     rbx\n401ec6  pop     rbp\n401ec7  pop     r12\n401ec9  pop     r13\n401ecb  pop     r14\n401ecd  ret     \n401ed6  call    __stack_chk_fail\n401ed0  xor     edi, edi\n401ed2  call    rbp\n401e4d  cmp     eax, 0x76\n401e50  jne     0x401ea0\n401ed4  jmp     0x401ea8\n401e52  lea     rax,  [rsp+0x108]\n401e5a  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401e61  mov     r8, rsp\n401e64  mov     rcx, r14\n401e67  mov     rdx, r13\n401e6a  mov     rsi, r12\n401e6d  mov     qword  ptr  [rsp+0x8], rax\n401e72  lea     rax,  [rsp+0x20]\n401e77  mov     dword  ptr  [rsp], 0x30\n401e7e  mov     dword  ptr  [rsp+0x4], 0x30\n401e86  mov     qword  ptr  [rsp+0x10], rax\n401e8b  call    version_etc_va\n401ea0  mov     edi,  [exit_failure]\n401ea6  call    rbp\n401e90  xor     edi, edi\n401e92  call    exit\n,Name the following assembly function:\n401da0  push    r14\n401da2  push    r13\n401da4  mov     r14, r8\n401da7  push    r12\n401da9  push    rbp\n401daa  mov     r12, rdx\n401dad  push    rbx\n401dae  mov     r13, rcx\n401db1  sub     rsp, 0xd0\n401db8  test    al, al\n401dba  mov     rbp, qword  ptr  [rsp+0x100]\n401dc2  je      0x401dfb\n401e04  mov     qword  ptr  [rsp+0x18], rax\n401e09  xor     eax, eax\n401e0b  lea     rdx,  [0x4050c1]\n401e12  lea     rax,  [0x404b43]\n401e19  test    r9b, r9b\n401e1c  lea     rcx,  [long_options]\n401e23  cmove   rdx, rax\n401e27  xor     r8d, r8d\n401e2a  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401e30  mov      [opterr@@GLIBC_2.2.5], 0x1\n401e3a  call    getopt_long\n401dc4  movaps  xmmword  ptr  [rsp+0x50], xmm0\n401dc9  movaps  xmmword  ptr  [rsp+0x60], xmm1\n401dce  movaps  xmmword  ptr  [rsp+0x70], xmm2\n401dd3  movaps  xmmword  ptr  [rsp+0x80], xmm3\n401ddb  movaps  xmmword  ptr  [rsp+0x90], xmm4\n401de3  movaps  xmmword  ptr  [rsp+0xa0], xmm5\n401deb  movaps  xmmword  ptr  [rsp+0xb0], xmm6\n401df3  movaps  xmmword  ptr  [rsp+0xc0], xmm7\n\n401e04  mov     qword  ptr  [rsp+0x18], rax\n401e09  xor     eax, eax\n401e0b  lea     rdx,  [0x4050c1]\n401e12  lea     rax,  [0x404b43]\n401e19  test    r9b, r9b\n401e1c  lea     rcx,  [long_options]\n401e23  cmove   rdx, rax\n401e27  xor     r8d, r8d\n401e2a  mov     ebx,  [opterr@@GLIBC_2.2.5]\n401e30  mov      [opterr@@GLIBC_2.2.5], 0x1\n401e3a  call    getopt_long\n401e3f  cmp     eax, -0x1\n401e42  je      0x401ea8\n401ea8  mov     rax, qword  ptr  [rsp+0x18]\n401eb6  mov      [opterr@@GLIBC_2.2.5], ebx\n401ebc  jne     0x401ed6\n401e44  cmp     eax, 0x68\n401e47  je      0x401ed0\n401ebe  add     rsp, 0xd0\n401ec5  pop     rbx\n401ec6  pop     rbp\n401ec7  pop     r12\n401ec9  pop     r13\n401ecb  pop     r14\n401ecd  ret     \n401ed6  call    __stack_chk_fail\n401ed0  xor     edi, edi\n401ed2  call    rbp\n401e4d  cmp     eax, 0x76\n401e50  jne     0x401ea0\n401ed4  jmp     0x401ea8\n401e52  lea     rax,  [rsp+0x108]\n401e5a  mov     rdi,  [stdout@@GLIBC_2.2.5]\n401e61  mov     r8, rsp\n401e64  mov     rcx, r14\n401e67  mov     rdx, r13\n401e6a  mov     rsi, r12\n401e6d  mov     qword  ptr  [rsp+0x8], rax\n401e72  lea     rax,  [rsp+0x20]\n401e77  mov     dword  ptr  [rsp], 0x30\n401e7e  mov     dword  ptr  [rsp+0x4], 0x30\n401e86  mov     qword  ptr  [rsp+0x10], rax\n401e8b  call    version_etc_va\n401ea0  mov     edi,  [exit_failure]\n401ea6  call    rbp\n401e90  xor     edi, edi\n401e92  call    exit\n,\ngetopt_long()sub_401e97
,401e97  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n401e97  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) functionsub_401ece
,401ece  nop     \n,Name the following assembly function:\n401ece  nop     \n,\nNOP (No Operation)sub_401edb
,401edb  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n401edb  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)set_program_name
,401ee0  test    rdi, rdi\n401ee3  push    rbx\n401ee4  je      0x401f5d\n401f5d  mov     rcx,  [stderr@@GLIBC_2.2.5]\n401f64  lea     rdi,  [0x404b58]\n401f6b  mov     edx, 0x37\n401f70  mov     esi, 0x1\n401f75  call    fwrite\n401ee6  mov     esi, 0x2f\n401eeb  mov     rbx, rdi\n401eee  call    strrchr\n401f7a  call    abort\n401ef3  test    rax, rax\n401ef6  je      0x401f4d\n401f4d  mov      [program_name], rbx\n401f54  mov      [__progname_full@@GLIBC_2.2.5], rbx\n401f5b  pop     rbx\n401f5c  ret     \n401ef8  lea     r8,  [rax+0x1]\n401efc  mov     rdx, r8\n401eff  sub     rdx, rbx\n401f02  cmp     rdx, 0x6\n401f06  jle     0x401f4d\n  401f08  lea     rsi,  [rax-0x6]\n  401f0c  lea     rdi,  [0x404b90]\n  401f13  mov     ecx, 0x7\n  \n@ 401f18  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f1a  seta    dl\n401f1d  sbb     dl, 0x0\n401f20  test    dl, dl\n401f22  jne     0x401f4d\n@ 401f18  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n  401f24  lea     rdi,  [0x404b98]\n  401f2b  mov     ecx, 0x3\n  401f30  mov     rsi, r8\n  401f33  mov     rbx, r8\n  \n@ 401f36  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f38  seta    dl\n401f3b  sbb     dl, 0x0\n401f3e  test    dl, dl\n401f40  jne     0x401f4d\n@ 401f36  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f42  lea     rbx,  [rax+0x4]\n401f46  mov      [program_invocation_short_name@@GLIBC_2.2.5], rbx\n\n401f4d  mov      [program_name], rbx\n401f54  mov      [__progname_full@@GLIBC_2.2.5], rbx\n401f5b  pop     rbx\n401f5c  ret     \n,Name the following assembly function:\n401ee0  test    rdi, rdi\n401ee3  push    rbx\n401ee4  je      0x401f5d\n401f5d  mov     rcx,  [stderr@@GLIBC_2.2.5]\n401f64  lea     rdi,  [0x404b58]\n401f6b  mov     edx, 0x37\n401f70  mov     esi, 0x1\n401f75  call    fwrite\n401ee6  mov     esi, 0x2f\n401eeb  mov     rbx, rdi\n401eee  call    strrchr\n401f7a  call    abort\n401ef3  test    rax, rax\n401ef6  je      0x401f4d\n401f4d  mov      [program_name], rbx\n401f54  mov      [__progname_full@@GLIBC_2.2.5], rbx\n401f5b  pop     rbx\n401f5c  ret     \n401ef8  lea     r8,  [rax+0x1]\n401efc  mov     rdx, r8\n401eff  sub     rdx, rbx\n401f02  cmp     rdx, 0x6\n401f06  jle     0x401f4d\n  401f08  lea     rsi,  [rax-0x6]\n  401f0c  lea     rdi,  [0x404b90]\n  401f13  mov     ecx, 0x7\n  \n@ 401f18  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f1a  seta    dl\n401f1d  sbb     dl, 0x0\n401f20  test    dl, dl\n401f22  jne     0x401f4d\n@ 401f18  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n  401f24  lea     rdi,  [0x404b98]\n  401f2b  mov     ecx, 0x3\n  401f30  mov     rsi, r8\n  401f33  mov     rbx, r8\n  \n@ 401f36  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f38  seta    dl\n401f3b  sbb     dl, 0x0\n401f3e  test    dl, dl\n401f40  jne     0x401f4d\n@ 401f36  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n401f42  lea     rbx,  [rax+0x4]\n401f46  mov      [program_invocation_short_name@@GLIBC_2.2.5], rbx\n\n401f4d  mov      [program_name], rbx\n401f54  mov      [__progname_full@@GLIBC_2.2.5], rbx\n401f5b  pop     rbx\n401f5c  ret     \n,\nset_program_name()sub_401f7f
,401f7f  nop     \n,Name the following assembly function:\n401f7f  nop     \n,\nNOP (No Operation)gettext_quote.part.1
,401f80  push    rbp\n401f81  push    rbx\n401f82  mov     rbp, rdi\n401f85  mov     ebx, esi\n401f87  sub     rsp, 0x8\n401f8b  call    locale_charset\n401f90  movzx   edx, byte  ptr  [rax]\n401f93  and     edx, 0xffffffdf\n401f96  cmp     dl, 0x55\n401f99  je      0x402010\n402010  movzx   edx, byte  ptr  [rax+0x1]\n402014  and     edx, 0xffffffdf\n402017  cmp     dl, 0x54\n40201a  jne     0x401fa0\n401f9b  cmp     dl, 0x47\n401f9e  je      0x401fc0\n40201c  movzx   edx, byte  ptr  [rax+0x2]\n402020  and     edx, 0xffffffdf\n402023  cmp     dl, 0x46\n402026  jne     0x401fa0\n401fa0  lea     rax,  [0x404bab]\n401fa7  lea     rdx,  [0x404bad]\n401fae  cmp     ebx, 0x9\n401fb1  cmovne  rax, rdx\n401fb5  add     rsp, 0x8\n401fb9  pop     rbx\n401fba  pop     rbp\n401fbb  ret     \n401fc0  movzx   edx, byte  ptr  [rax+0x1]\n401fc4  and     edx, 0xffffffdf\n401fc7  cmp     dl, 0x42\n401fca  jne     0x401fa0\n40202c  cmp     byte  ptr  [rax+0x3], 0x2d\n402030  jne     0x401fa0\n401fcc  cmp     byte  ptr  [rax+0x2], 0x31\n401fd0  jne     0x401fa0\n402036  cmp     byte  ptr  [rax+0x4], 0x38\n40203a  jne     0x401fa0\n401fd2  cmp     byte  ptr  [rax+0x3], 0x38\n401fd6  jne     0x401fa0\n402040  cmp     byte  ptr  [rax+0x5], 0x0\n402044  jne     0x401fa0\n401fd8  cmp     byte  ptr  [rax+0x4], 0x30\n401fdc  jne     0x401fa0\n40204a  cmp     byte  ptr  [rbp], 0x60\n40204e  lea     rax,  [0x404b9c]\n402055  lea     rdx,  [0x404ba0]\n40205c  cmovne  rax, rdx\n402060  add     rsp, 0x8\n402064  pop     rbx\n402065  pop     rbp\n402066  ret     \n401fde  cmp     byte  ptr  [rax+0x5], 0x33\n401fe2  jne     0x401fa0\n401fe4  cmp     byte  ptr  [rax+0x6], 0x30\n401fe8  jne     0x401fa0\n401fea  cmp     byte  ptr  [rax+0x7], 0x0\n401fee  jne     0x401fa0\n401ff0  cmp     byte  ptr  [rbp], 0x60\n401ff4  lea     rax,  [0x404ba4]\n401ffb  lea     rdx,  [0x404ba8]\n402002  cmovne  rax, rdx\n402006  add     rsp, 0x8\n40200a  pop     rbx\n40200b  pop     rbp\n40200c  ret     \n,Name the following assembly function:\n401f80  push    rbp\n401f81  push    rbx\n401f82  mov     rbp, rdi\n401f85  mov     ebx, esi\n401f87  sub     rsp, 0x8\n401f8b  call    locale_charset\n401f90  movzx   edx, byte  ptr  [rax]\n401f93  and     edx, 0xffffffdf\n401f96  cmp     dl, 0x55\n401f99  je      0x402010\n402010  movzx   edx, byte  ptr  [rax+0x1]\n402014  and     edx, 0xffffffdf\n402017  cmp     dl, 0x54\n40201a  jne     0x401fa0\n401f9b  cmp     dl, 0x47\n401f9e  je      0x401fc0\n40201c  movzx   edx, byte  ptr  [rax+0x2]\n402020  and     edx, 0xffffffdf\n402023  cmp     dl, 0x46\n402026  jne     0x401fa0\n401fa0  lea     rax,  [0x404bab]\n401fa7  lea     rdx,  [0x404bad]\n401fae  cmp     ebx, 0x9\n401fb1  cmovne  rax, rdx\n401fb5  add     rsp, 0x8\n401fb9  pop     rbx\n401fba  pop     rbp\n401fbb  ret     \n401fc0  movzx   edx, byte  ptr  [rax+0x1]\n401fc4  and     edx, 0xffffffdf\n401fc7  cmp     dl, 0x42\n401fca  jne     0x401fa0\n40202c  cmp     byte  ptr  [rax+0x3], 0x2d\n402030  jne     0x401fa0\n401fcc  cmp     byte  ptr  [rax+0x2], 0x31\n401fd0  jne     0x401fa0\n402036  cmp     byte  ptr  [rax+0x4], 0x38\n40203a  jne     0x401fa0\n401fd2  cmp     byte  ptr  [rax+0x3], 0x38\n401fd6  jne     0x401fa0\n402040  cmp     byte  ptr  [rax+0x5], 0x0\n402044  jne     0x401fa0\n401fd8  cmp     byte  ptr  [rax+0x4], 0x30\n401fdc  jne     0x401fa0\n40204a  cmp     byte  ptr  [rbp], 0x60\n40204e  lea     rax,  [0x404b9c]\n402055  lea     rdx,  [0x404ba0]\n40205c  cmovne  rax, rdx\n402060  add     rsp, 0x8\n402064  pop     rbx\n402065  pop     rbp\n402066  ret     \n401fde  cmp     byte  ptr  [rax+0x5], 0x33\n401fe2  jne     0x401fa0\n401fe4  cmp     byte  ptr  [rax+0x6], 0x30\n401fe8  jne     0x401fa0\n401fea  cmp     byte  ptr  [rax+0x7], 0x0\n401fee  jne     0x401fa0\n401ff0  cmp     byte  ptr  [rbp], 0x60\n401ff4  lea     rax,  [0x404ba4]\n401ffb  lea     rdx,  [0x404ba8]\n402002  cmovne  rax, rdx\n402006  add     rsp, 0x8\n40200a  pop     rbx\n40200b  pop     rbp\n40200c  ret     \n,\nlocale_charset_functionsub_401fbc
,401fbc  nop     dword  ptr  [rax]\n,Name the following assembly function:\n401fbc  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_40200d
,40200d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40200d  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_402067
,402067  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402067  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Word Pointer at RAX + RAXquotearg_buffer_restyled
,402070  push    r15\n402072  push    r14\n402074  mov     r15d, r8d\n402077  push    r13\n402079  push    r12\n40207b  mov     r14, rdi\n40207e  push    rbp\n40207f  push    rbx\n402080  mov     ebx, r9d\n402083  mov     r13, rsi\n402086  mov     rbp, rcx\n402089  and     ebx, 0x2\n40208c  sub     rsp, 0xb8\n402093  mov     rax, qword  ptr  [rsp+0xf0]\n40209b  mov     qword  ptr  [rsp+0x10], rdx\n4020a0  mov     dword  ptr  [rsp+0x8], r8d\n4020a5  mov     dword  ptr  [rsp+0x78], r9d\n4020aa  mov     qword  ptr  [rsp+0x20], rax\n4020af  mov     rax, qword  ptr  [rsp+0xf8]\n4020b7  mov     qword  ptr  [rsp+0x68], rax\n4020bc  mov     rax, qword  ptr  [rsp+0x100]\n4020c4  mov     qword  ptr  [rsp+0x60], rax\n4020d2  mov     qword  ptr  [rsp+0xa8], rax\n4020da  xor     eax, eax\n4020dc  call    __ctype_get_mb_cur_max\n4020e1  cmp     r15d, 0xa\n4020e5  mov     qword  ptr  [rsp+0x58], rax\n4020ea  ja      0x40329f\n4020f0  lea     rcx,  [0x404c00]\n4020f7  mov     edx, r15d\n4020fa  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n4020fe  add     rax, rcx\n402101  jmp     rax\n40329f  call    abort\n402103  mov     byte  ptr  [rsp+0xe], 0x1\n402108  mov     byte  ptr  [rsp+0x7c], 0x0\n40210d  xor     r12d, r12d\n402110  mov     qword  ptr  [rsp+0x50], 0x0\n402119  mov     byte  ptr  [rsp+0xf], 0x1\n40211e  mov     byte  ptr  [rsp+0xd], 0x0\n\n402123  lea     rax,  [0x404bad]\n40212a  mov     qword  ptr  [rsp+0x18], 0x1\n402133  xor     r15d, r15d\n402136  mov     dword  ptr  [rsp+0x8], 0x2\n40213e  mov     qword  ptr  [rsp+0x48], rax\n\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402ee4  mov     byte  ptr  [rsp+0xe], 0x1\n402ee9  mov     byte  ptr  [rsp+0x7c], 0x0\n402eee  xor     r12d, r12d\n402ef1  mov     qword  ptr  [rsp+0x50], 0x0\n402efa  mov     byte  ptr  [rsp+0xf], 0x1\n402eff  mov     byte  ptr  [rsp+0xd], 0x1\n402f04  jmp     0x402123\n402d85  lea     rax,  [0x404bab]\n402d8c  mov     byte  ptr  [rsp+0xe], 0x1\n402d91  mov     byte  ptr  [rsp+0x7c], 0x0\n402d96  xor     r12d, r12d\n402d99  mov     qword  ptr  [rsp+0x50], 0x0\n402da2  mov     byte  ptr  [rsp+0xf], 0x1\n402da7  mov     byte  ptr  [rsp+0xd], 0x1\n402dac  mov     qword  ptr  [rsp+0x18], 0x1\n402db5  xor     r15d, r15d\n402db8  mov     qword  ptr  [rsp+0x48], rax\n402dbd  mov     dword  ptr  [rsp+0x8], 0x5\n402dc5  jmp     0x402143\n402e04  cmp     dword  ptr  [rsp+0x8], 0xa\n402e09  je      0x402e61\n402eaa  mov     byte  ptr  [rsp+0xe], 0x1\n402eaf  mov     byte  ptr  [rsp+0x7c], 0x0\n402eb4  xor     r12d, r12d\n402eb7  mov     qword  ptr  [rsp+0x50], 0x0\n402ec0  mov     byte  ptr  [rsp+0xf], 0x0\n402ec5  xor     r15d, r15d\n402ec8  mov     byte  ptr  [rsp+0xd], 0x0\n402ecd  mov     qword  ptr  [rsp+0x18], 0x0\n402ed6  mov     qword  ptr  [rsp+0x48], 0x0\n402edf  jmp     0x402143\n402dca  mov     byte  ptr  [rsp+0xe], 0x1\n402dcf  mov     byte  ptr  [rsp+0x7c], 0x0\n402dd4  xor     r12d, r12d\n402dd7  mov     qword  ptr  [rsp+0x50], 0x0\n402de0  mov     byte  ptr  [rsp+0xf], 0x0\n402de5  xor     r15d, r15d\n402de8  mov     byte  ptr  [rsp+0xd], 0x1\n402ded  mov     qword  ptr  [rsp+0x18], 0x0\n402df6  mov     qword  ptr  [rsp+0x48], 0x0\n402dff  jmp     0x402143\n402d30  test    ebx, ebx\n402d32  jne     0x40312d\n402cd4  test    ebx, ebx\n402cd6  jne     0x402103\n4030d8  test    ebx, ebx\n4030da  je      0x403268\n402165  mov     rax, qword  ptr  [rsp+0x10]\n40216a  cmp     byte  ptr  [rax+rbp], 0x0\n40216e  setne   r12b\n\n402172  test    r12b, r12b\n402175  je      0x4027d0\n402172  test    r12b, r12b\n402175  je      0x4027d0\n402123  lea     rax,  [0x404bad]\n40212a  mov     qword  ptr  [rsp+0x18], 0x1\n402133  xor     r15d, r15d\n402136  mov     dword  ptr  [rsp+0x8], 0x2\n40213e  mov     qword  ptr  [rsp+0x48], rax\n\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402e61  xor     r15d, r15d\n402e64  test    ebx, ebx\n402e66  je      0x40302d\n402e0b  lea     rsi,  [0x404baf]\n402e12  xor     edi, edi\n402e14  mov     edx, 0x5\n402e19  call    dcgettext\n402d38  test    r13, r13\n402d3b  je      0x402f66\n40312d  lea     rax,  [0x404bab]\n403134  mov     byte  ptr  [rsp+0xe], 0x1\n403139  mov     byte  ptr  [rsp+0x7c], 0x0\n40313e  xor     r12d, r12d\n403141  mov     qword  ptr  [rsp+0x50], 0x0\n40314a  mov     byte  ptr  [rsp+0xf], 0x1\n40314f  mov     byte  ptr  [rsp+0xd], 0x1\n403154  mov     qword  ptr  [rsp+0x18], 0x1\n40315d  xor     r15d, r15d\n403160  mov     qword  ptr  [rsp+0x48], rax\n403165  jmp     0x402143\n402cdc  mov     byte  ptr  [rsp+0xd], 0x1\n\n402ce1  test    r13, r13\n402ce4  jne     0x40327a\n403268  mov     byte  ptr  [rsp+0xd], 0x0\n40326d  jmp     0x402ce1\n4030e0  lea     rax,  [0x404bad]\n4030e7  mov     byte  ptr  [rsp+0xe], 0x1\n4030ec  mov     byte  ptr  [rsp+0x7c], 0x0\n4030f1  xor     r12d, r12d\n4030f4  mov     qword  ptr  [rsp+0x50], 0x0\n4030fd  mov     byte  ptr  [rsp+0xf], 0x1\n403102  mov     byte  ptr  [rsp+0xd], 0x0\n403107  mov     qword  ptr  [rsp+0x18], 0x1\n403110  xor     r15d, r15d\n403113  mov     qword  ptr  [rsp+0x48], rax\n403118  jmp     0x402143\n4027d0  cmp     dword  ptr  [rsp+0x8], 0x2\n4027d5  movzx   ebx, byte  ptr  [rsp+0xf]\n4027da  mov     r12d, r8d\n4027dd  mov     rbp, r11\n4027e0  sete    dl\n4027e3  mov     eax, ebx\n4027e5  test    r15, r15\n4027e8  sete    cl\n4027eb  and     eax, edx\n4027ed  and     al, cl\n4027ef  jne     0x403256\n40217b  cmp     dword  ptr  [rsp+0x8], 0x2\n402180  mov     rdi, qword  ptr  [rsp+0x10]\n402185  lea     r9,  [rdi+rbp]\n402189  setne   al\n40218c  and     al, byte  ptr  [rsp+0xd]\n402190  mov     r10d, eax\n402193  je      0x402240\n40302d  mov     rdx, qword  ptr  [rsp+0x68]\n403032  movzx   eax, byte  ptr  [rdx]\n403035  test    al, al\n403037  je      0x402e6c\n402e6c  test    ebx, ebx\n402e6e  mov     rbx, qword  ptr  [rsp+0x60]\n402e73  setne   byte  ptr  [rsp+0xf]\n402e78  xor     r12d, r12d\n402e7b  mov     rdi, rbx\n402e7e  call    strlen\n402e1e  mov     rcx, rax\n402e21  mov     qword  ptr  [rsp+0x68], rax\n402e26  lea     rax,  [0x404baf]\n402e2d  cmp     rcx, rax\n402e30  je      0x4031ce\n402f66  mov     qword  ptr  [rsp+0x50], 0x0\n402f6f  mov     byte  ptr  [rsp+0xe], 0x1\n402f74  xor     r12d, r12d\n402f77  mov     byte  ptr  [rsp+0x7c], 0x0\n402f7c  jmp     0x402d5b\n402d41  mov     byte  ptr  [r14], 0x22\n402d45  mov     byte  ptr  [rsp+0xe], 0x1\n402d4a  xor     r12d, r12d\n402d4d  mov     byte  ptr  [rsp+0x7c], 0x0\n402d52  mov     qword  ptr  [rsp+0x50], 0x0\n\n402d5b  lea     rax,  [0x404bab]\n402d62  mov     byte  ptr  [rsp+0xf], 0x0\n402d67  mov     byte  ptr  [rsp+0xd], 0x1\n402d6c  mov     qword  ptr  [rsp+0x18], 0x1\n402d75  mov     r15d, 0x1\n402d7b  mov     qword  ptr  [rsp+0x48], rax\n402d80  jmp     0x402143\n402cea  lea     rax,  [0x404bad]\n402cf1  mov     qword  ptr  [rsp+0x50], 0x0\n402cfa  mov     byte  ptr  [rsp+0xe], 0x1\n402cff  mov     byte  ptr  [rsp+0x7c], 0x0\n402d04  xor     r12d, r12d\n402d07  mov     byte  ptr  [rsp+0xf], 0x0\n402d0c  mov     qword  ptr  [rsp+0x18], 0x1\n402d15  mov     qword  ptr  [rsp+0x48], rax\n402d1a  mov     r15d, 0x1\n402d20  mov     dword  ptr  [rsp+0x8], 0x2\n402d28  jmp     0x402143\n40327a  mov     byte  ptr  [rsp+0xe], 0x1\n40327f  xor     eax, eax\n403281  xor     r12d, r12d\n403284  mov     qword  ptr  [rsp+0x50], 0x0\n40328d  jmp     0x402834\n402ce1  test    r13, r13\n402ce4  jne     0x40327a\n4027f5  mov     eax, ebx\n4027f7  xor     eax, 0x1\n4027fa  and     dl, al\n4027fc  je      0x40316c\n403256  mov     dword  ptr  [rsp+0x8], 0x2\n40325e  jmp     0x402bf9\n402240  movzx   ebx, byte  ptr  [r9]\n402244  cmp     bl, 0x7e\n402247  ja      0x402568\n402199  mov     rax, qword  ptr  [rsp+0x18]\n40219e  test    rax, rax\n4021a1  je      0x4025d0\n40303d  nop     dword  ptr  [rax]\n402e83  mov     qword  ptr  [rsp+0x48], rbx\n402e88  mov     qword  ptr  [rsp+0x18], rax\n402e8d  mov     byte  ptr  [rsp+0xe], 0x1\n402e92  mov     byte  ptr  [rsp+0x7c], 0x0\n402e97  mov     qword  ptr  [rsp+0x50], 0x0\n402ea0  mov     byte  ptr  [rsp+0xd], 0x1\n402ea5  jmp     0x402143\n4031ce  mov     esi, dword  ptr  [rsp+0x8]\n4031d2  mov     rdi, rcx\n4031d5  call    gettext_quote.part.1\n402e36  lea     rsi,  [0x404bad]\n402e3d  xor     edi, edi\n402e3f  mov     edx, 0x5\n402e44  call    dcgettext\n402d5b  lea     rax,  [0x404bab]\n402d62  mov     byte  ptr  [rsp+0xf], 0x0\n402d67  mov     byte  ptr  [rsp+0xd], 0x1\n402d6c  mov     qword  ptr  [rsp+0x18], 0x1\n402d75  mov     r15d, 0x1\n402d7b  mov     qword  ptr  [rsp+0x48], rax\n402d80  jmp     0x402143\n402834  lea     rbx,  [0x404bad]\n40283b  mov     byte  ptr  [r14], 0x27\n40283f  mov     dword  ptr  [rsp+0x8], 0x2\n402847  mov     r15d, 0x1\n40284d  mov     qword  ptr  [rsp+0x18], 0x1\n402856  mov     byte  ptr  [rsp+0xf], 0x0\n40285b  mov     qword  ptr  [rsp+0x48], rbx\n402860  mov     byte  ptr  [rsp+0x7c], al\n402864  jmp     0x402143\n40316c  mov     rbx, qword  ptr  [rsp+0x48]\n403171  test    rbx, rbx\n403174  je      0x4031a2\n402802  cmp     byte  ptr  [rsp+0x7c], 0x0\n402807  je      0x40316a\n402bf9  cmp     byte  ptr  [rsp+0xd], 0x0\n402bfe  je      0x402c10\n40224d  lea     rcx,  [0x404c2c]\n402254  movzx   edx, bl\n402257  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n40225b  add     rax, rcx\n40225e  jmp     rax\n402568  cmp     qword  ptr  [rsp+0x58], 0x1\n40256e  jne     0x402918\n4025d0  movzx   ebx, byte  ptr  [r9]\n4025d4  cmp     bl, 0x7e\n4025d7  ja      0x402560\n4021a7  cmp     r11, -0x1\n4021ab  lea     rbx,  [rbp+rax]\n4021b0  jne     0x4021e0\n403040  cmp     r13, r15\n403043  jbe     0x403049\n4031da  mov     qword  ptr  [rsp+0x68], rax\n4031df  jmp     0x402e36\n402e49  mov     rcx, rax\n402e4c  mov     qword  ptr  [rsp+0x60], rax\n402e51  lea     rax,  [0x404bad]\n402e58  cmp     rcx, rax\n402e5b  je      0x4031e4\n4031a2  cmp     r13, r15\n4031a5  jbe     0x402c49\n403176  test    al, al\n403178  je      0x4031a2\n40316a  mov     eax, edx\n\n40316c  mov     rbx, qword  ptr  [rsp+0x48]\n403171  test    rbx, rbx\n403174  je      0x4031a2\n40280d  cmp     byte  ptr  [rsp+0xe], 0x0\n402812  jne     0x40320d\n402c10  sub     rsp, 0x8\n402c14  mov     rcx, rbp\n402c17  mov     rsi, r13\n402c1a  push    qword  ptr  [rsp+0x68]\n402c1e  push    qword  ptr  [rsp+0x78]\n402c22  mov     rdi, r14\n402c25  push    0x0\n402c27  mov     r9d, dword  ptr  [rsp+0x98]\n402c2f  mov     r8d, dword  ptr  [rsp+0x28]\n402c34  mov     rdx, qword  ptr  [rsp+0x30]\n402c39  and     r9d, 0xfffffffd\n402c3d  call    quotearg_buffer_restyled\n402c00  test    al, al\n402c02  mov     eax, 0x4\n402c07  cmove   eax, dword  ptr  [rsp+0x8]\n402c0c  mov     dword  ptr  [rsp+0x8], eax\n\n402c10  sub     rsp, 0x8\n402c14  mov     rcx, rbp\n402c17  mov     rsi, r13\n402c1a  push    qword  ptr  [rsp+0x68]\n402c1e  push    qword  ptr  [rsp+0x78]\n402c22  mov     rdi, r14\n402c25  push    0x0\n402c27  mov     r9d, dword  ptr  [rsp+0x98]\n402c2f  mov     r8d, dword  ptr  [rsp+0x28]\n402c34  mov     rdx, qword  ptr  [rsp+0x30]\n402c39  and     r9d, 0xfffffffd\n402c3d  call    quotearg_buffer_restyled\n402480  cmp     byte  ptr  [rsp+0xd], 0x0\n402485  jne     0x402653\n4024c0  mov     edx, 0x7\n4024c5  mov     ebx, 0x61\n4024ca  jmp     0x4023a4\n402540  mov     edx, 0xb\n402545  mov     ebx, 0x76\n40254a  jmp     0x4023a4\n402520  mov     edx, 0xd\n402525  mov     ebx, 0x72\n40252a  jmp     0x402392\n402500  cmp     dword  ptr  [rsp+0x8], 0x2\n402505  sete    dl\n402508  xor     r12d, r12d\n40250b  jmp     0x4024e1\n402363  cmp     dword  ptr  [rsp+0x8], 0x2\n402368  je      0x402870\n402263  cmp     r11, 0x1\n402267  setne   al\n40226a  cmp     r11, -0x1\n40226e  jne     0x40227c\n402388  mov     edx, 0x9\n40238d  mov     ebx, 0x74\n\n402392  cmp     dword  ptr  [rsp+0x8], 0x2\n402397  sete    al\n40239a  and     al, byte  ptr  [rsp+0xf]\n40239e  jne     0x4024ee\n4023c8  mov     edx, 0x8\n4023cd  mov     ebx, 0x62\n4023d2  jmp     0x4023a4\n4024a8  cmp     dword  ptr  [rsp+0x8], 0x2\n4024ad  sete    dl\n4024b0  xor     eax, eax\n4024b2  jmp     0x402298\n402550  mov     edx, 0xa\n402555  mov     ebx, 0x6e\n40255a  jmp     0x402392\n402530  mov     edx, 0xc\n402535  mov     ebx, 0x66\n40253a  jmp     0x4023a4\n402510  cmp     dword  ptr  [rsp+0x8], 0x2\n402515  mov     ebx, 0x20\n40251a  sete    dl\n40251d  jmp     0x4024e1\n4024d0  cmp     dword  ptr  [rsp+0x8], 0x2\n4024d5  sete    dl\n\n4024d8  test    rbp, rbp\n4024db  jne     0x40228c\n402333  mov     eax, dword  ptr  [rsp+0x8]\n402337  cmp     eax, 0x2\n40233a  je      0x4028f8\n4023d8  cmp     dword  ptr  [rsp+0x8], 0x2\n4023dd  je      0x4027b0\n402574  mov     qword  ptr  [rsp+0x38], r11\n402579  mov     byte  ptr  [rsp+0x30], r8b\n40257e  mov     byte  ptr  [rsp+0x28], r10b\n402583  call    __ctype_b_loc\n402918  lea     rax,  [rsp+0xa0]\n402920  cmp     r11, -0x1\n402924  mov     qword  ptr  [rsp+0xa0], 0x0\n402930  mov     qword  ptr  [rsp+0x28], rax\n402935  jne     0x402964\n4025d9  lea     rcx,  [0x404e28]\n4025e0  movzx   edx, bl\n4025e3  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n4025e7  add     rax, rcx\n4025ea  jmp     rax\n402560  xor     r10d, r10d\n402563  nop     dword  ptr  [rax+rax]\n\n402568  cmp     qword  ptr  [rsp+0x58], 0x1\n40256e  jne     0x402918\n4021b2  cmp     rax, 0x1\n4021b6  jbe     0x4021e0\n4021e0  cmp     rbx, r11\n4021e3  mov     byte  ptr  [rsp+0x28], r10b\n4021e8  ja      0x4027a0\n403049  add     r15, 0x1\n40304d  movzx   eax, byte  ptr  [rdx+r15]\n403052  test    al, al\n403054  jne     0x403040\n403045  mov     byte  ptr  [r14+r15], al\n\n403049  add     r15, 0x1\n40304d  movzx   eax, byte  ptr  [rdx+r15]\n403052  test    al, al\n403054  jne     0x403040\n4031e4  mov     esi, dword  ptr  [rsp+0x8]\n4031e8  mov     rdi, rcx\n4031eb  call    gettext_quote.part.1\n402c49  mov     rbx, qword  ptr  [rsp+0xa8]\n402c5a  mov     rax, r15\n402c5d  jne     0x403263\n4031ab  mov     byte  ptr  [r14+r15], 0x0\n4031b0  jmp     0x402c49\n40317a  movzx   ecx, byte  ptr  [rbx]\n40317d  mov     rax, rbx\n403180  test    cl, cl\n403182  je      0x4031a2\n402818  test    r13, r13\n40281b  sete    al\n40281e  cmp     qword  ptr  [rsp+0x50], 0x0\n402824  setne   dl\n402827  and     al, dl\n402829  je      0x40324c\n40320d  sub     rsp, 0x8\n403211  mov     r8d, 0x5\n403217  mov     rcx, r11\n40321a  push    qword  ptr  [rsp+0x68]\n40321e  push    qword  ptr  [rsp+0x78]\n403222  mov     rdi, r14\n403225  push    qword  ptr  [rsp+0x38]\n403229  mov     r9d, dword  ptr  [rsp+0x98]\n403231  mov     rdx, qword  ptr  [rsp+0x30]\n403236  mov     rsi, qword  ptr  [rsp+0x70]\n40323b  call    quotearg_buffer_restyled\n402c42  add     rsp, 0x20\n402c46  mov     r15, rax\n\n402c49  mov     rbx, qword  ptr  [rsp+0xa8]\n402c5a  mov     rax, r15\n402c5d  jne     0x403263\n40248b  xor     edx, edx\n40248d  test    byte  ptr  [rsp+0x78], 0x1\n402492  je      0x4023ab\n402653  cmp     dword  ptr  [rsp+0x8], 0x2\n402658  sete    dl\n40265b  cmp     byte  ptr  [rsp+0xf], 0x0\n402660  jne     0x4031fa\n4023a4  cmp     byte  ptr  [rsp+0xd], 0x0\n4023a9  jne     0x402410\n402392  cmp     dword  ptr  [rsp+0x8], 0x2\n402397  sete    al\n40239a  and     al, byte  ptr  [rsp+0xf]\n40239e  jne     0x4024ee\n4024e1  movzx   eax, byte  ptr  [rsp+0xf]\n4024e6  and     al, dl\n4024e8  je      0x402298\n402870  cmp     byte  ptr  [rsp+0xf], 0x0\n402875  jne     0x403120\n40236e  mov     byte  ptr  [rsp+0x7c], r12b\n402373  xor     edx, edx\n402375  xor     eax, eax\n402377  mov     ebx, 0x27\n40237c  jmp     0x402298\n402270  mov     rax, qword  ptr  [rsp+0x10]\n402275  cmp     byte  ptr  [rax+0x1], 0x0\n402279  setne   al\n\n40227c  cmp     dword  ptr  [rsp+0x8], 0x2\n402281  sete    dl\n402284  test    al, al\n402286  je      0x4024d8\n40227c  cmp     dword  ptr  [rsp+0x8], 0x2\n402281  sete    dl\n402284  test    al, al\n402286  je      0x4024d8\n4024ee  mov     rbp, r11\n4024f1  mov     dword  ptr  [rsp+0x8], 0x2\n4024f9  jmp     0x402bf9\n402298  cmp     byte  ptr  [rsp+0xd], 0x1\n40229d  jne     0x4023b2\n40228c  xor     r12d, r12d\n40228f  xor     eax, eax\n402291  nop     dword  ptr  [rax]\n\n402298  cmp     byte  ptr  [rsp+0xd], 0x1\n40229d  jne     0x4023b2\n4028f8  cmp     byte  ptr  [rsp+0xf], 0x0\n4028fd  jne     0x403120\n402340  cmp     eax, 0x5\n402343  je      0x4028b8\n4027b0  cmp     byte  ptr  [rsp+0xf], 0x0\n4027b5  jne     0x403120\n4023e3  cmp     byte  ptr  [rsp+0xd], 0x0\n4023e8  je      0x402600\n402588  mov     rcx, qword  ptr  [rax]\n40258b  movzx   edx, bl\n40258e  movzx   r10d, byte  ptr  [rsp+0x28]\n402594  movzx   r8d, byte  ptr  [rsp+0x30]\n40259a  mov     r11, qword  ptr  [rsp+0x38]\n40259f  mov     edi, 0x1\n4025a4  movzx   eax, word  ptr  [rcx+rdx*0x2]\n4025a8  and     ax, 0x4000\n4025ac  setne   r12b\n4025b0  sete    al\n4025b3  and     al, byte  ptr  [rsp+0xd]\n\n4025b7  test    al, al\n4025b9  jne     0x402f51\n402937  mov     rdi, qword  ptr  [rsp+0x10]\n40293c  mov     byte  ptr  [rsp+0x40], r8b\n402941  mov     byte  ptr  [rsp+0x38], r10b\n402946  mov     qword  ptr  [rsp+0x30], r9\n40294b  call    strlen\n402964  lea     rax,  [rsp+0x9c]\n40296c  xor     ecx, ecx\n40296e  mov     byte  ptr  [rsp+0x7e], bl\n402972  mov     byte  ptr  [rsp+0x7d], r8b\n402977  mov     rbx, rcx\n40297a  mov     qword  ptr  [rsp+0x88], r9\n402982  mov     qword  ptr  [rsp+0x38], rax\n402987  mov     byte  ptr  [rsp+0x7f], r10b\n40298c  mov     qword  ptr  [rsp+0x80], r15\n402994  mov     qword  ptr  [rsp+0x40], r14\n402999  mov     qword  ptr  [rsp+0x70], r13\n40299e  mov     qword  ptr  [rsp+0x30], r11\n\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n402640  mov     ebx, 0x61\n402645  jmp     0x402410\n402720  cmp     dword  ptr  [rsp+0x8], 0x2\n402725  sete    dl\n402728  xor     r10d, r10d\n40272b  xor     r12d, r12d\n40272e  jmp     0x4024e1\n402360  xor     r10d, r10d\n\n402363  cmp     dword  ptr  [rsp+0x8], 0x2\n402368  je      0x402870\n402260  xor     r10d, r10d\n\n402263  cmp     r11, 0x1\n402267  setne   al\n40226a  cmp     r11, -0x1\n40226e  jne     0x40227c\n402628  mov     edx, 0xa\n40262d  xor     r10d, r10d\n402630  mov     ebx, 0x6e\n402635  jmp     0x402392\n402768  mov     ebx, 0x76\n40276d  jmp     0x402410\n402708  cmp     dword  ptr  [rsp+0x8], 0x2\n40270d  sete    dl\n402710  xor     r10d, r10d\n402713  jmp     0x4024d8\n402650  xor     r10d, r10d\n\n402653  cmp     dword  ptr  [rsp+0x8], 0x2\n402658  sete    dl\n40265b  cmp     byte  ptr  [rsp+0xf], 0x0\n402660  jne     0x4031fa\n402790  mov     ebx, 0x62\n402795  jmp     0x402410\n402610  mov     edx, 0xc\n402615  xor     r10d, r10d\n402618  mov     ebx, 0x66\n40261d  jmp     0x4023a4\n402750  mov     edx, 0xd\n402755  xor     r10d, r10d\n402758  mov     ebx, 0x72\n40275d  jmp     0x402392\n402738  cmp     dword  ptr  [rsp+0x8], 0x2\n40273d  mov     r12d, r10d\n402740  mov     ebx, 0x20\n402745  sete    dl\n402748  xor     r10d, r10d\n40274b  jmp     0x4024e1\n4026f0  cmp     dword  ptr  [rsp+0x8], 0x2\n4026f5  mov     r12d, r10d\n4026f8  sete    dl\n4026fb  xor     r10d, r10d\n4026fe  xor     eax, eax\n402700  jmp     0x402298\n402330  xor     r10d, r10d\n\n402333  mov     eax, dword  ptr  [rsp+0x8]\n402337  cmp     eax, 0x2\n40233a  je      0x4028f8\n4025f0  xor     r10d, r10d\n4025f3  cmp     byte  ptr  [rsp+0xd], 0x0\n4025f8  jne     0x4023ee\n402778  mov     edx, 0x9\n40277d  xor     r10d, r10d\n402780  mov     ebx, 0x74\n402785  jmp     0x402392\n4021b8  mov     byte  ptr  [rsp+0x38], r8b\n4021bd  mov     byte  ptr  [rsp+0x30], r10b\n4021c2  mov     qword  ptr  [rsp+0x28], r9\n4021c7  call    strlen\n4021ee  mov     rdx, qword  ptr  [rsp+0x18]\n4021f3  mov     rsi, qword  ptr  [rsp+0x48]\n4021f8  mov     rdi, r9\n4021fb  mov     qword  ptr  [rsp+0x40], r11\n402200  mov     byte  ptr  [rsp+0x38], r8b\n402205  mov     qword  ptr  [rsp+0x30], r9\n40220a  call    memcmp\n4027a0  xor     r10d, r10d\n4027a3  jmp     0x402240\n403056  jmp     0x402e6c\n4031f0  mov     qword  ptr  [rsp+0x60], rax\n4031f5  jmp     0x402e61\n402c63  add     rsp, 0xb8\n402c6a  pop     rbx\n402c6b  pop     rbp\n402c6c  pop     r12\n402c6e  pop     r13\n402c70  pop     r14\n402c72  pop     r15\n402c74  ret     \n403263  call    __stack_chk_fail\n403184  mov     rdx, r15\n403187  sub     rax, r15\n\n40318a  cmp     r13, rdx\n40318d  jbe     0x403193\n40324c  movzx   eax, byte  ptr  [rsp+0x7c]\n403251  jmp     0x40316c\n40282f  mov     r13, qword  ptr  [rsp+0x50]\n\n402834  lea     rbx,  [0x404bad]\n40283b  mov     byte  ptr  [r14], 0x27\n40283f  mov     dword  ptr  [rsp+0x8], 0x2\n402847  mov     r15d, 0x1\n40284d  mov     qword  ptr  [rsp+0x18], 0x1\n402856  mov     byte  ptr  [rsp+0xf], 0x0\n40285b  mov     qword  ptr  [rsp+0x48], rbx\n402860  mov     byte  ptr  [rsp+0x7c], al\n402864  jmp     0x402143\n403240  add     rsp, 0x20\n403244  mov     r15, rax\n403247  jmp     0x402c49\n4023ab  mov     ebx, edx\n4023ad  xor     r12d, r12d\n4023b0  xor     eax, eax\n\n4023b2  cmp     byte  ptr  [rsp+0xf], 0x0\n4023b7  jne     0x4022ab\n402498  add     rbp, 0x1\n40249c  jmp     0x402158\n402666  mov     eax, r8d\n402669  mov     rcx, r15\n40266c  xor     eax, 0x1\n40266f  and     al, dl\n402671  je      0x4026a0\n4031fa  movzx   ebx, byte  ptr  [rsp+0xf]\n4031ff  mov     rbp, r11\n403202  mov     eax, edx\n403204  mov     byte  ptr  [rsp+0xd], bl\n403208  jmp     0x402bf9\n402410  xor     r12d, r12d\n\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n40287b  test    r13, r13\n40287e  je      0x402c80\n403120  mov     rbp, r11\n403123  movzx   eax, byte  ptr  [rsp+0xf]\n403128  jmp     0x402bf9\n4024d8  test    rbp, rbp\n4024db  jne     0x40228c\n4022a3  test    dl, dl\n4022a5  jne     0x4023b2\n4023b2  cmp     byte  ptr  [rsp+0xf], 0x0\n4023b7  jne     0x4022ab\n402903  xor     r12d, r12d\n402906  xor     eax, eax\n402908  mov     ebx, 0x3f\n40290d  jmp     0x4022c9\n4028b8  test    byte  ptr  [rsp+0x78], 0x4\n4028bd  je      0x4028e0\n402349  cmp     eax, 0x2\n40234c  mov     ebx, 0x3f\n402351  sete    dl\n402354  xor     r12d, r12d\n402357  xor     eax, eax\n402359  jmp     0x402298\n4027bb  add     rbp, 0x1\n4027bf  mov     eax, r8d\n4027c2  xor     r12d, r12d\n4027c5  mov     ebx, 0x5c\n4027ca  jmp     0x4022dc\n402600  mov     edx, 0x5c\n402605  mov     ebx, 0x5c\n40260a  jmp     0x4023a4\n4023ee  cmp     byte  ptr  [rsp+0xf], 0x0\n4023f3  je      0x402600\n4025bf  cmp     dword  ptr  [rsp+0x8], 0x2\n4025c4  sete    dl\n4025c7  jmp     0x402298\n402f51  movzx   edx, byte  ptr  [rsp+0xd]\n402f56  xor     r12d, r12d\n402f59  jmp     0x402a60\n402950  movzx   r8d, byte  ptr  [rsp+0x40]\n402956  movzx   r10d, byte  ptr  [rsp+0x38]\n40295c  mov     r11, rax\n40295f  mov     r9, qword  ptr  [rsp+0x30]\n\n402964  lea     rax,  [rsp+0x9c]\n40296c  xor     ecx, ecx\n40296e  mov     byte  ptr  [rsp+0x7e], bl\n402972  mov     byte  ptr  [rsp+0x7d], r8b\n402977  mov     rbx, rcx\n40297a  mov     qword  ptr  [rsp+0x88], r9\n402982  mov     qword  ptr  [rsp+0x38], rax\n402987  mov     byte  ptr  [rsp+0x7f], r10b\n40298c  mov     qword  ptr  [rsp+0x80], r15\n402994  mov     qword  ptr  [rsp+0x40], r14\n402999  mov     qword  ptr  [rsp+0x70], r13\n40299e  mov     qword  ptr  [rsp+0x30], r11\n\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n4029cb  test    rax, rax\n4029ce  mov     r15, rax\n4029d1  je      0x402a21\n4025fe  nop     \n4021cc  movzx   r8d, byte  ptr  [rsp+0x38]\n4021d2  movzx   r10d, byte  ptr  [rsp+0x30]\n4021d8  mov     r11, rax\n4021db  mov     r9, qword  ptr  [rsp+0x28]\n\n4021e0  cmp     rbx, r11\n4021e3  mov     byte  ptr  [rsp+0x28], r10b\n4021e8  ja      0x4027a0\n40220f  test    eax, eax\n402211  mov     r9, qword  ptr  [rsp+0x30]\n402216  movzx   r8d, byte  ptr  [rsp+0x38]\n40221c  mov     r11, qword  ptr  [rsp+0x40]\n402221  jne     0x4027a0\n403193  add     rdx, 0x1\n403197  movzx   ecx, byte  ptr  [rax+rdx]\n40319b  test    cl, cl\n40319d  jne     0x40318a\n40318f  mov     byte  ptr  [r14+rdx], cl\n\n403193  add     rdx, 0x1\n403197  movzx   ecx, byte  ptr  [rax+rdx]\n40319b  test    cl, cl\n40319d  jne     0x40318a\n4023bd  jmp     0x4022c9\n4022ab  mov     rsi, qword  ptr  [rsp+0x20]\n4022b0  test    rsi, rsi\n4022b3  je      0x4022c9\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n4026a0  cmp     r13, rcx\n4026a3  jbe     0x4026aa\n402673  cmp     r13, r15\n402676  jbe     0x40267d\n402428  mov     eax, r8d\n40242b  xor     eax, 0x1\n40242e  and     al, dl\n402430  je      0x402461\n402c78  mov     rbp, r11\n402c7b  jmp     0x402bf9\n402c80  cmp     r13, r15\n402c83  jbe     0x402c8a\n402884  xor     edx, edx\n402886  cmp     qword  ptr  [rsp+0x50], 0x0\n40288c  jne     0x402c80\n4022c9  test    r10b, r10b\n4022cc  jne     0x402413\n4028e0  xor     edx, edx\n4028e2  xor     r12d, r12d\n4028e5  xor     eax, eax\n4028e7  mov     ebx, 0x3f\n4028ec  jmp     0x402298\n4028bf  lea     rcx,  [rbp+0x2]\n4028c3  cmp     rcx, r11\n4028c6  jae     0x4028e0\n4022dc  test    al, al\n4022de  je      0x402300\n4023f9  cmp     qword  ptr  [rsp+0x18], 0x0\n4023ff  jne     0x4027bb\n402a60  mov     rcx, rdi\n402a63  xor     esi, esi\n402a65  movzx   r9d, byte  ptr  [rsp+0xf]\n402a6b  add     rcx, rbp\n402a6e  mov     rdi, qword  ptr  [rsp+0x10]\n402a73  jmp     0x402b2e\n402a21  mov     edx, r12d\n402a24  mov     rdi, rbx\n402a27  movzx   r8d, byte  ptr  [rsp+0x7d]\n402a2d  xor     edx, 0x1\n402a30  movzx   ebx, byte  ptr  [rsp+0x7e]\n402a35  movzx   r10d, byte  ptr  [rsp+0x7f]\n402a3b  and     dl, byte  ptr  [rsp+0xd]\n402a3f  mov     r15, qword  ptr  [rsp+0x80]\n402a47  mov     r14, qword  ptr  [rsp+0x40]\n402a4c  mov     r13, qword  ptr  [rsp+0x70]\n402a51  mov     r11, qword  ptr  [rsp+0x30]\n\n402a56  cmp     rdi, 0x1\n402a5a  jbe     0x40305b\n4029d3  cmp     rax, -0x1\n4029d7  je      0x402ff5\n402227  cmp     byte  ptr  [rsp+0xf], 0x0\n40222c  movzx   r10d, byte  ptr  [rsp+0x28]\n402232  jne     0x4031b5\n40319f  mov     r15, rdx\n\n4031a2  cmp     r13, r15\n4031a5  jbe     0x402c49\n40318a  cmp     r13, rdx\n40318d  jbe     0x403193\n4022b5  mov     edx, ebx\n4022b7  shr     dl, 0x5\n4022ba  movzx   edx, dl\n4022bd  mov     edx, dword  ptr  [rsi+rdx*0x4]\n4022c0  bt      edx, ebx\n4022c3  jb      0x402413\n4026aa  cmp     dword  ptr  [rsp+0x8], 0x2\n4026af  lea     r15,  [rcx+0x1]\n4026b3  je      0x402cb9\n4026a5  mov     byte  ptr  [r14+rcx], 0x5c\n\n4026aa  cmp     dword  ptr  [rsp+0x8], 0x2\n4026af  lea     r15,  [rcx+0x1]\n4026b3  je      0x402cb9\n40267d  lea     rcx,  [r15+0x1]\n402681  cmp     r13, rcx\n402684  jbe     0x40268c\n402678  mov     byte  ptr  [r14+r15], 0x27\n\n40267d  lea     rcx,  [r15+0x1]\n402681  cmp     r13, rcx\n402684  jbe     0x40268c\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n402432  cmp     r13, r15\n402435  jbe     0x40243c\n402c8a  lea     rax,  [r15+0x1]\n402c8e  cmp     r13, rax\n402c91  jbe     0x402c99\n402c85  mov     byte  ptr  [r14+r15], 0x27\n\n402c8a  lea     rax,  [r15+0x1]\n402c8e  cmp     r13, rax\n402c91  jbe     0x402c99\n402892  mov     qword  ptr  [rsp+0x50], r13\n402897  add     r15, 0x3\n40289b  xor     eax, eax\n40289d  mov     byte  ptr  [rsp+0x7c], r12b\n4028a2  xor     r8d, r8d\n4028a5  mov     r13, rdx\n4028a8  mov     ebx, 0x27\n4028ad  jmp     0x4022c9\n4022d2  xor     eax, 0x1\n4022d5  add     rbp, 0x1\n4022d9  and     eax, r8d\n\n4022dc  test    al, al\n4022de  je      0x402300\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n4028c8  mov     rax, qword  ptr  [rsp+0x10]\n4028cd  cmp     byte  ptr  [rax+rbp+0x1], 0x3f\n4028d2  je      0x403062\n402300  cmp     r15, r13\n402303  jae     0x402309\n4022e0  cmp     r13, r15\n4022e3  jbe     0x4022ea\n402405  mov     ebx, 0x5c\n40240a  nop     word  ptr  [rax+rax]\n\n402410  xor     r12d, r12d\n\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n40305b  mov     eax, edx\n40305d  jmp     0x4025b7\n402ff5  mov     rdi, rbx\n402ff8  movzx   r8d, byte  ptr  [rsp+0x7d]\n402ffe  movzx   ebx, byte  ptr  [rsp+0x7e]\n403003  movzx   r10d, byte  ptr  [rsp+0x7f]\n403009  mov     r15, qword  ptr  [rsp+0x80]\n403011  xor     r12d, r12d\n403014  mov     r14, qword  ptr  [rsp+0x40]\n403019  mov     r13, qword  ptr  [rsp+0x70]\n40301e  mov     r11, qword  ptr  [rsp+0x30]\n403023  movzx   edx, byte  ptr  [rsp+0xd]\n403028  jmp     0x402a56\n4029dd  cmp     rax, -0x2\n4029e1  je      0x402f81\n4031b5  cmp     dword  ptr  [rsp+0x8], 0x2\n4031ba  movzx   ebx, byte  ptr  [rsp+0xf]\n4031bf  mov     rbp, r11\n4031c2  sete    al\n4031c5  mov     byte  ptr  [rsp+0xd], bl\n4031c9  jmp     0x402bf9\n402238  nop     dword  ptr  [rax+rax]\n402cb9  mov     eax, r12d\n402cbc  mov     ebx, 0x30\n402cc1  xor     r12d, r12d\n402cc4  jmp     0x4022c9\n4026b9  lea     rax,  [rbp+0x1]\n4026bd  cmp     rax, r11\n4026c0  jae     0x4026db\n40268c  lea     rcx,  [r15+0x2]\n402690  cmp     r13, rcx\n402693  ja      0x402cc9\n402686  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n40268c  lea     rcx,  [r15+0x2]\n402690  cmp     r13, rcx\n402693  ja      0x402cc9\n40246b  add     r15, 0x1\n40246f  add     rbp, 0x1\n402473  jmp     0x402300\n402466  mov     byte  ptr  [r14+r15], 0x5c\n\n40246b  add     r15, 0x1\n40246f  add     rbp, 0x1\n402473  jmp     0x402300\n40243c  lea     rdx,  [r15+0x1]\n402440  cmp     r13, rdx\n402443  jbe     0x40244b\n402437  mov     byte  ptr  [r14+r15], 0x27\n\n40243c  lea     rdx,  [r15+0x1]\n402440  cmp     r13, rdx\n402443  jbe     0x40244b\n402c99  lea     rax,  [r15+0x2]\n402c9d  cmp     r13, rax\n402ca0  jbe     0x403292\n402c93  mov     byte  ptr  [r14+r15+0x1], 0x5c\n\n402c99  lea     rax,  [r15+0x2]\n402c9d  cmp     r13, rax\n402ca0  jbe     0x403292\n403062  movzx   ebx, byte  ptr  [rax+rcx]\n403066  cmp     bl, 0x3e\n403069  ja      0x4028e0\n4028d8  nop     dword  ptr  [rax+rax]\n402305  mov     byte  ptr  [r14+r15], bl\n\n402309  movzx   edi, byte  ptr  [rsp+0xe]\n40230e  add     r15, 0x1\n402312  mov     eax, 0x0\n402317  test    r12b, r12b\n40231a  cmove   edi, eax\n40231d  mov     byte  ptr  [rsp+0xe], dil\n402322  jmp     0x402158\n402309  movzx   edi, byte  ptr  [rsp+0xe]\n40230e  add     r15, 0x1\n402312  mov     eax, 0x0\n402317  test    r12b, r12b\n40231a  cmove   edi, eax\n40231d  mov     byte  ptr  [rsp+0xe], dil\n402322  jmp     0x402158\n4022ea  lea     rax,  [r15+0x1]\n4022ee  cmp     r13, rax\n4022f1  jbe     0x4022f9\n4022e5  mov     byte  ptr  [r14+r15], 0x27\n\n4022ea  lea     rax,  [r15+0x1]\n4022ee  cmp     r13, rax\n4022f1  jbe     0x4022f9\n402b36  mov     eax, esi\n402b38  xor     eax, 0x1\n402b3b  and     eax, r8d\n402b3e  test    r10b, r10b\n402b41  je      0x402b51\n402a80  cmp     dword  ptr  [rsp+0x8], 0x2\n402a85  sete    al\n402a88  test    r9b, r9b\n402a8b  jne     0x402f40\n4025b7  test    al, al\n4025b9  jne     0x402f51\n402a56  cmp     rdi, 0x1\n402a5a  jbe     0x40305b\n402f81  mov     r11, qword  ptr  [rsp+0x30]\n402f86  mov     rsi, r14\n402f89  mov     rcx, r13\n402f8c  mov     rax, rbx\n402f8f  mov     rdi, rbx\n402f92  movzx   r8d, byte  ptr  [rsp+0x7d]\n402f98  movzx   ebx, byte  ptr  [rsp+0x7e]\n402f9d  mov     r9, qword  ptr  [rsp+0x88]\n402fa5  cmp     rsi, r11\n402fa8  movzx   r10d, byte  ptr  [rsp+0x7f]\n402fae  mov     r15, qword  ptr  [rsp+0x80]\n402fb6  mov     r14, qword  ptr  [rsp+0x40]\n402fbb  mov     r13, qword  ptr  [rsp+0x70]\n402fc0  jae     0x402fe8\n4029e7  cmp     dword  ptr  [rsp+0x8], 0x2\n4029ec  sete    al\n4029ef  and     al, byte  ptr  [rsp+0xf]\n4029f3  jne     0x402b90\n4026c2  mov     rax, qword  ptr  [rsp+0x10]\n4026c7  movzx   eax, byte  ptr  [rax+rbp+0x1]\n4026cc  mov     byte  ptr  [rsp+0x28], al\n4026d0  sub     eax, 0x30\n4026d3  cmp     al, 0x9\n4026d5  jbe     0x402f09\n4026db  mov     eax, r12d\n4026de  mov     ebx, 0x30\n4026e3  xor     r12d, r12d\n4026e6  jmp     0x402298\n402699  lea     rcx,  [r15+0x3]\n40269d  mov     r8d, eax\n\n4026a0  cmp     r13, rcx\n4026a3  jbe     0x4026aa\n402cc9  mov     byte  ptr  [r14+r15+0x2], 0x27\n402ccf  jmp     0x402699\n40244b  lea     rdx,  [r15+0x2]\n40244f  cmp     r13, rdx\n402452  jbe     0x40245a\n402445  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n40244b  lea     rdx,  [r15+0x2]\n40244f  cmp     r13, rdx\n402452  jbe     0x40245a\n403292  mov     rdx, r13\n403295  mov     r13, qword  ptr  [rsp+0x50]\n40329a  jmp     0x402892\n402ca6  mov     rdx, r13\n402ca9  mov     byte  ptr  [r14+r15+0x2], 0x27\n402caf  mov     r13, qword  ptr  [rsp+0x50]\n402cb4  jmp     0x402892\n40306f  movabs  rax, 0x7000a38200000000\n403079  bt      rax, rbx\n40307d  jae     0x4028e0\n4022f9  add     r15, 0x2\n4022fd  xor     r8d, r8d\n\n402300  cmp     r15, r13\n402303  jae     0x402309\n4022f3  mov     byte  ptr  [r14+r15+0x1], 0x27\n\n4022f9  add     r15, 0x2\n4022fd  xor     r8d, r8d\n\n402300  cmp     r15, r13\n402303  jae     0x402309\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402b43  cmp     r13, r15\n402b46  jbe     0x402b4d\n402a91  mov     esi, r8d\n402a94  xor     esi, 0x1\n402a97  and     al, sil\n402a9a  je      0x402acb\n402f40  movzx   ebx, byte  ptr  [rsp+0xf]\n402f45  mov     rbp, r11\n402f48  mov     byte  ptr  [rsp+0xd], bl\n402f4c  jmp     0x402bf9\n402fc2  cmp     byte  ptr  [rcx], 0x0\n402fc5  jne     0x402fd7\n402fe8  movzx   edx, byte  ptr  [rsp+0xd]\n402fed  xor     r12d, r12d\n402ff0  jmp     0x402a56\n4029f9  mov     edi, dword  ptr  [rsp+0x9c]\n402a00  call    iswprint\n402b90  cmp     r15, 0x1\n402b94  je      0x4029f9\n402f09  cmp     r13, r15\n402f0c  jbe     0x402f13\n40245a  add     r15, 0x3\n40245e  mov     r8d, eax\n\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n402454  mov     byte  ptr  [r14+r15+0x2], 0x27\n\n40245a  add     r15, 0x3\n40245e  mov     r8d, eax\n\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n403083  cmp     byte  ptr  [rsp+0xf], 0x0\n403088  jne     0x403272\n402b5e  test    al, al\n402b60  je      0x402f5e\n402b4d  add     r15, 0x1\n\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402b48  mov     byte  ptr  [r14+r15], 0x5c\n\n402b4d  add     r15, 0x1\n\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402a9c  cmp     r13, r15\n402a9f  jbe     0x402aa6\n402fc7  jmp     0x402fe8\n402fd7  add     rax, 0x1\n402fdb  lea     rdx,  [rbp+rax]\n402fe0  cmp     r11, rdx\n402fe3  ja      0x402fd0\n402a05  mov     rdi, qword  ptr  [rsp+0x28]\n402a0a  test    eax, eax\n402a0c  mov     eax, 0x0\n402a11  cmove   r12d, eax\n402a15  add     rbx, r15\n402a18  call    mbsinit\n402b9a  mov     rdi, qword  ptr  [rsp+0x10]\n402b9f  lea     rcx,  [rdi+r15]\n402ba3  lea     rdx,  [rdi+r14+0x1]\n402ba8  lea     r8,  [rcx+r14]\n402bac  jmp     0x402bbd\n402f13  lea     rax,  [rcx+0x2]\n402f17  cmp     r13, rax\n402f1a  jbe     0x402f22\n402f0e  mov     byte  ptr  [r14+r15], 0x30\n\n402f13  lea     rax,  [rcx+0x2]\n402f17  cmp     r13, rax\n402f1a  jbe     0x402f22\n40308e  cmp     r13, r15\n403091  jbe     0x403098\n403272  mov     rbp, r11\n403275  jmp     0x402c10\n402f5e  xor     r10d, r10d\n402f61  jmp     0x402b1d\n402b66  cmp     r13, r15\n402b69  jbe     0x402b70\n402ad5  lea     rax,  [r15+0x1]\n402ad9  cmp     r13, rax\n402adc  jbe     0x402aeb\n402ad0  mov     byte  ptr  [r14+r15], 0x5c\n\n402ad5  lea     rax,  [r15+0x1]\n402ad9  cmp     r13, rax\n402adc  jbe     0x402aeb\n402aa6  lea     rsi,  [r15+0x1]\n402aaa  cmp     r13, rsi\n402aad  jbe     0x402ab5\n402aa1  mov     byte  ptr  [r14+r15], 0x27\n\n402aa6  lea     rsi,  [r15+0x1]\n402aaa  cmp     r13, rsi\n402aad  jbe     0x402ab5\n402fe5  mov     rdi, rax\n\n402fe8  movzx   edx, byte  ptr  [rsp+0xd]\n402fed  xor     r12d, r12d\n402ff0  jmp     0x402a56\n402fd0  cmp     byte  ptr  [r9+rax], 0x0\n402fd5  je      0x402fe5\n402a1d  test    eax, eax\n402a1f  je      0x4029a3\n402bbd  movzx   ecx, byte  ptr  [rdx]\n402bc0  sub     ecx, 0x5b\n402bc3  cmp     cl, 0x21\n402bc6  ja      0x402bb0\n402f22  mov     eax, r12d\n402f25  lea     r15,  [rcx+0x3]\n402f29  xor     r12d, r12d\n402f2c  mov     ebx, 0x30\n402f31  jmp     0x402298\n402f1c  mov     byte  ptr  [r14+rcx+0x2], 0x30\n\n402f22  mov     eax, r12d\n402f25  lea     r15,  [rcx+0x3]\n402f29  xor     r12d, r12d\n402f2c  mov     ebx, 0x30\n402f31  jmp     0x402298\n403098  lea     rax,  [r15+0x1]\n40309c  cmp     r13, rax\n40309f  jbe     0x4030a7\n403093  mov     byte  ptr  [r14+r15], 0x3f\n\n403098  lea     rax,  [r15+0x1]\n40309c  cmp     r13, rax\n40309f  jbe     0x4030a7\n402b1d  cmp     r13, r15\n402b20  jbe     0x402b26\n402b70  lea     rax,  [r15+0x1]\n402b74  cmp     r13, rax\n402b77  jbe     0x402b7f\n402b6b  mov     byte  ptr  [r14+r15], 0x27\n\n402b70  lea     rax,  [r15+0x1]\n402b74  cmp     r13, rax\n402b77  jbe     0x402b7f\n402aeb  lea     rax,  [r15+0x2]\n402aef  cmp     r13, rax\n402af2  jbe     0x402b04\n402ade  mov     eax, ebx\n402ae0  shr     al, 0x6\n402ae3  add     eax, 0x30\n402ae6  mov     byte  ptr  [r14+r15+0x1], al\n\n402aeb  lea     rax,  [r15+0x2]\n402aef  cmp     r13, rax\n402af2  jbe     0x402b04\n402ab5  lea     rsi,  [r15+0x2]\n402ab9  cmp     r13, rsi\n402abc  jbe     0x402ac4\n402aaf  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n402ab5  lea     rsi,  [r15+0x2]\n402ab9  cmp     r13, rsi\n402abc  jbe     0x402ac4\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n402bc8  mov     esi, 0x1\n402bcd  shl     rsi, cl\n402bd0  mov     rcx, rsi\n402bd3  movabs  rsi, 0x20000002b\n402bdd  test    rcx, rsi\n402be0  je      0x402bb0\n402bb0  add     rdx, 0x1\n402bb4  cmp     r8, rdx\n402bb7  je      0x4029f9\n4030a7  lea     rax,  [r15+0x2]\n4030ab  cmp     r13, rax\n4030ae  jbe     0x4030b6\n4030a1  mov     byte  ptr  [r14+r15+0x1], 0x22\n\n4030a7  lea     rax,  [r15+0x2]\n4030ab  cmp     r13, rax\n4030ae  jbe     0x4030b6\n402b26  movzx   ebx, byte  ptr  [rdi+rbp]\n402b2a  add     r15, 0x1\n\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n402b22  mov     byte  ptr  [r14+r15], bl\n\n402b26  movzx   ebx, byte  ptr  [rdi+rbp]\n402b2a  add     r15, 0x1\n\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n402b7f  add     r15, 0x2\n402b83  xor     r10d, r10d\n402b86  xor     r8d, r8d\n402b89  jmp     0x402b1d\n402b79  mov     byte  ptr  [r14+r15+0x1], 0x27\n\n402b7f  add     r15, 0x2\n402b83  xor     r10d, r10d\n402b86  xor     r8d, r8d\n402b89  jmp     0x402b1d\n402b04  and     ebx, 0x7\n402b07  add     rbp, 0x1\n402b0b  add     r15, 0x3\n402b0f  add     ebx, 0x30\n402b12  cmp     rbp, rcx\n402b15  jae     0x402300\n402af4  mov     eax, ebx\n402af6  shr     al, 0x3\n402af9  and     eax, 0x7\n402afc  add     eax, 0x30\n402aff  mov     byte  ptr  [r14+r15+0x2], al\n\n402b04  and     ebx, 0x7\n402b07  add     rbp, 0x1\n402b0b  add     r15, 0x3\n402b0f  add     ebx, 0x30\n402b12  cmp     rbp, rcx\n402b15  jae     0x402300\n402ac4  add     r15, 0x3\n402ac8  mov     r8d, eax\n\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402abe  mov     byte  ptr  [r14+r15+0x2], 0x27\n\n402ac4  add     r15, 0x3\n402ac8  mov     r8d, eax\n\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402be2  mov     r14, qword  ptr  [rsp+0x40]\n402be7  mov     r13, qword  ptr  [rsp+0x70]\n402bec  mov     rbp, qword  ptr  [rsp+0x30]\n402bf1  mov     dword  ptr  [rsp+0x8], 0x2\n\n402bf9  cmp     byte  ptr  [rsp+0xd], 0x0\n402bfe  je      0x402c10\n4030b6  lea     rax,  [r15+0x3]\n4030ba  cmp     r13, rax\n4030bd  jbe     0x4030c5\n4030b0  mov     byte  ptr  [r14+r15+0x2], 0x22\n\n4030b6  lea     rax,  [r15+0x3]\n4030ba  cmp     r13, rax\n4030bd  jbe     0x4030c5\n402b1b  mov     esi, edx\n\n402b1d  cmp     r13, r15\n402b20  jbe     0x402b26\n4030c5  add     r15, 0x4\n4030c9  xor     edx, edx\n4030cb  xor     r12d, r12d\n4030ce  xor     eax, eax\n4030d0  mov     rbp, rcx\n4030d3  jmp     0x402298\n4030bf  mov     byte  ptr  [r14+r15+0x3], 0x3f\n\n4030c5  add     r15, 0x4\n4030c9  xor     edx, edx\n4030cb  xor     r12d, r12d\n4030ce  xor     eax, eax\n4030d0  mov     rbp, rcx\n4030d3  jmp     0x402298\n,Name the following assembly function:\n402070  push    r15\n402072  push    r14\n402074  mov     r15d, r8d\n402077  push    r13\n402079  push    r12\n40207b  mov     r14, rdi\n40207e  push    rbp\n40207f  push    rbx\n402080  mov     ebx, r9d\n402083  mov     r13, rsi\n402086  mov     rbp, rcx\n402089  and     ebx, 0x2\n40208c  sub     rsp, 0xb8\n402093  mov     rax, qword  ptr  [rsp+0xf0]\n40209b  mov     qword  ptr  [rsp+0x10], rdx\n4020a0  mov     dword  ptr  [rsp+0x8], r8d\n4020a5  mov     dword  ptr  [rsp+0x78], r9d\n4020aa  mov     qword  ptr  [rsp+0x20], rax\n4020af  mov     rax, qword  ptr  [rsp+0xf8]\n4020b7  mov     qword  ptr  [rsp+0x68], rax\n4020bc  mov     rax, qword  ptr  [rsp+0x100]\n4020c4  mov     qword  ptr  [rsp+0x60], rax\n4020d2  mov     qword  ptr  [rsp+0xa8], rax\n4020da  xor     eax, eax\n4020dc  call    __ctype_get_mb_cur_max\n4020e1  cmp     r15d, 0xa\n4020e5  mov     qword  ptr  [rsp+0x58], rax\n4020ea  ja      0x40329f\n4020f0  lea     rcx,  [0x404c00]\n4020f7  mov     edx, r15d\n4020fa  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n4020fe  add     rax, rcx\n402101  jmp     rax\n40329f  call    abort\n402103  mov     byte  ptr  [rsp+0xe], 0x1\n402108  mov     byte  ptr  [rsp+0x7c], 0x0\n40210d  xor     r12d, r12d\n402110  mov     qword  ptr  [rsp+0x50], 0x0\n402119  mov     byte  ptr  [rsp+0xf], 0x1\n40211e  mov     byte  ptr  [rsp+0xd], 0x0\n\n402123  lea     rax,  [0x404bad]\n40212a  mov     qword  ptr  [rsp+0x18], 0x1\n402133  xor     r15d, r15d\n402136  mov     dword  ptr  [rsp+0x8], 0x2\n40213e  mov     qword  ptr  [rsp+0x48], rax\n\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402ee4  mov     byte  ptr  [rsp+0xe], 0x1\n402ee9  mov     byte  ptr  [rsp+0x7c], 0x0\n402eee  xor     r12d, r12d\n402ef1  mov     qword  ptr  [rsp+0x50], 0x0\n402efa  mov     byte  ptr  [rsp+0xf], 0x1\n402eff  mov     byte  ptr  [rsp+0xd], 0x1\n402f04  jmp     0x402123\n402d85  lea     rax,  [0x404bab]\n402d8c  mov     byte  ptr  [rsp+0xe], 0x1\n402d91  mov     byte  ptr  [rsp+0x7c], 0x0\n402d96  xor     r12d, r12d\n402d99  mov     qword  ptr  [rsp+0x50], 0x0\n402da2  mov     byte  ptr  [rsp+0xf], 0x1\n402da7  mov     byte  ptr  [rsp+0xd], 0x1\n402dac  mov     qword  ptr  [rsp+0x18], 0x1\n402db5  xor     r15d, r15d\n402db8  mov     qword  ptr  [rsp+0x48], rax\n402dbd  mov     dword  ptr  [rsp+0x8], 0x5\n402dc5  jmp     0x402143\n402e04  cmp     dword  ptr  [rsp+0x8], 0xa\n402e09  je      0x402e61\n402eaa  mov     byte  ptr  [rsp+0xe], 0x1\n402eaf  mov     byte  ptr  [rsp+0x7c], 0x0\n402eb4  xor     r12d, r12d\n402eb7  mov     qword  ptr  [rsp+0x50], 0x0\n402ec0  mov     byte  ptr  [rsp+0xf], 0x0\n402ec5  xor     r15d, r15d\n402ec8  mov     byte  ptr  [rsp+0xd], 0x0\n402ecd  mov     qword  ptr  [rsp+0x18], 0x0\n402ed6  mov     qword  ptr  [rsp+0x48], 0x0\n402edf  jmp     0x402143\n402dca  mov     byte  ptr  [rsp+0xe], 0x1\n402dcf  mov     byte  ptr  [rsp+0x7c], 0x0\n402dd4  xor     r12d, r12d\n402dd7  mov     qword  ptr  [rsp+0x50], 0x0\n402de0  mov     byte  ptr  [rsp+0xf], 0x0\n402de5  xor     r15d, r15d\n402de8  mov     byte  ptr  [rsp+0xd], 0x1\n402ded  mov     qword  ptr  [rsp+0x18], 0x0\n402df6  mov     qword  ptr  [rsp+0x48], 0x0\n402dff  jmp     0x402143\n402d30  test    ebx, ebx\n402d32  jne     0x40312d\n402cd4  test    ebx, ebx\n402cd6  jne     0x402103\n4030d8  test    ebx, ebx\n4030da  je      0x403268\n402165  mov     rax, qword  ptr  [rsp+0x10]\n40216a  cmp     byte  ptr  [rax+rbp], 0x0\n40216e  setne   r12b\n\n402172  test    r12b, r12b\n402175  je      0x4027d0\n402172  test    r12b, r12b\n402175  je      0x4027d0\n402123  lea     rax,  [0x404bad]\n40212a  mov     qword  ptr  [rsp+0x18], 0x1\n402133  xor     r15d, r15d\n402136  mov     dword  ptr  [rsp+0x8], 0x2\n40213e  mov     qword  ptr  [rsp+0x48], rax\n\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402143  xor     r11d, r11d\n402146  mov     rax, rbp\n402149  mov     r8d, r12d\n40214c  mov     rbp, r11\n40214f  mov     r11, rax\n402152  nop     word  ptr  [rax+rax]\n\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n402e61  xor     r15d, r15d\n402e64  test    ebx, ebx\n402e66  je      0x40302d\n402e0b  lea     rsi,  [0x404baf]\n402e12  xor     edi, edi\n402e14  mov     edx, 0x5\n402e19  call    dcgettext\n402d38  test    r13, r13\n402d3b  je      0x402f66\n40312d  lea     rax,  [0x404bab]\n403134  mov     byte  ptr  [rsp+0xe], 0x1\n403139  mov     byte  ptr  [rsp+0x7c], 0x0\n40313e  xor     r12d, r12d\n403141  mov     qword  ptr  [rsp+0x50], 0x0\n40314a  mov     byte  ptr  [rsp+0xf], 0x1\n40314f  mov     byte  ptr  [rsp+0xd], 0x1\n403154  mov     qword  ptr  [rsp+0x18], 0x1\n40315d  xor     r15d, r15d\n403160  mov     qword  ptr  [rsp+0x48], rax\n403165  jmp     0x402143\n402cdc  mov     byte  ptr  [rsp+0xd], 0x1\n\n402ce1  test    r13, r13\n402ce4  jne     0x40327a\n403268  mov     byte  ptr  [rsp+0xd], 0x0\n40326d  jmp     0x402ce1\n4030e0  lea     rax,  [0x404bad]\n4030e7  mov     byte  ptr  [rsp+0xe], 0x1\n4030ec  mov     byte  ptr  [rsp+0x7c], 0x0\n4030f1  xor     r12d, r12d\n4030f4  mov     qword  ptr  [rsp+0x50], 0x0\n4030fd  mov     byte  ptr  [rsp+0xf], 0x1\n403102  mov     byte  ptr  [rsp+0xd], 0x0\n403107  mov     qword  ptr  [rsp+0x18], 0x1\n403110  xor     r15d, r15d\n403113  mov     qword  ptr  [rsp+0x48], rax\n403118  jmp     0x402143\n4027d0  cmp     dword  ptr  [rsp+0x8], 0x2\n4027d5  movzx   ebx, byte  ptr  [rsp+0xf]\n4027da  mov     r12d, r8d\n4027dd  mov     rbp, r11\n4027e0  sete    dl\n4027e3  mov     eax, ebx\n4027e5  test    r15, r15\n4027e8  sete    cl\n4027eb  and     eax, edx\n4027ed  and     al, cl\n4027ef  jne     0x403256\n40217b  cmp     dword  ptr  [rsp+0x8], 0x2\n402180  mov     rdi, qword  ptr  [rsp+0x10]\n402185  lea     r9,  [rdi+rbp]\n402189  setne   al\n40218c  and     al, byte  ptr  [rsp+0xd]\n402190  mov     r10d, eax\n402193  je      0x402240\n40302d  mov     rdx, qword  ptr  [rsp+0x68]\n403032  movzx   eax, byte  ptr  [rdx]\n403035  test    al, al\n403037  je      0x402e6c\n402e6c  test    ebx, ebx\n402e6e  mov     rbx, qword  ptr  [rsp+0x60]\n402e73  setne   byte  ptr  [rsp+0xf]\n402e78  xor     r12d, r12d\n402e7b  mov     rdi, rbx\n402e7e  call    strlen\n402e1e  mov     rcx, rax\n402e21  mov     qword  ptr  [rsp+0x68], rax\n402e26  lea     rax,  [0x404baf]\n402e2d  cmp     rcx, rax\n402e30  je      0x4031ce\n402f66  mov     qword  ptr  [rsp+0x50], 0x0\n402f6f  mov     byte  ptr  [rsp+0xe], 0x1\n402f74  xor     r12d, r12d\n402f77  mov     byte  ptr  [rsp+0x7c], 0x0\n402f7c  jmp     0x402d5b\n402d41  mov     byte  ptr  [r14], 0x22\n402d45  mov     byte  ptr  [rsp+0xe], 0x1\n402d4a  xor     r12d, r12d\n402d4d  mov     byte  ptr  [rsp+0x7c], 0x0\n402d52  mov     qword  ptr  [rsp+0x50], 0x0\n\n402d5b  lea     rax,  [0x404bab]\n402d62  mov     byte  ptr  [rsp+0xf], 0x0\n402d67  mov     byte  ptr  [rsp+0xd], 0x1\n402d6c  mov     qword  ptr  [rsp+0x18], 0x1\n402d75  mov     r15d, 0x1\n402d7b  mov     qword  ptr  [rsp+0x48], rax\n402d80  jmp     0x402143\n402cea  lea     rax,  [0x404bad]\n402cf1  mov     qword  ptr  [rsp+0x50], 0x0\n402cfa  mov     byte  ptr  [rsp+0xe], 0x1\n402cff  mov     byte  ptr  [rsp+0x7c], 0x0\n402d04  xor     r12d, r12d\n402d07  mov     byte  ptr  [rsp+0xf], 0x0\n402d0c  mov     qword  ptr  [rsp+0x18], 0x1\n402d15  mov     qword  ptr  [rsp+0x48], rax\n402d1a  mov     r15d, 0x1\n402d20  mov     dword  ptr  [rsp+0x8], 0x2\n402d28  jmp     0x402143\n40327a  mov     byte  ptr  [rsp+0xe], 0x1\n40327f  xor     eax, eax\n403281  xor     r12d, r12d\n403284  mov     qword  ptr  [rsp+0x50], 0x0\n40328d  jmp     0x402834\n402ce1  test    r13, r13\n402ce4  jne     0x40327a\n4027f5  mov     eax, ebx\n4027f7  xor     eax, 0x1\n4027fa  and     dl, al\n4027fc  je      0x40316c\n403256  mov     dword  ptr  [rsp+0x8], 0x2\n40325e  jmp     0x402bf9\n402240  movzx   ebx, byte  ptr  [r9]\n402244  cmp     bl, 0x7e\n402247  ja      0x402568\n402199  mov     rax, qword  ptr  [rsp+0x18]\n40219e  test    rax, rax\n4021a1  je      0x4025d0\n40303d  nop     dword  ptr  [rax]\n402e83  mov     qword  ptr  [rsp+0x48], rbx\n402e88  mov     qword  ptr  [rsp+0x18], rax\n402e8d  mov     byte  ptr  [rsp+0xe], 0x1\n402e92  mov     byte  ptr  [rsp+0x7c], 0x0\n402e97  mov     qword  ptr  [rsp+0x50], 0x0\n402ea0  mov     byte  ptr  [rsp+0xd], 0x1\n402ea5  jmp     0x402143\n4031ce  mov     esi, dword  ptr  [rsp+0x8]\n4031d2  mov     rdi, rcx\n4031d5  call    gettext_quote.part.1\n402e36  lea     rsi,  [0x404bad]\n402e3d  xor     edi, edi\n402e3f  mov     edx, 0x5\n402e44  call    dcgettext\n402d5b  lea     rax,  [0x404bab]\n402d62  mov     byte  ptr  [rsp+0xf], 0x0\n402d67  mov     byte  ptr  [rsp+0xd], 0x1\n402d6c  mov     qword  ptr  [rsp+0x18], 0x1\n402d75  mov     r15d, 0x1\n402d7b  mov     qword  ptr  [rsp+0x48], rax\n402d80  jmp     0x402143\n402834  lea     rbx,  [0x404bad]\n40283b  mov     byte  ptr  [r14], 0x27\n40283f  mov     dword  ptr  [rsp+0x8], 0x2\n402847  mov     r15d, 0x1\n40284d  mov     qword  ptr  [rsp+0x18], 0x1\n402856  mov     byte  ptr  [rsp+0xf], 0x0\n40285b  mov     qword  ptr  [rsp+0x48], rbx\n402860  mov     byte  ptr  [rsp+0x7c], al\n402864  jmp     0x402143\n40316c  mov     rbx, qword  ptr  [rsp+0x48]\n403171  test    rbx, rbx\n403174  je      0x4031a2\n402802  cmp     byte  ptr  [rsp+0x7c], 0x0\n402807  je      0x40316a\n402bf9  cmp     byte  ptr  [rsp+0xd], 0x0\n402bfe  je      0x402c10\n40224d  lea     rcx,  [0x404c2c]\n402254  movzx   edx, bl\n402257  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n40225b  add     rax, rcx\n40225e  jmp     rax\n402568  cmp     qword  ptr  [rsp+0x58], 0x1\n40256e  jne     0x402918\n4025d0  movzx   ebx, byte  ptr  [r9]\n4025d4  cmp     bl, 0x7e\n4025d7  ja      0x402560\n4021a7  cmp     r11, -0x1\n4021ab  lea     rbx,  [rbp+rax]\n4021b0  jne     0x4021e0\n403040  cmp     r13, r15\n403043  jbe     0x403049\n4031da  mov     qword  ptr  [rsp+0x68], rax\n4031df  jmp     0x402e36\n402e49  mov     rcx, rax\n402e4c  mov     qword  ptr  [rsp+0x60], rax\n402e51  lea     rax,  [0x404bad]\n402e58  cmp     rcx, rax\n402e5b  je      0x4031e4\n4031a2  cmp     r13, r15\n4031a5  jbe     0x402c49\n403176  test    al, al\n403178  je      0x4031a2\n40316a  mov     eax, edx\n\n40316c  mov     rbx, qword  ptr  [rsp+0x48]\n403171  test    rbx, rbx\n403174  je      0x4031a2\n40280d  cmp     byte  ptr  [rsp+0xe], 0x0\n402812  jne     0x40320d\n402c10  sub     rsp, 0x8\n402c14  mov     rcx, rbp\n402c17  mov     rsi, r13\n402c1a  push    qword  ptr  [rsp+0x68]\n402c1e  push    qword  ptr  [rsp+0x78]\n402c22  mov     rdi, r14\n402c25  push    0x0\n402c27  mov     r9d, dword  ptr  [rsp+0x98]\n402c2f  mov     r8d, dword  ptr  [rsp+0x28]\n402c34  mov     rdx, qword  ptr  [rsp+0x30]\n402c39  and     r9d, 0xfffffffd\n402c3d  call    quotearg_buffer_restyled\n402c00  test    al, al\n402c02  mov     eax, 0x4\n402c07  cmove   eax, dword  ptr  [rsp+0x8]\n402c0c  mov     dword  ptr  [rsp+0x8], eax\n\n402c10  sub     rsp, 0x8\n402c14  mov     rcx, rbp\n402c17  mov     rsi, r13\n402c1a  push    qword  ptr  [rsp+0x68]\n402c1e  push    qword  ptr  [rsp+0x78]\n402c22  mov     rdi, r14\n402c25  push    0x0\n402c27  mov     r9d, dword  ptr  [rsp+0x98]\n402c2f  mov     r8d, dword  ptr  [rsp+0x28]\n402c34  mov     rdx, qword  ptr  [rsp+0x30]\n402c39  and     r9d, 0xfffffffd\n402c3d  call    quotearg_buffer_restyled\n402480  cmp     byte  ptr  [rsp+0xd], 0x0\n402485  jne     0x402653\n4024c0  mov     edx, 0x7\n4024c5  mov     ebx, 0x61\n4024ca  jmp     0x4023a4\n402540  mov     edx, 0xb\n402545  mov     ebx, 0x76\n40254a  jmp     0x4023a4\n402520  mov     edx, 0xd\n402525  mov     ebx, 0x72\n40252a  jmp     0x402392\n402500  cmp     dword  ptr  [rsp+0x8], 0x2\n402505  sete    dl\n402508  xor     r12d, r12d\n40250b  jmp     0x4024e1\n402363  cmp     dword  ptr  [rsp+0x8], 0x2\n402368  je      0x402870\n402263  cmp     r11, 0x1\n402267  setne   al\n40226a  cmp     r11, -0x1\n40226e  jne     0x40227c\n402388  mov     edx, 0x9\n40238d  mov     ebx, 0x74\n\n402392  cmp     dword  ptr  [rsp+0x8], 0x2\n402397  sete    al\n40239a  and     al, byte  ptr  [rsp+0xf]\n40239e  jne     0x4024ee\n4023c8  mov     edx, 0x8\n4023cd  mov     ebx, 0x62\n4023d2  jmp     0x4023a4\n4024a8  cmp     dword  ptr  [rsp+0x8], 0x2\n4024ad  sete    dl\n4024b0  xor     eax, eax\n4024b2  jmp     0x402298\n402550  mov     edx, 0xa\n402555  mov     ebx, 0x6e\n40255a  jmp     0x402392\n402530  mov     edx, 0xc\n402535  mov     ebx, 0x66\n40253a  jmp     0x4023a4\n402510  cmp     dword  ptr  [rsp+0x8], 0x2\n402515  mov     ebx, 0x20\n40251a  sete    dl\n40251d  jmp     0x4024e1\n4024d0  cmp     dword  ptr  [rsp+0x8], 0x2\n4024d5  sete    dl\n\n4024d8  test    rbp, rbp\n4024db  jne     0x40228c\n402333  mov     eax, dword  ptr  [rsp+0x8]\n402337  cmp     eax, 0x2\n40233a  je      0x4028f8\n4023d8  cmp     dword  ptr  [rsp+0x8], 0x2\n4023dd  je      0x4027b0\n402574  mov     qword  ptr  [rsp+0x38], r11\n402579  mov     byte  ptr  [rsp+0x30], r8b\n40257e  mov     byte  ptr  [rsp+0x28], r10b\n402583  call    __ctype_b_loc\n402918  lea     rax,  [rsp+0xa0]\n402920  cmp     r11, -0x1\n402924  mov     qword  ptr  [rsp+0xa0], 0x0\n402930  mov     qword  ptr  [rsp+0x28], rax\n402935  jne     0x402964\n4025d9  lea     rcx,  [0x404e28]\n4025e0  movzx   edx, bl\n4025e3  movsxd  rax, dword  ptr  [rcx+rdx*0x4]\n4025e7  add     rax, rcx\n4025ea  jmp     rax\n402560  xor     r10d, r10d\n402563  nop     dword  ptr  [rax+rax]\n\n402568  cmp     qword  ptr  [rsp+0x58], 0x1\n40256e  jne     0x402918\n4021b2  cmp     rax, 0x1\n4021b6  jbe     0x4021e0\n4021e0  cmp     rbx, r11\n4021e3  mov     byte  ptr  [rsp+0x28], r10b\n4021e8  ja      0x4027a0\n403049  add     r15, 0x1\n40304d  movzx   eax, byte  ptr  [rdx+r15]\n403052  test    al, al\n403054  jne     0x403040\n403045  mov     byte  ptr  [r14+r15], al\n\n403049  add     r15, 0x1\n40304d  movzx   eax, byte  ptr  [rdx+r15]\n403052  test    al, al\n403054  jne     0x403040\n4031e4  mov     esi, dword  ptr  [rsp+0x8]\n4031e8  mov     rdi, rcx\n4031eb  call    gettext_quote.part.1\n402c49  mov     rbx, qword  ptr  [rsp+0xa8]\n402c5a  mov     rax, r15\n402c5d  jne     0x403263\n4031ab  mov     byte  ptr  [r14+r15], 0x0\n4031b0  jmp     0x402c49\n40317a  movzx   ecx, byte  ptr  [rbx]\n40317d  mov     rax, rbx\n403180  test    cl, cl\n403182  je      0x4031a2\n402818  test    r13, r13\n40281b  sete    al\n40281e  cmp     qword  ptr  [rsp+0x50], 0x0\n402824  setne   dl\n402827  and     al, dl\n402829  je      0x40324c\n40320d  sub     rsp, 0x8\n403211  mov     r8d, 0x5\n403217  mov     rcx, r11\n40321a  push    qword  ptr  [rsp+0x68]\n40321e  push    qword  ptr  [rsp+0x78]\n403222  mov     rdi, r14\n403225  push    qword  ptr  [rsp+0x38]\n403229  mov     r9d, dword  ptr  [rsp+0x98]\n403231  mov     rdx, qword  ptr  [rsp+0x30]\n403236  mov     rsi, qword  ptr  [rsp+0x70]\n40323b  call    quotearg_buffer_restyled\n402c42  add     rsp, 0x20\n402c46  mov     r15, rax\n\n402c49  mov     rbx, qword  ptr  [rsp+0xa8]\n402c5a  mov     rax, r15\n402c5d  jne     0x403263\n40248b  xor     edx, edx\n40248d  test    byte  ptr  [rsp+0x78], 0x1\n402492  je      0x4023ab\n402653  cmp     dword  ptr  [rsp+0x8], 0x2\n402658  sete    dl\n40265b  cmp     byte  ptr  [rsp+0xf], 0x0\n402660  jne     0x4031fa\n4023a4  cmp     byte  ptr  [rsp+0xd], 0x0\n4023a9  jne     0x402410\n402392  cmp     dword  ptr  [rsp+0x8], 0x2\n402397  sete    al\n40239a  and     al, byte  ptr  [rsp+0xf]\n40239e  jne     0x4024ee\n4024e1  movzx   eax, byte  ptr  [rsp+0xf]\n4024e6  and     al, dl\n4024e8  je      0x402298\n402870  cmp     byte  ptr  [rsp+0xf], 0x0\n402875  jne     0x403120\n40236e  mov     byte  ptr  [rsp+0x7c], r12b\n402373  xor     edx, edx\n402375  xor     eax, eax\n402377  mov     ebx, 0x27\n40237c  jmp     0x402298\n402270  mov     rax, qword  ptr  [rsp+0x10]\n402275  cmp     byte  ptr  [rax+0x1], 0x0\n402279  setne   al\n\n40227c  cmp     dword  ptr  [rsp+0x8], 0x2\n402281  sete    dl\n402284  test    al, al\n402286  je      0x4024d8\n40227c  cmp     dword  ptr  [rsp+0x8], 0x2\n402281  sete    dl\n402284  test    al, al\n402286  je      0x4024d8\n4024ee  mov     rbp, r11\n4024f1  mov     dword  ptr  [rsp+0x8], 0x2\n4024f9  jmp     0x402bf9\n402298  cmp     byte  ptr  [rsp+0xd], 0x1\n40229d  jne     0x4023b2\n40228c  xor     r12d, r12d\n40228f  xor     eax, eax\n402291  nop     dword  ptr  [rax]\n\n402298  cmp     byte  ptr  [rsp+0xd], 0x1\n40229d  jne     0x4023b2\n4028f8  cmp     byte  ptr  [rsp+0xf], 0x0\n4028fd  jne     0x403120\n402340  cmp     eax, 0x5\n402343  je      0x4028b8\n4027b0  cmp     byte  ptr  [rsp+0xf], 0x0\n4027b5  jne     0x403120\n4023e3  cmp     byte  ptr  [rsp+0xd], 0x0\n4023e8  je      0x402600\n402588  mov     rcx, qword  ptr  [rax]\n40258b  movzx   edx, bl\n40258e  movzx   r10d, byte  ptr  [rsp+0x28]\n402594  movzx   r8d, byte  ptr  [rsp+0x30]\n40259a  mov     r11, qword  ptr  [rsp+0x38]\n40259f  mov     edi, 0x1\n4025a4  movzx   eax, word  ptr  [rcx+rdx*0x2]\n4025a8  and     ax, 0x4000\n4025ac  setne   r12b\n4025b0  sete    al\n4025b3  and     al, byte  ptr  [rsp+0xd]\n\n4025b7  test    al, al\n4025b9  jne     0x402f51\n402937  mov     rdi, qword  ptr  [rsp+0x10]\n40293c  mov     byte  ptr  [rsp+0x40], r8b\n402941  mov     byte  ptr  [rsp+0x38], r10b\n402946  mov     qword  ptr  [rsp+0x30], r9\n40294b  call    strlen\n402964  lea     rax,  [rsp+0x9c]\n40296c  xor     ecx, ecx\n40296e  mov     byte  ptr  [rsp+0x7e], bl\n402972  mov     byte  ptr  [rsp+0x7d], r8b\n402977  mov     rbx, rcx\n40297a  mov     qword  ptr  [rsp+0x88], r9\n402982  mov     qword  ptr  [rsp+0x38], rax\n402987  mov     byte  ptr  [rsp+0x7f], r10b\n40298c  mov     qword  ptr  [rsp+0x80], r15\n402994  mov     qword  ptr  [rsp+0x40], r14\n402999  mov     qword  ptr  [rsp+0x70], r13\n40299e  mov     qword  ptr  [rsp+0x30], r11\n\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n402640  mov     ebx, 0x61\n402645  jmp     0x402410\n402720  cmp     dword  ptr  [rsp+0x8], 0x2\n402725  sete    dl\n402728  xor     r10d, r10d\n40272b  xor     r12d, r12d\n40272e  jmp     0x4024e1\n402360  xor     r10d, r10d\n\n402363  cmp     dword  ptr  [rsp+0x8], 0x2\n402368  je      0x402870\n402260  xor     r10d, r10d\n\n402263  cmp     r11, 0x1\n402267  setne   al\n40226a  cmp     r11, -0x1\n40226e  jne     0x40227c\n402628  mov     edx, 0xa\n40262d  xor     r10d, r10d\n402630  mov     ebx, 0x6e\n402635  jmp     0x402392\n402768  mov     ebx, 0x76\n40276d  jmp     0x402410\n402708  cmp     dword  ptr  [rsp+0x8], 0x2\n40270d  sete    dl\n402710  xor     r10d, r10d\n402713  jmp     0x4024d8\n402650  xor     r10d, r10d\n\n402653  cmp     dword  ptr  [rsp+0x8], 0x2\n402658  sete    dl\n40265b  cmp     byte  ptr  [rsp+0xf], 0x0\n402660  jne     0x4031fa\n402790  mov     ebx, 0x62\n402795  jmp     0x402410\n402610  mov     edx, 0xc\n402615  xor     r10d, r10d\n402618  mov     ebx, 0x66\n40261d  jmp     0x4023a4\n402750  mov     edx, 0xd\n402755  xor     r10d, r10d\n402758  mov     ebx, 0x72\n40275d  jmp     0x402392\n402738  cmp     dword  ptr  [rsp+0x8], 0x2\n40273d  mov     r12d, r10d\n402740  mov     ebx, 0x20\n402745  sete    dl\n402748  xor     r10d, r10d\n40274b  jmp     0x4024e1\n4026f0  cmp     dword  ptr  [rsp+0x8], 0x2\n4026f5  mov     r12d, r10d\n4026f8  sete    dl\n4026fb  xor     r10d, r10d\n4026fe  xor     eax, eax\n402700  jmp     0x402298\n402330  xor     r10d, r10d\n\n402333  mov     eax, dword  ptr  [rsp+0x8]\n402337  cmp     eax, 0x2\n40233a  je      0x4028f8\n4025f0  xor     r10d, r10d\n4025f3  cmp     byte  ptr  [rsp+0xd], 0x0\n4025f8  jne     0x4023ee\n402778  mov     edx, 0x9\n40277d  xor     r10d, r10d\n402780  mov     ebx, 0x74\n402785  jmp     0x402392\n4021b8  mov     byte  ptr  [rsp+0x38], r8b\n4021bd  mov     byte  ptr  [rsp+0x30], r10b\n4021c2  mov     qword  ptr  [rsp+0x28], r9\n4021c7  call    strlen\n4021ee  mov     rdx, qword  ptr  [rsp+0x18]\n4021f3  mov     rsi, qword  ptr  [rsp+0x48]\n4021f8  mov     rdi, r9\n4021fb  mov     qword  ptr  [rsp+0x40], r11\n402200  mov     byte  ptr  [rsp+0x38], r8b\n402205  mov     qword  ptr  [rsp+0x30], r9\n40220a  call    memcmp\n4027a0  xor     r10d, r10d\n4027a3  jmp     0x402240\n403056  jmp     0x402e6c\n4031f0  mov     qword  ptr  [rsp+0x60], rax\n4031f5  jmp     0x402e61\n402c63  add     rsp, 0xb8\n402c6a  pop     rbx\n402c6b  pop     rbp\n402c6c  pop     r12\n402c6e  pop     r13\n402c70  pop     r14\n402c72  pop     r15\n402c74  ret     \n403263  call    __stack_chk_fail\n403184  mov     rdx, r15\n403187  sub     rax, r15\n\n40318a  cmp     r13, rdx\n40318d  jbe     0x403193\n40324c  movzx   eax, byte  ptr  [rsp+0x7c]\n403251  jmp     0x40316c\n40282f  mov     r13, qword  ptr  [rsp+0x50]\n\n402834  lea     rbx,  [0x404bad]\n40283b  mov     byte  ptr  [r14], 0x27\n40283f  mov     dword  ptr  [rsp+0x8], 0x2\n402847  mov     r15d, 0x1\n40284d  mov     qword  ptr  [rsp+0x18], 0x1\n402856  mov     byte  ptr  [rsp+0xf], 0x0\n40285b  mov     qword  ptr  [rsp+0x48], rbx\n402860  mov     byte  ptr  [rsp+0x7c], al\n402864  jmp     0x402143\n403240  add     rsp, 0x20\n403244  mov     r15, rax\n403247  jmp     0x402c49\n4023ab  mov     ebx, edx\n4023ad  xor     r12d, r12d\n4023b0  xor     eax, eax\n\n4023b2  cmp     byte  ptr  [rsp+0xf], 0x0\n4023b7  jne     0x4022ab\n402498  add     rbp, 0x1\n40249c  jmp     0x402158\n402666  mov     eax, r8d\n402669  mov     rcx, r15\n40266c  xor     eax, 0x1\n40266f  and     al, dl\n402671  je      0x4026a0\n4031fa  movzx   ebx, byte  ptr  [rsp+0xf]\n4031ff  mov     rbp, r11\n403202  mov     eax, edx\n403204  mov     byte  ptr  [rsp+0xd], bl\n403208  jmp     0x402bf9\n402410  xor     r12d, r12d\n\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n40287b  test    r13, r13\n40287e  je      0x402c80\n403120  mov     rbp, r11\n403123  movzx   eax, byte  ptr  [rsp+0xf]\n403128  jmp     0x402bf9\n4024d8  test    rbp, rbp\n4024db  jne     0x40228c\n4022a3  test    dl, dl\n4022a5  jne     0x4023b2\n4023b2  cmp     byte  ptr  [rsp+0xf], 0x0\n4023b7  jne     0x4022ab\n402903  xor     r12d, r12d\n402906  xor     eax, eax\n402908  mov     ebx, 0x3f\n40290d  jmp     0x4022c9\n4028b8  test    byte  ptr  [rsp+0x78], 0x4\n4028bd  je      0x4028e0\n402349  cmp     eax, 0x2\n40234c  mov     ebx, 0x3f\n402351  sete    dl\n402354  xor     r12d, r12d\n402357  xor     eax, eax\n402359  jmp     0x402298\n4027bb  add     rbp, 0x1\n4027bf  mov     eax, r8d\n4027c2  xor     r12d, r12d\n4027c5  mov     ebx, 0x5c\n4027ca  jmp     0x4022dc\n402600  mov     edx, 0x5c\n402605  mov     ebx, 0x5c\n40260a  jmp     0x4023a4\n4023ee  cmp     byte  ptr  [rsp+0xf], 0x0\n4023f3  je      0x402600\n4025bf  cmp     dword  ptr  [rsp+0x8], 0x2\n4025c4  sete    dl\n4025c7  jmp     0x402298\n402f51  movzx   edx, byte  ptr  [rsp+0xd]\n402f56  xor     r12d, r12d\n402f59  jmp     0x402a60\n402950  movzx   r8d, byte  ptr  [rsp+0x40]\n402956  movzx   r10d, byte  ptr  [rsp+0x38]\n40295c  mov     r11, rax\n40295f  mov     r9, qword  ptr  [rsp+0x30]\n\n402964  lea     rax,  [rsp+0x9c]\n40296c  xor     ecx, ecx\n40296e  mov     byte  ptr  [rsp+0x7e], bl\n402972  mov     byte  ptr  [rsp+0x7d], r8b\n402977  mov     rbx, rcx\n40297a  mov     qword  ptr  [rsp+0x88], r9\n402982  mov     qword  ptr  [rsp+0x38], rax\n402987  mov     byte  ptr  [rsp+0x7f], r10b\n40298c  mov     qword  ptr  [rsp+0x80], r15\n402994  mov     qword  ptr  [rsp+0x40], r14\n402999  mov     qword  ptr  [rsp+0x70], r13\n40299e  mov     qword  ptr  [rsp+0x30], r11\n\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n4029cb  test    rax, rax\n4029ce  mov     r15, rax\n4029d1  je      0x402a21\n4025fe  nop     \n4021cc  movzx   r8d, byte  ptr  [rsp+0x38]\n4021d2  movzx   r10d, byte  ptr  [rsp+0x30]\n4021d8  mov     r11, rax\n4021db  mov     r9, qword  ptr  [rsp+0x28]\n\n4021e0  cmp     rbx, r11\n4021e3  mov     byte  ptr  [rsp+0x28], r10b\n4021e8  ja      0x4027a0\n40220f  test    eax, eax\n402211  mov     r9, qword  ptr  [rsp+0x30]\n402216  movzx   r8d, byte  ptr  [rsp+0x38]\n40221c  mov     r11, qword  ptr  [rsp+0x40]\n402221  jne     0x4027a0\n403193  add     rdx, 0x1\n403197  movzx   ecx, byte  ptr  [rax+rdx]\n40319b  test    cl, cl\n40319d  jne     0x40318a\n40318f  mov     byte  ptr  [r14+rdx], cl\n\n403193  add     rdx, 0x1\n403197  movzx   ecx, byte  ptr  [rax+rdx]\n40319b  test    cl, cl\n40319d  jne     0x40318a\n4023bd  jmp     0x4022c9\n4022ab  mov     rsi, qword  ptr  [rsp+0x20]\n4022b0  test    rsi, rsi\n4022b3  je      0x4022c9\n402158  cmp     r11, rbp\n40215b  setne   r12b\n40215f  cmp     r11, -0x1\n402163  jne     0x402172\n4026a0  cmp     r13, rcx\n4026a3  jbe     0x4026aa\n402673  cmp     r13, r15\n402676  jbe     0x40267d\n402428  mov     eax, r8d\n40242b  xor     eax, 0x1\n40242e  and     al, dl\n402430  je      0x402461\n402c78  mov     rbp, r11\n402c7b  jmp     0x402bf9\n402c80  cmp     r13, r15\n402c83  jbe     0x402c8a\n402884  xor     edx, edx\n402886  cmp     qword  ptr  [rsp+0x50], 0x0\n40288c  jne     0x402c80\n4022c9  test    r10b, r10b\n4022cc  jne     0x402413\n4028e0  xor     edx, edx\n4028e2  xor     r12d, r12d\n4028e5  xor     eax, eax\n4028e7  mov     ebx, 0x3f\n4028ec  jmp     0x402298\n4028bf  lea     rcx,  [rbp+0x2]\n4028c3  cmp     rcx, r11\n4028c6  jae     0x4028e0\n4022dc  test    al, al\n4022de  je      0x402300\n4023f9  cmp     qword  ptr  [rsp+0x18], 0x0\n4023ff  jne     0x4027bb\n402a60  mov     rcx, rdi\n402a63  xor     esi, esi\n402a65  movzx   r9d, byte  ptr  [rsp+0xf]\n402a6b  add     rcx, rbp\n402a6e  mov     rdi, qword  ptr  [rsp+0x10]\n402a73  jmp     0x402b2e\n402a21  mov     edx, r12d\n402a24  mov     rdi, rbx\n402a27  movzx   r8d, byte  ptr  [rsp+0x7d]\n402a2d  xor     edx, 0x1\n402a30  movzx   ebx, byte  ptr  [rsp+0x7e]\n402a35  movzx   r10d, byte  ptr  [rsp+0x7f]\n402a3b  and     dl, byte  ptr  [rsp+0xd]\n402a3f  mov     r15, qword  ptr  [rsp+0x80]\n402a47  mov     r14, qword  ptr  [rsp+0x40]\n402a4c  mov     r13, qword  ptr  [rsp+0x70]\n402a51  mov     r11, qword  ptr  [rsp+0x30]\n\n402a56  cmp     rdi, 0x1\n402a5a  jbe     0x40305b\n4029d3  cmp     rax, -0x1\n4029d7  je      0x402ff5\n402227  cmp     byte  ptr  [rsp+0xf], 0x0\n40222c  movzx   r10d, byte  ptr  [rsp+0x28]\n402232  jne     0x4031b5\n40319f  mov     r15, rdx\n\n4031a2  cmp     r13, r15\n4031a5  jbe     0x402c49\n40318a  cmp     r13, rdx\n40318d  jbe     0x403193\n4022b5  mov     edx, ebx\n4022b7  shr     dl, 0x5\n4022ba  movzx   edx, dl\n4022bd  mov     edx, dword  ptr  [rsi+rdx*0x4]\n4022c0  bt      edx, ebx\n4022c3  jb      0x402413\n4026aa  cmp     dword  ptr  [rsp+0x8], 0x2\n4026af  lea     r15,  [rcx+0x1]\n4026b3  je      0x402cb9\n4026a5  mov     byte  ptr  [r14+rcx], 0x5c\n\n4026aa  cmp     dword  ptr  [rsp+0x8], 0x2\n4026af  lea     r15,  [rcx+0x1]\n4026b3  je      0x402cb9\n40267d  lea     rcx,  [r15+0x1]\n402681  cmp     r13, rcx\n402684  jbe     0x40268c\n402678  mov     byte  ptr  [r14+r15], 0x27\n\n40267d  lea     rcx,  [r15+0x1]\n402681  cmp     r13, rcx\n402684  jbe     0x40268c\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n402432  cmp     r13, r15\n402435  jbe     0x40243c\n402c8a  lea     rax,  [r15+0x1]\n402c8e  cmp     r13, rax\n402c91  jbe     0x402c99\n402c85  mov     byte  ptr  [r14+r15], 0x27\n\n402c8a  lea     rax,  [r15+0x1]\n402c8e  cmp     r13, rax\n402c91  jbe     0x402c99\n402892  mov     qword  ptr  [rsp+0x50], r13\n402897  add     r15, 0x3\n40289b  xor     eax, eax\n40289d  mov     byte  ptr  [rsp+0x7c], r12b\n4028a2  xor     r8d, r8d\n4028a5  mov     r13, rdx\n4028a8  mov     ebx, 0x27\n4028ad  jmp     0x4022c9\n4022d2  xor     eax, 0x1\n4022d5  add     rbp, 0x1\n4022d9  and     eax, r8d\n\n4022dc  test    al, al\n4022de  je      0x402300\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n4028c8  mov     rax, qword  ptr  [rsp+0x10]\n4028cd  cmp     byte  ptr  [rax+rbp+0x1], 0x3f\n4028d2  je      0x403062\n402300  cmp     r15, r13\n402303  jae     0x402309\n4022e0  cmp     r13, r15\n4022e3  jbe     0x4022ea\n402405  mov     ebx, 0x5c\n40240a  nop     word  ptr  [rax+rax]\n\n402410  xor     r12d, r12d\n\n402413  cmp     dword  ptr  [rsp+0x8], 0x2\n402418  sete    dl\n40241b  cmp     byte  ptr  [rsp+0xf], 0x0\n402420  mov     eax, edx\n402422  jne     0x402c78\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n40305b  mov     eax, edx\n40305d  jmp     0x4025b7\n402ff5  mov     rdi, rbx\n402ff8  movzx   r8d, byte  ptr  [rsp+0x7d]\n402ffe  movzx   ebx, byte  ptr  [rsp+0x7e]\n403003  movzx   r10d, byte  ptr  [rsp+0x7f]\n403009  mov     r15, qword  ptr  [rsp+0x80]\n403011  xor     r12d, r12d\n403014  mov     r14, qword  ptr  [rsp+0x40]\n403019  mov     r13, qword  ptr  [rsp+0x70]\n40301e  mov     r11, qword  ptr  [rsp+0x30]\n403023  movzx   edx, byte  ptr  [rsp+0xd]\n403028  jmp     0x402a56\n4029dd  cmp     rax, -0x2\n4029e1  je      0x402f81\n4031b5  cmp     dword  ptr  [rsp+0x8], 0x2\n4031ba  movzx   ebx, byte  ptr  [rsp+0xf]\n4031bf  mov     rbp, r11\n4031c2  sete    al\n4031c5  mov     byte  ptr  [rsp+0xd], bl\n4031c9  jmp     0x402bf9\n402238  nop     dword  ptr  [rax+rax]\n402cb9  mov     eax, r12d\n402cbc  mov     ebx, 0x30\n402cc1  xor     r12d, r12d\n402cc4  jmp     0x4022c9\n4026b9  lea     rax,  [rbp+0x1]\n4026bd  cmp     rax, r11\n4026c0  jae     0x4026db\n40268c  lea     rcx,  [r15+0x2]\n402690  cmp     r13, rcx\n402693  ja      0x402cc9\n402686  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n40268c  lea     rcx,  [r15+0x2]\n402690  cmp     r13, rcx\n402693  ja      0x402cc9\n40246b  add     r15, 0x1\n40246f  add     rbp, 0x1\n402473  jmp     0x402300\n402466  mov     byte  ptr  [r14+r15], 0x5c\n\n40246b  add     r15, 0x1\n40246f  add     rbp, 0x1\n402473  jmp     0x402300\n40243c  lea     rdx,  [r15+0x1]\n402440  cmp     r13, rdx\n402443  jbe     0x40244b\n402437  mov     byte  ptr  [r14+r15], 0x27\n\n40243c  lea     rdx,  [r15+0x1]\n402440  cmp     r13, rdx\n402443  jbe     0x40244b\n402c99  lea     rax,  [r15+0x2]\n402c9d  cmp     r13, rax\n402ca0  jbe     0x403292\n402c93  mov     byte  ptr  [r14+r15+0x1], 0x5c\n\n402c99  lea     rax,  [r15+0x2]\n402c9d  cmp     r13, rax\n402ca0  jbe     0x403292\n403062  movzx   ebx, byte  ptr  [rax+rcx]\n403066  cmp     bl, 0x3e\n403069  ja      0x4028e0\n4028d8  nop     dword  ptr  [rax+rax]\n402305  mov     byte  ptr  [r14+r15], bl\n\n402309  movzx   edi, byte  ptr  [rsp+0xe]\n40230e  add     r15, 0x1\n402312  mov     eax, 0x0\n402317  test    r12b, r12b\n40231a  cmove   edi, eax\n40231d  mov     byte  ptr  [rsp+0xe], dil\n402322  jmp     0x402158\n402309  movzx   edi, byte  ptr  [rsp+0xe]\n40230e  add     r15, 0x1\n402312  mov     eax, 0x0\n402317  test    r12b, r12b\n40231a  cmove   edi, eax\n40231d  mov     byte  ptr  [rsp+0xe], dil\n402322  jmp     0x402158\n4022ea  lea     rax,  [r15+0x1]\n4022ee  cmp     r13, rax\n4022f1  jbe     0x4022f9\n4022e5  mov     byte  ptr  [r14+r15], 0x27\n\n4022ea  lea     rax,  [r15+0x1]\n4022ee  cmp     r13, rax\n4022f1  jbe     0x4022f9\n402b36  mov     eax, esi\n402b38  xor     eax, 0x1\n402b3b  and     eax, r8d\n402b3e  test    r10b, r10b\n402b41  je      0x402b51\n402a80  cmp     dword  ptr  [rsp+0x8], 0x2\n402a85  sete    al\n402a88  test    r9b, r9b\n402a8b  jne     0x402f40\n4025b7  test    al, al\n4025b9  jne     0x402f51\n402a56  cmp     rdi, 0x1\n402a5a  jbe     0x40305b\n402f81  mov     r11, qword  ptr  [rsp+0x30]\n402f86  mov     rsi, r14\n402f89  mov     rcx, r13\n402f8c  mov     rax, rbx\n402f8f  mov     rdi, rbx\n402f92  movzx   r8d, byte  ptr  [rsp+0x7d]\n402f98  movzx   ebx, byte  ptr  [rsp+0x7e]\n402f9d  mov     r9, qword  ptr  [rsp+0x88]\n402fa5  cmp     rsi, r11\n402fa8  movzx   r10d, byte  ptr  [rsp+0x7f]\n402fae  mov     r15, qword  ptr  [rsp+0x80]\n402fb6  mov     r14, qword  ptr  [rsp+0x40]\n402fbb  mov     r13, qword  ptr  [rsp+0x70]\n402fc0  jae     0x402fe8\n4029e7  cmp     dword  ptr  [rsp+0x8], 0x2\n4029ec  sete    al\n4029ef  and     al, byte  ptr  [rsp+0xf]\n4029f3  jne     0x402b90\n4026c2  mov     rax, qword  ptr  [rsp+0x10]\n4026c7  movzx   eax, byte  ptr  [rax+rbp+0x1]\n4026cc  mov     byte  ptr  [rsp+0x28], al\n4026d0  sub     eax, 0x30\n4026d3  cmp     al, 0x9\n4026d5  jbe     0x402f09\n4026db  mov     eax, r12d\n4026de  mov     ebx, 0x30\n4026e3  xor     r12d, r12d\n4026e6  jmp     0x402298\n402699  lea     rcx,  [r15+0x3]\n40269d  mov     r8d, eax\n\n4026a0  cmp     r13, rcx\n4026a3  jbe     0x4026aa\n402cc9  mov     byte  ptr  [r14+r15+0x2], 0x27\n402ccf  jmp     0x402699\n40244b  lea     rdx,  [r15+0x2]\n40244f  cmp     r13, rdx\n402452  jbe     0x40245a\n402445  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n40244b  lea     rdx,  [r15+0x2]\n40244f  cmp     r13, rdx\n402452  jbe     0x40245a\n403292  mov     rdx, r13\n403295  mov     r13, qword  ptr  [rsp+0x50]\n40329a  jmp     0x402892\n402ca6  mov     rdx, r13\n402ca9  mov     byte  ptr  [r14+r15+0x2], 0x27\n402caf  mov     r13, qword  ptr  [rsp+0x50]\n402cb4  jmp     0x402892\n40306f  movabs  rax, 0x7000a38200000000\n403079  bt      rax, rbx\n40307d  jae     0x4028e0\n4022f9  add     r15, 0x2\n4022fd  xor     r8d, r8d\n\n402300  cmp     r15, r13\n402303  jae     0x402309\n4022f3  mov     byte  ptr  [r14+r15+0x1], 0x27\n\n4022f9  add     r15, 0x2\n4022fd  xor     r8d, r8d\n\n402300  cmp     r15, r13\n402303  jae     0x402309\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402b43  cmp     r13, r15\n402b46  jbe     0x402b4d\n402a91  mov     esi, r8d\n402a94  xor     esi, 0x1\n402a97  and     al, sil\n402a9a  je      0x402acb\n402f40  movzx   ebx, byte  ptr  [rsp+0xf]\n402f45  mov     rbp, r11\n402f48  mov     byte  ptr  [rsp+0xd], bl\n402f4c  jmp     0x402bf9\n402fc2  cmp     byte  ptr  [rcx], 0x0\n402fc5  jne     0x402fd7\n402fe8  movzx   edx, byte  ptr  [rsp+0xd]\n402fed  xor     r12d, r12d\n402ff0  jmp     0x402a56\n4029f9  mov     edi, dword  ptr  [rsp+0x9c]\n402a00  call    iswprint\n402b90  cmp     r15, 0x1\n402b94  je      0x4029f9\n402f09  cmp     r13, r15\n402f0c  jbe     0x402f13\n40245a  add     r15, 0x3\n40245e  mov     r8d, eax\n\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n402454  mov     byte  ptr  [r14+r15+0x2], 0x27\n\n40245a  add     r15, 0x3\n40245e  mov     r8d, eax\n\n402461  cmp     r13, r15\n402464  jbe     0x40246b\n403083  cmp     byte  ptr  [rsp+0xf], 0x0\n403088  jne     0x403272\n402b5e  test    al, al\n402b60  je      0x402f5e\n402b4d  add     r15, 0x1\n\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402b48  mov     byte  ptr  [r14+r15], 0x5c\n\n402b4d  add     r15, 0x1\n\n402b51  add     rbp, 0x1\n402b55  cmp     rbp, rcx\n402b58  jae     0x4022dc\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402a9c  cmp     r13, r15\n402a9f  jbe     0x402aa6\n402fc7  jmp     0x402fe8\n402fd7  add     rax, 0x1\n402fdb  lea     rdx,  [rbp+rax]\n402fe0  cmp     r11, rdx\n402fe3  ja      0x402fd0\n402a05  mov     rdi, qword  ptr  [rsp+0x28]\n402a0a  test    eax, eax\n402a0c  mov     eax, 0x0\n402a11  cmove   r12d, eax\n402a15  add     rbx, r15\n402a18  call    mbsinit\n402b9a  mov     rdi, qword  ptr  [rsp+0x10]\n402b9f  lea     rcx,  [rdi+r15]\n402ba3  lea     rdx,  [rdi+r14+0x1]\n402ba8  lea     r8,  [rcx+r14]\n402bac  jmp     0x402bbd\n402f13  lea     rax,  [rcx+0x2]\n402f17  cmp     r13, rax\n402f1a  jbe     0x402f22\n402f0e  mov     byte  ptr  [r14+r15], 0x30\n\n402f13  lea     rax,  [rcx+0x2]\n402f17  cmp     r13, rax\n402f1a  jbe     0x402f22\n40308e  cmp     r13, r15\n403091  jbe     0x403098\n403272  mov     rbp, r11\n403275  jmp     0x402c10\n402f5e  xor     r10d, r10d\n402f61  jmp     0x402b1d\n402b66  cmp     r13, r15\n402b69  jbe     0x402b70\n402ad5  lea     rax,  [r15+0x1]\n402ad9  cmp     r13, rax\n402adc  jbe     0x402aeb\n402ad0  mov     byte  ptr  [r14+r15], 0x5c\n\n402ad5  lea     rax,  [r15+0x1]\n402ad9  cmp     r13, rax\n402adc  jbe     0x402aeb\n402aa6  lea     rsi,  [r15+0x1]\n402aaa  cmp     r13, rsi\n402aad  jbe     0x402ab5\n402aa1  mov     byte  ptr  [r14+r15], 0x27\n\n402aa6  lea     rsi,  [r15+0x1]\n402aaa  cmp     r13, rsi\n402aad  jbe     0x402ab5\n402fe5  mov     rdi, rax\n\n402fe8  movzx   edx, byte  ptr  [rsp+0xd]\n402fed  xor     r12d, r12d\n402ff0  jmp     0x402a56\n402fd0  cmp     byte  ptr  [r9+rax], 0x0\n402fd5  je      0x402fe5\n402a1d  test    eax, eax\n402a1f  je      0x4029a3\n402bbd  movzx   ecx, byte  ptr  [rdx]\n402bc0  sub     ecx, 0x5b\n402bc3  cmp     cl, 0x21\n402bc6  ja      0x402bb0\n402f22  mov     eax, r12d\n402f25  lea     r15,  [rcx+0x3]\n402f29  xor     r12d, r12d\n402f2c  mov     ebx, 0x30\n402f31  jmp     0x402298\n402f1c  mov     byte  ptr  [r14+rcx+0x2], 0x30\n\n402f22  mov     eax, r12d\n402f25  lea     r15,  [rcx+0x3]\n402f29  xor     r12d, r12d\n402f2c  mov     ebx, 0x30\n402f31  jmp     0x402298\n403098  lea     rax,  [r15+0x1]\n40309c  cmp     r13, rax\n40309f  jbe     0x4030a7\n403093  mov     byte  ptr  [r14+r15], 0x3f\n\n403098  lea     rax,  [r15+0x1]\n40309c  cmp     r13, rax\n40309f  jbe     0x4030a7\n402b1d  cmp     r13, r15\n402b20  jbe     0x402b26\n402b70  lea     rax,  [r15+0x1]\n402b74  cmp     r13, rax\n402b77  jbe     0x402b7f\n402b6b  mov     byte  ptr  [r14+r15], 0x27\n\n402b70  lea     rax,  [r15+0x1]\n402b74  cmp     r13, rax\n402b77  jbe     0x402b7f\n402aeb  lea     rax,  [r15+0x2]\n402aef  cmp     r13, rax\n402af2  jbe     0x402b04\n402ade  mov     eax, ebx\n402ae0  shr     al, 0x6\n402ae3  add     eax, 0x30\n402ae6  mov     byte  ptr  [r14+r15+0x1], al\n\n402aeb  lea     rax,  [r15+0x2]\n402aef  cmp     r13, rax\n402af2  jbe     0x402b04\n402ab5  lea     rsi,  [r15+0x2]\n402ab9  cmp     r13, rsi\n402abc  jbe     0x402ac4\n402aaf  mov     byte  ptr  [r14+r15+0x1], 0x24\n\n402ab5  lea     rsi,  [r15+0x2]\n402ab9  cmp     r13, rsi\n402abc  jbe     0x402ac4\n4029a3  mov     rax, qword  ptr  [rsp+0x10]\n4029a8  lea     r14,  [rbp+rbx]\n4029ad  mov     rdx, qword  ptr  [rsp+0x30]\n4029b2  mov     rcx, qword  ptr  [rsp+0x28]\n4029b7  mov     rdi, qword  ptr  [rsp+0x38]\n4029bc  lea     r13,  [rax+r14]\n4029c0  sub     rdx, r14\n4029c3  mov     rsi, r13\n4029c6  call    rpl_mbrtowc\n402bc8  mov     esi, 0x1\n402bcd  shl     rsi, cl\n402bd0  mov     rcx, rsi\n402bd3  movabs  rsi, 0x20000002b\n402bdd  test    rcx, rsi\n402be0  je      0x402bb0\n402bb0  add     rdx, 0x1\n402bb4  cmp     r8, rdx\n402bb7  je      0x4029f9\n4030a7  lea     rax,  [r15+0x2]\n4030ab  cmp     r13, rax\n4030ae  jbe     0x4030b6\n4030a1  mov     byte  ptr  [r14+r15+0x1], 0x22\n\n4030a7  lea     rax,  [r15+0x2]\n4030ab  cmp     r13, rax\n4030ae  jbe     0x4030b6\n402b26  movzx   ebx, byte  ptr  [rdi+rbp]\n402b2a  add     r15, 0x1\n\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n402b22  mov     byte  ptr  [r14+r15], bl\n\n402b26  movzx   ebx, byte  ptr  [rdi+rbp]\n402b2a  add     r15, 0x1\n\n402b2e  test    dl, dl\n402b30  jne     0x402a80\n402b7f  add     r15, 0x2\n402b83  xor     r10d, r10d\n402b86  xor     r8d, r8d\n402b89  jmp     0x402b1d\n402b79  mov     byte  ptr  [r14+r15+0x1], 0x27\n\n402b7f  add     r15, 0x2\n402b83  xor     r10d, r10d\n402b86  xor     r8d, r8d\n402b89  jmp     0x402b1d\n402b04  and     ebx, 0x7\n402b07  add     rbp, 0x1\n402b0b  add     r15, 0x3\n402b0f  add     ebx, 0x30\n402b12  cmp     rbp, rcx\n402b15  jae     0x402300\n402af4  mov     eax, ebx\n402af6  shr     al, 0x3\n402af9  and     eax, 0x7\n402afc  add     eax, 0x30\n402aff  mov     byte  ptr  [r14+r15+0x2], al\n\n402b04  and     ebx, 0x7\n402b07  add     rbp, 0x1\n402b0b  add     r15, 0x3\n402b0f  add     ebx, 0x30\n402b12  cmp     rbp, rcx\n402b15  jae     0x402300\n402ac4  add     r15, 0x3\n402ac8  mov     r8d, eax\n\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402abe  mov     byte  ptr  [r14+r15+0x2], 0x27\n\n402ac4  add     r15, 0x3\n402ac8  mov     r8d, eax\n\n402acb  cmp     r13, r15\n402ace  jbe     0x402ad5\n402be2  mov     r14, qword  ptr  [rsp+0x40]\n402be7  mov     r13, qword  ptr  [rsp+0x70]\n402bec  mov     rbp, qword  ptr  [rsp+0x30]\n402bf1  mov     dword  ptr  [rsp+0x8], 0x2\n\n402bf9  cmp     byte  ptr  [rsp+0xd], 0x0\n402bfe  je      0x402c10\n4030b6  lea     rax,  [r15+0x3]\n4030ba  cmp     r13, rax\n4030bd  jbe     0x4030c5\n4030b0  mov     byte  ptr  [r14+r15+0x2], 0x22\n\n4030b6  lea     rax,  [r15+0x3]\n4030ba  cmp     r13, rax\n4030bd  jbe     0x4030c5\n402b1b  mov     esi, edx\n\n402b1d  cmp     r13, r15\n402b20  jbe     0x402b26\n4030c5  add     r15, 0x4\n4030c9  xor     edx, edx\n4030cb  xor     r12d, r12d\n4030ce  xor     eax, eax\n4030d0  mov     rbp, rcx\n4030d3  jmp     0x402298\n4030bf  mov     byte  ptr  [r14+r15+0x3], 0x3f\n\n4030c5  add     r15, 0x4\n4030c9  xor     edx, edx\n4030cb  xor     r12d, r12d\n4030ce  xor     eax, eax\n4030d0  mov     rbp, rcx\n4030d3  jmp     0x402298\n,an error occurred.\nThis model's maximum context length is 4097 tokens, however you requested 23887 tokens (21387 in your prompt; 2500 for the completion). Please reduce your prompt; or completion length.sub_402327
,402327  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402327  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_40235e
,40235e  nop     \n,Name the following assembly function:\n40235e  nop     \n,\nNOP (No Operation)sub_402381
,402381  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402381  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4023c2
,4023c2  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4023c2  nop     word  ptr  [rax+rax]\n,\nNOP (No Operation)sub_4023d4
,4023d4  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4023d4  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_402478
,402478  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n402478  nop     dword  ptr  [rax+rax]\n,\nNo-Operation (NOP)sub_4024a1
,4024a1  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4024a1  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4024b7
,4024b7  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4024b7  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_4024cf
,4024cf  nop     \n,Name the following assembly function:\n4024cf  nop     \n,\nNOP (No Operation)sub_4024fe
,4024fe  nop     \n,Name the following assembly function:\n4024fe  nop     \n,\nNOP (No Operation)sub_40250d
,40250d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40250d  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_40251f
,40251f  nop     \n,Name the following assembly function:\n40251f  nop     \n,\nNOP (No Operation)sub_40252f
,40252f  nop     \n,Name the following assembly function:\n40252f  nop     \n,\nNOP (No Operation)sub_40253f
,40253f  nop     \n,Name the following assembly function:\n40253f  nop     \n,\nNOP (No Operation)sub_40254f
,40254f  nop     \n,Name the following assembly function:\n40254f  nop     \n,\nNOP (No Operation)sub_40255f
,40255f  nop     \n,Name the following assembly function:\n40255f  nop     \n,\nNOP (No Operation)sub_4025cc
,4025cc  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4025cc  nop     dword  ptr  [rax]\n,\nNo-Operation (NOP)sub_4025ec
,4025ec  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4025ec  nop     dword  ptr  [rax]\n,\nNOP (No Operation)sub_40260f
,40260f  nop     \n,Name the following assembly function:\n40260f  nop     \n,\nNOP (No Operation)sub_402622
,402622  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402622  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionsub_40263a
,40263a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40263a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_40264a
,40264a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40264a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_4026eb
,4026eb  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4026eb  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_402705
,402705  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402705  nop     dword  ptr  [rax]\n,\nNo Operation (NOP) Functionsub_402718
,402718  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n402718  nop     dword  ptr  [rax+rax]\n,\nNo-Operation (NOP)sub_402733
,402733  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n402733  nop     dword  ptr  [rax+rax]\n,\nNo-Operation (NOP) Functionsub_402762
,402762  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402762  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionsub_402772
,402772  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402772  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Instructionsub_40278a
,40278a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40278a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_40279a
,40279a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40279a  nop     word  ptr  [rax+rax]\n,\nNo-Operation (NOP)sub_4027a8
,4027a8  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4027a8  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_4027cf
,4027cf  nop     \n,Name the following assembly function:\n4027cf  nop     \n,\nNOP (No Operation)sub_402869
,402869  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402869  nop     dword  ptr  [rax]\n,No Operation (NOP)sub_4028b2
,4028b2  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4028b2  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Word Pointer on RAX + RAXsub_4028f1
,4028f1  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4028f1  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_402912
,402912  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n402912  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionsub_402a78
,402a78  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n402a78  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_402b8b
,402b8b  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n402b8b  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_402bae
,402bae  nop     \n,Name the following assembly function:\n402bae  nop     \n,\nNOP (No Operation)sub_402c75
,402c75  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402c75  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_402d2d
,402d2d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402d2d  nop     dword  ptr  [rax]\n,\nNo-Operation (NOP)sub_402f36
,,Name the following assembly function:\n,\nMOV\n\nMOV (Move) is a function in assembly language that moves data from one memory location to another.sub_402fc9
,402fc9  nop     dword  ptr  [rax]\n,Name the following assembly function:\n402fc9  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_40311d
,40311d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40311d  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4032a4
,4032a4  nop     \n,Name the following assembly function:\n4032a4  nop     \n,\nNOP (No Operation)quotearg_n_options
,4032b0  push    r15\n4032b2  push    r14\n4032b4  movsxd  r15, edi\n4032b7  push    r13\n4032b9  push    r12\n4032bb  mov     r14, rdx\n4032be  push    rbp\n4032bf  push    rbx\n4032c0  mov     rbp, rcx\n4032c3  sub     rsp, 0x28\n4032c7  mov     qword  ptr  [rsp+0x8], rsi\n4032cc  call    __errno_location\n4032d1  mov     r13, rax\n4032d4  mov     eax, dword  ptr  [rax]\n4032d6  test    r15d, r15d\n4032d9  mov     rbx,  [slotvec]\n4032e0  mov     dword  ptr  [rsp+0x18], eax\n4032e4  js      0x403451\n403451  call    abort\n4032ea  cmp      [nslots], r15d\n4032f1  jg      0x403355\n4032f3  cmp     r15d, 0x7fffffff\n4032fa  je      0x403456\n403355  mov     eax, dword  ptr  [rbp+0x4]\n403358  shl     r15, 0x4\n40335c  sub     rsp, 0x8\n403360  add     rbx, r15\n403363  lea     r15,  [rbp+0x8]\n403367  mov     r8d, dword  ptr  [rbp]\n40336b  mov     r11, qword  ptr  [rbx]\n40336e  mov     r12, qword  ptr  [rbx+0x8]\n403372  mov     rcx, r14\n403375  or      eax, 0x1\n403378  mov     dword  ptr  [rsp+0x24], eax\n40337c  push    qword  ptr  [rbp+0x30]\n40337f  mov     r9d, eax\n403382  push    qword  ptr  [rbp+0x28]\n403385  push    r15\n403387  mov     rsi, r11\n40338a  mov     rdx, qword  ptr  [rsp+0x28]\n40338f  mov     rdi, r12\n403392  mov     qword  ptr  [rsp+0x30], r11\n403397  call    quotearg_buffer_restyled\n403456  call    xalloc_die\n403300  lea     r12d,  [r15+0x1]\n403304  lea     rax,  [slotvec0]\n40330b  movsxd  rsi, r12d\n40330e  shl     rsi, 0x4\n403312  cmp     rbx, rax\n403315  je      0x403430\n40339c  add     rsp, 0x20\n4033a0  mov     r11, qword  ptr  [rsp+0x10]\n4033a5  cmp     r11, rax\n4033a8  ja      0x403411\n403430  xor     edi, edi\n403432  call    xrealloc\n40331b  mov     rdi, rbx\n40331e  call    xrealloc\n4033aa  lea     rsi,  [rax+0x1]\n4033ae  lea     rax,  [slot0]\n4033b5  cmp     r12, rax\n4033b8  mov     qword  ptr  [rbx], rsi\n4033bb  je      0x4033cf\n403411  mov     eax, dword  ptr  [rsp+0x18]\n403415  mov     dword  ptr  [r13], eax\n403419  add     rsp, 0x28\n40341d  mov     rax, r12\n403420  pop     rbx\n403421  pop     rbp\n403422  pop     r12\n403424  pop     r13\n403426  pop     r14\n403428  pop     r15\n40342a  ret     \n403437  movdqa  xmm0,  [slotvec0]\n40343f  mov     rbx, rax\n403442  mov      [slotvec], rax\n403449  movups  xmmword  ptr  [rax], xmm0\n40344c  jmp     0x40332d\n403323  mov     rbx, rax\n403326  mov      [slotvec], rax\n\n40332d  movsxd  rdi,  [nslots]\n403334  mov     edx, r12d\n403337  xor     esi, esi\n403339  sub     edx, edi\n40333b  shl     rdi, 0x4\n40333f  movsxd  rdx, edx\n403342  add     rdi, rbx\n403345  shl     rdx, 0x4\n403349  call    memset\n4033cf  mov     rdi, rsi\n4033d2  mov     qword  ptr  [rsp+0x10], rsi\n4033d7  call    xmalloc\n4033bd  mov     rdi, r12\n4033c0  mov     qword  ptr  [rsp+0x10], rsi\n4033c5  call    free\n40332d  movsxd  rdi,  [nslots]\n403334  mov     edx, r12d\n403337  xor     esi, esi\n403339  sub     edx, edi\n40333b  shl     rdi, 0x4\n40333f  movsxd  rdx, edx\n403342  add     rdi, rbx\n403345  shl     rdx, 0x4\n403349  call    memset\n40334e  mov      [nslots], r12d\n\n403355  mov     eax, dword  ptr  [rbp+0x4]\n403358  shl     r15, 0x4\n40335c  sub     rsp, 0x8\n403360  add     rbx, r15\n403363  lea     r15,  [rbp+0x8]\n403367  mov     r8d, dword  ptr  [rbp]\n40336b  mov     r11, qword  ptr  [rbx]\n40336e  mov     r12, qword  ptr  [rbx+0x8]\n403372  mov     rcx, r14\n403375  or      eax, 0x1\n403378  mov     dword  ptr  [rsp+0x24], eax\n40337c  push    qword  ptr  [rbp+0x30]\n40337f  mov     r9d, eax\n403382  push    qword  ptr  [rbp+0x28]\n403385  push    r15\n403387  mov     rsi, r11\n40338a  mov     rdx, qword  ptr  [rsp+0x28]\n40338f  mov     rdi, r12\n403392  mov     qword  ptr  [rsp+0x30], r11\n403397  call    quotearg_buffer_restyled\n4033dc  sub     rsp, 0x8\n4033e0  mov     qword  ptr  [rbx+0x8], rax\n4033e4  mov     r8d, dword  ptr  [rbp]\n4033e8  push    qword  ptr  [rbp+0x30]\n4033eb  push    qword  ptr  [rbp+0x28]\n4033ee  mov     rcx, r14\n4033f1  push    r15\n4033f3  mov     r9d, dword  ptr  [rsp+0x3c]\n4033f8  mov     rdi, rax\n4033fb  mov     rdx, qword  ptr  [rsp+0x28]\n403400  mov     rsi, qword  ptr  [rsp+0x30]\n403405  mov     r12, rax\n403408  call    quotearg_buffer_restyled\n4033ca  mov     rsi, qword  ptr  [rsp+0x10]\n\n4033cf  mov     rdi, rsi\n4033d2  mov     qword  ptr  [rsp+0x10], rsi\n4033d7  call    xmalloc\n40340d  add     rsp, 0x20\n\n403411  mov     eax, dword  ptr  [rsp+0x18]\n403415  mov     dword  ptr  [r13], eax\n403419  add     rsp, 0x28\n40341d  mov     rax, r12\n403420  pop     rbx\n403421  pop     rbp\n403422  pop     r12\n403424  pop     r13\n403426  pop     r14\n403428  pop     r15\n40342a  ret     \n,Name the following assembly function:\n4032b0  push    r15\n4032b2  push    r14\n4032b4  movsxd  r15, edi\n4032b7  push    r13\n4032b9  push    r12\n4032bb  mov     r14, rdx\n4032be  push    rbp\n4032bf  push    rbx\n4032c0  mov     rbp, rcx\n4032c3  sub     rsp, 0x28\n4032c7  mov     qword  ptr  [rsp+0x8], rsi\n4032cc  call    __errno_location\n4032d1  mov     r13, rax\n4032d4  mov     eax, dword  ptr  [rax]\n4032d6  test    r15d, r15d\n4032d9  mov     rbx,  [slotvec]\n4032e0  mov     dword  ptr  [rsp+0x18], eax\n4032e4  js      0x403451\n403451  call    abort\n4032ea  cmp      [nslots], r15d\n4032f1  jg      0x403355\n4032f3  cmp     r15d, 0x7fffffff\n4032fa  je      0x403456\n403355  mov     eax, dword  ptr  [rbp+0x4]\n403358  shl     r15, 0x4\n40335c  sub     rsp, 0x8\n403360  add     rbx, r15\n403363  lea     r15,  [rbp+0x8]\n403367  mov     r8d, dword  ptr  [rbp]\n40336b  mov     r11, qword  ptr  [rbx]\n40336e  mov     r12, qword  ptr  [rbx+0x8]\n403372  mov     rcx, r14\n403375  or      eax, 0x1\n403378  mov     dword  ptr  [rsp+0x24], eax\n40337c  push    qword  ptr  [rbp+0x30]\n40337f  mov     r9d, eax\n403382  push    qword  ptr  [rbp+0x28]\n403385  push    r15\n403387  mov     rsi, r11\n40338a  mov     rdx, qword  ptr  [rsp+0x28]\n40338f  mov     rdi, r12\n403392  mov     qword  ptr  [rsp+0x30], r11\n403397  call    quotearg_buffer_restyled\n403456  call    xalloc_die\n403300  lea     r12d,  [r15+0x1]\n403304  lea     rax,  [slotvec0]\n40330b  movsxd  rsi, r12d\n40330e  shl     rsi, 0x4\n403312  cmp     rbx, rax\n403315  je      0x403430\n40339c  add     rsp, 0x20\n4033a0  mov     r11, qword  ptr  [rsp+0x10]\n4033a5  cmp     r11, rax\n4033a8  ja      0x403411\n403430  xor     edi, edi\n403432  call    xrealloc\n40331b  mov     rdi, rbx\n40331e  call    xrealloc\n4033aa  lea     rsi,  [rax+0x1]\n4033ae  lea     rax,  [slot0]\n4033b5  cmp     r12, rax\n4033b8  mov     qword  ptr  [rbx], rsi\n4033bb  je      0x4033cf\n403411  mov     eax, dword  ptr  [rsp+0x18]\n403415  mov     dword  ptr  [r13], eax\n403419  add     rsp, 0x28\n40341d  mov     rax, r12\n403420  pop     rbx\n403421  pop     rbp\n403422  pop     r12\n403424  pop     r13\n403426  pop     r14\n403428  pop     r15\n40342a  ret     \n403437  movdqa  xmm0,  [slotvec0]\n40343f  mov     rbx, rax\n403442  mov      [slotvec], rax\n403449  movups  xmmword  ptr  [rax], xmm0\n40344c  jmp     0x40332d\n403323  mov     rbx, rax\n403326  mov      [slotvec], rax\n\n40332d  movsxd  rdi,  [nslots]\n403334  mov     edx, r12d\n403337  xor     esi, esi\n403339  sub     edx, edi\n40333b  shl     rdi, 0x4\n40333f  movsxd  rdx, edx\n403342  add     rdi, rbx\n403345  shl     rdx, 0x4\n403349  call    memset\n4033cf  mov     rdi, rsi\n4033d2  mov     qword  ptr  [rsp+0x10], rsi\n4033d7  call    xmalloc\n4033bd  mov     rdi, r12\n4033c0  mov     qword  ptr  [rsp+0x10], rsi\n4033c5  call    free\n40332d  movsxd  rdi,  [nslots]\n403334  mov     edx, r12d\n403337  xor     esi, esi\n403339  sub     edx, edi\n40333b  shl     rdi, 0x4\n40333f  movsxd  rdx, edx\n403342  add     rdi, rbx\n403345  shl     rdx, 0x4\n403349  call    memset\n40334e  mov      [nslots], r12d\n\n403355  mov     eax, dword  ptr  [rbp+0x4]\n403358  shl     r15, 0x4\n40335c  sub     rsp, 0x8\n403360  add     rbx, r15\n403363  lea     r15,  [rbp+0x8]\n403367  mov     r8d, dword  ptr  [rbp]\n40336b  mov     r11, qword  ptr  [rbx]\n40336e  mov     r12, qword  ptr  [rbx+0x8]\n403372  mov     rcx, r14\n403375  or      eax, 0x1\n403378  mov     dword  ptr  [rsp+0x24], eax\n40337c  push    qword  ptr  [rbp+0x30]\n40337f  mov     r9d, eax\n403382  push    qword  ptr  [rbp+0x28]\n403385  push    r15\n403387  mov     rsi, r11\n40338a  mov     rdx, qword  ptr  [rsp+0x28]\n40338f  mov     rdi, r12\n403392  mov     qword  ptr  [rsp+0x30], r11\n403397  call    quotearg_buffer_restyled\n4033dc  sub     rsp, 0x8\n4033e0  mov     qword  ptr  [rbx+0x8], rax\n4033e4  mov     r8d, dword  ptr  [rbp]\n4033e8  push    qword  ptr  [rbp+0x30]\n4033eb  push    qword  ptr  [rbp+0x28]\n4033ee  mov     rcx, r14\n4033f1  push    r15\n4033f3  mov     r9d, dword  ptr  [rsp+0x3c]\n4033f8  mov     rdi, rax\n4033fb  mov     rdx, qword  ptr  [rsp+0x28]\n403400  mov     rsi, qword  ptr  [rsp+0x30]\n403405  mov     r12, rax\n403408  call    quotearg_buffer_restyled\n4033ca  mov     rsi, qword  ptr  [rsp+0x10]\n\n4033cf  mov     rdi, rsi\n4033d2  mov     qword  ptr  [rsp+0x10], rsi\n4033d7  call    xmalloc\n40340d  add     rsp, 0x20\n\n403411  mov     eax, dword  ptr  [rsp+0x18]\n403415  mov     dword  ptr  [r13], eax\n403419  add     rsp, 0x28\n40341d  mov     rax, r12\n403420  pop     rbx\n403421  pop     rbp\n403422  pop     r12\n403424  pop     r13\n403426  pop     r14\n403428  pop     r15\n40342a  ret     \n,an error occurred.\nThis model's maximum context length is 4097 tokens, however you requested 4816 tokens (2316 in your prompt; 2500 for the completion). Please reduce your prompt; or completion length.sub_40342b
,40342b  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n40342b  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_40345b
,40345b  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n40345b  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionclone_quoting_options
,403460  push    r12\n403462  push    rbp\n403463  push    rbx\n403464  mov     rbx, rdi\n403467  call    __errno_location\n40346c  mov     r12d, dword  ptr  [rax]\n40346f  mov     rbp, rax\n403472  lea     rax,  [default_quoting_options]\n403479  test    rbx, rbx\n40347c  mov     esi, 0x38\n403481  cmove   rbx, rax\n403485  mov     rdi, rbx\n403488  call    xmemdup\n40348d  mov     dword  ptr  [rbp], r12d\n403491  pop     rbx\n403492  pop     rbp\n403493  pop     r12\n403495  ret     \n,Name the following assembly function:\n403460  push    r12\n403462  push    rbp\n403463  push    rbx\n403464  mov     rbx, rdi\n403467  call    __errno_location\n40346c  mov     r12d, dword  ptr  [rax]\n40346f  mov     rbp, rax\n403472  lea     rax,  [default_quoting_options]\n403479  test    rbx, rbx\n40347c  mov     esi, 0x38\n403481  cmove   rbx, rax\n403485  mov     rdi, rbx\n403488  call    xmemdup\n40348d  mov     dword  ptr  [rbp], r12d\n403491  pop     rbx\n403492  pop     rbp\n403493  pop     r12\n403495  ret     \n,\nxmemdup()sub_403496
,,Name the following assembly function:\n,\nMOVSB\n\nMOVSB is a processor instruction in the x86 assembly language used to move data from one memory location to another.get_quoting_style
,4034a0  lea     rax,  [default_quoting_options]\n4034a7  test    rdi, rdi\n4034aa  cmove   rdi, rax\n4034ae  mov     eax, dword  ptr  [rdi]\n4034b0  ret     \n,Name the following assembly function:\n4034a0  lea     rax,  [default_quoting_options]\n4034a7  test    rdi, rdi\n4034aa  cmove   rdi, rax\n4034ae  mov     eax, dword  ptr  [rdi]\n4034b0  ret     \n,\nLoad Default Quoting Optionssub_4034b1
,4034b1  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4034b1  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)set_quoting_style
,4034c0  lea     rax,  [default_quoting_options]\n4034c7  test    rdi, rdi\n4034ca  cmove   rdi, rax\n4034ce  mov     dword  ptr  [rdi], esi\n4034d0  ret     \n,Name the following assembly function:\n4034c0  lea     rax,  [default_quoting_options]\n4034c7  test    rdi, rdi\n4034ca  cmove   rdi, rax\n4034ce  mov     dword  ptr  [rdi], esi\n4034d0  ret     \n,\nMoveDefaultQuotingOptionsToRdi()sub_4034d1
,4034d1  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4034d1  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)set_char_quoting
,4034e0  lea     rax,  [default_quoting_options]\n4034e7  test    rdi, rdi\n4034ea  mov     ecx, esi\n4034ec  cmove   rdi, rax\n4034f0  mov     eax, esi\n4034f2  and     ecx, 0x1f\n4034f5  shr     al, 0x5\n4034f8  movzx   eax, al\n4034fb  lea     rdi,  [rdi+rax*0x4+0x8]\n403500  mov     esi, dword  ptr  [rdi]\n403502  mov     eax, esi\n403504  shr     eax, cl\n403506  xor     edx, eax\n403508  and     eax, 0x1\n40350b  and     edx, 0x1\n40350e  shl     edx, cl\n403510  xor     edx, esi\n403512  mov     dword  ptr  [rdi], edx\n403514  ret     \n,Name the following assembly function:\n4034e0  lea     rax,  [default_quoting_options]\n4034e7  test    rdi, rdi\n4034ea  mov     ecx, esi\n4034ec  cmove   rdi, rax\n4034f0  mov     eax, esi\n4034f2  and     ecx, 0x1f\n4034f5  shr     al, 0x5\n4034f8  movzx   eax, al\n4034fb  lea     rdi,  [rdi+rax*0x4+0x8]\n403500  mov     esi, dword  ptr  [rdi]\n403502  mov     eax, esi\n403504  shr     eax, cl\n403506  xor     edx, eax\n403508  and     eax, 0x1\n40350b  and     edx, 0x1\n40350e  shl     edx, cl\n403510  xor     edx, esi\n403512  mov     dword  ptr  [rdi], edx\n403514  ret     \n,\nLoad and Compare Move Exchange (LCMX) function.sub_403515
,403515  nop     \n,Name the following assembly function:\n403515  nop     \n,\nNOP (No Operation)set_quoting_flags
,403520  lea     rax,  [default_quoting_options]\n403527  test    rdi, rdi\n40352a  cmove   rdi, rax\n40352e  mov     eax, dword  ptr  [rdi+0x4]\n403531  mov     dword  ptr  [rdi+0x4], esi\n403534  ret     \n,Name the following assembly function:\n403520  lea     rax,  [default_quoting_options]\n403527  test    rdi, rdi\n40352a  cmove   rdi, rax\n40352e  mov     eax, dword  ptr  [rdi+0x4]\n403531  mov     dword  ptr  [rdi+0x4], esi\n403534  ret     \n,\nLoad Default Quoting Options and Set Valuesub_403535
,403535  nop     \n,Name the following assembly function:\n403535  nop     \n,\nNOP (No Operation)set_custom_quoting
,403540  lea     rax,  [default_quoting_options]\n403547  test    rdi, rdi\n40354a  cmove   rdi, rax\n40354e  test    rsi, rsi\n403551  mov     dword  ptr  [rdi], 0xa\n403557  je      0x403567\n403567  sub     rsp, 0x8\n40356b  call    abort\n403559  test    rdx, rdx\n40355c  je      0x403567\n40355e  mov     qword  ptr  [rdi+0x28], rsi\n403562  mov     qword  ptr  [rdi+0x30], rdx\n403566  ret     \n,Name the following assembly function:\n403540  lea     rax,  [default_quoting_options]\n403547  test    rdi, rdi\n40354a  cmove   rdi, rax\n40354e  test    rsi, rsi\n403551  mov     dword  ptr  [rdi], 0xa\n403557  je      0x403567\n403567  sub     rsp, 0x8\n40356b  call    abort\n403559  test    rdx, rdx\n40355c  je      0x403567\n40355e  mov     qword  ptr  [rdi+0x28], rsi\n403562  mov     qword  ptr  [rdi+0x30], rdx\n403566  ret     \n,\nset_default_quoting_options()quotearg_buffer
,403570  push    r15\n403572  push    r14\n403574  lea     rax,  [default_quoting_options]\n40357b  push    r13\n40357d  push    r12\n40357f  mov     r13, rdi\n403582  push    rbp\n403583  push    rbx\n403584  mov     rbx, r8\n403587  mov     r14, rsi\n40358a  mov     r15, rdx\n40358d  sub     rsp, 0x18\n403591  test    r8, r8\n403594  cmove   rbx, rax\n403598  mov     qword  ptr  [rsp+0x8], rcx\n40359d  call    __errno_location\n4035a2  mov     r12d, dword  ptr  [rax]\n4035a5  mov     rbp, rax\n4035a8  lea     rax,  [rbx+0x8]\n4035ac  sub     rsp, 0x8\n4035b0  mov     r9d, dword  ptr  [rbx+0x4]\n4035b4  push    qword  ptr  [rbx+0x30]\n4035b7  mov     r8d, dword  ptr  [rbx]\n4035ba  push    qword  ptr  [rbx+0x28]\n4035bd  mov     rdx, r15\n4035c0  push    rax\n4035c1  mov     rcx, qword  ptr  [rsp+0x28]\n4035c6  mov     rsi, r14\n4035c9  mov     rdi, r13\n4035cc  call    quotearg_buffer_restyled\n4035d1  mov     dword  ptr  [rbp], r12d\n4035d5  add     rsp, 0x38\n4035d9  pop     rbx\n4035da  pop     rbp\n4035db  pop     r12\n4035dd  pop     r13\n4035df  pop     r14\n4035e1  pop     r15\n4035e3  ret     \n,Name the following assembly function:\n403570  push    r15\n403572  push    r14\n403574  lea     rax,  [default_quoting_options]\n40357b  push    r13\n40357d  push    r12\n40357f  mov     r13, rdi\n403582  push    rbp\n403583  push    rbx\n403584  mov     rbx, r8\n403587  mov     r14, rsi\n40358a  mov     r15, rdx\n40358d  sub     rsp, 0x18\n403591  test    r8, r8\n403594  cmove   rbx, rax\n403598  mov     qword  ptr  [rsp+0x8], rcx\n40359d  call    __errno_location\n4035a2  mov     r12d, dword  ptr  [rax]\n4035a5  mov     rbp, rax\n4035a8  lea     rax,  [rbx+0x8]\n4035ac  sub     rsp, 0x8\n4035b0  mov     r9d, dword  ptr  [rbx+0x4]\n4035b4  push    qword  ptr  [rbx+0x30]\n4035b7  mov     r8d, dword  ptr  [rbx]\n4035ba  push    qword  ptr  [rbx+0x28]\n4035bd  mov     rdx, r15\n4035c0  push    rax\n4035c1  mov     rcx, qword  ptr  [rsp+0x28]\n4035c6  mov     rsi, r14\n4035c9  mov     rdi, r13\n4035cc  call    quotearg_buffer_restyled\n4035d1  mov     dword  ptr  [rbp], r12d\n4035d5  add     rsp, 0x38\n4035d9  pop     rbx\n4035da  pop     rbp\n4035db  pop     r12\n4035dd  pop     r13\n4035df  pop     r14\n4035e1  pop     r15\n4035e3  ret     \n,\nquotearg_buffer_restyledsub_4035e4
,4035e4  nop     \n,Name the following assembly function:\n4035e4  nop     \n,\nNOP (No Operation)quotearg_alloc_mem
,4035f0  push    r15\n4035f2  push    r14\n4035f4  lea     rax,  [default_quoting_options]\n4035fb  push    r13\n4035fd  push    r12\n4035ff  mov     r12, rdx\n403602  push    rbp\n403603  push    rbx\n403604  mov     rbx, rcx\n403607  mov     r14, rdi\n40360a  mov     r15, rsi\n40360d  sub     rsp, 0x38\n403611  test    rcx, rcx\n403614  cmove   rbx, rax\n403618  xor     ebp, ebp\n40361a  call    __errno_location\n40361f  test    r12, r12\n403622  mov     r13, rax\n403625  mov     eax, dword  ptr  [rax]\n403627  sete    bpl\n40362b  or      ebp, dword  ptr  [rbx+0x4]\n40362e  lea     r10,  [rbx+0x8]\n403632  sub     rsp, 0x8\n403636  mov     r8d, dword  ptr  [rbx]\n403639  mov     rcx, r15\n40363c  mov     dword  ptr  [rsp+0x14], eax\n403640  push    qword  ptr  [rbx+0x30]\n403643  mov     rdx, r14\n403646  push    qword  ptr  [rbx+0x28]\n403649  push    r10\n40364b  xor     esi, esi\n40364d  mov     r9d, ebp\n403650  xor     edi, edi\n403652  mov     qword  ptr  [rsp+0x40], r10\n403657  call    quotearg_buffer_restyled\n40365c  lea     rsi,  [rax+0x1]\n403660  mov     qword  ptr  [rsp+0x48], rax\n403665  add     rsp, 0x20\n403669  mov     rdi, rsi\n40366c  mov     qword  ptr  [rsp+0x18], rsi\n403671  call    xmalloc\n403676  mov     qword  ptr  [rsp+0x10], rax\n40367b  sub     rsp, 0x8\n40367f  push    qword  ptr  [rbx+0x30]\n403682  push    qword  ptr  [rbx+0x28]\n403685  mov     r10, qword  ptr  [rsp+0x38]\n40368a  mov     r9d, ebp\n40368d  mov     r8d, dword  ptr  [rbx]\n403690  mov     rcx, r15\n403693  mov     rdx, r14\n403696  mov     rdi, rax\n403699  push    r10\n40369b  mov     rsi, qword  ptr  [rsp+0x38]\n4036a0  call    quotearg_buffer_restyled\n4036a5  mov     eax, dword  ptr  [rsp+0x2c]\n4036a9  add     rsp, 0x20\n4036ad  test    r12, r12\n4036b0  mov     dword  ptr  [r13], eax\n4036b4  je      0x4036bf\n4036bf  mov     rax, qword  ptr  [rsp+0x10]\n4036c4  add     rsp, 0x38\n4036c8  pop     rbx\n4036c9  pop     rbp\n4036ca  pop     r12\n4036cc  pop     r13\n4036ce  pop     r14\n4036d0  pop     r15\n4036d2  ret     \n4036b6  mov     r11, qword  ptr  [rsp+0x28]\n4036bb  mov     qword  ptr  [r12], r11\n\n4036bf  mov     rax, qword  ptr  [rsp+0x10]\n4036c4  add     rsp, 0x38\n4036c8  pop     rbx\n4036c9  pop     rbp\n4036ca  pop     r12\n4036cc  pop     r13\n4036ce  pop     r14\n4036d0  pop     r15\n4036d2  ret     \n,Name the following assembly function:\n4035f0  push    r15\n4035f2  push    r14\n4035f4  lea     rax,  [default_quoting_options]\n4035fb  push    r13\n4035fd  push    r12\n4035ff  mov     r12, rdx\n403602  push    rbp\n403603  push    rbx\n403604  mov     rbx, rcx\n403607  mov     r14, rdi\n40360a  mov     r15, rsi\n40360d  sub     rsp, 0x38\n403611  test    rcx, rcx\n403614  cmove   rbx, rax\n403618  xor     ebp, ebp\n40361a  call    __errno_location\n40361f  test    r12, r12\n403622  mov     r13, rax\n403625  mov     eax, dword  ptr  [rax]\n403627  sete    bpl\n40362b  or      ebp, dword  ptr  [rbx+0x4]\n40362e  lea     r10,  [rbx+0x8]\n403632  sub     rsp, 0x8\n403636  mov     r8d, dword  ptr  [rbx]\n403639  mov     rcx, r15\n40363c  mov     dword  ptr  [rsp+0x14], eax\n403640  push    qword  ptr  [rbx+0x30]\n403643  mov     rdx, r14\n403646  push    qword  ptr  [rbx+0x28]\n403649  push    r10\n40364b  xor     esi, esi\n40364d  mov     r9d, ebp\n403650  xor     edi, edi\n403652  mov     qword  ptr  [rsp+0x40], r10\n403657  call    quotearg_buffer_restyled\n40365c  lea     rsi,  [rax+0x1]\n403660  mov     qword  ptr  [rsp+0x48], rax\n403665  add     rsp, 0x20\n403669  mov     rdi, rsi\n40366c  mov     qword  ptr  [rsp+0x18], rsi\n403671  call    xmalloc\n403676  mov     qword  ptr  [rsp+0x10], rax\n40367b  sub     rsp, 0x8\n40367f  push    qword  ptr  [rbx+0x30]\n403682  push    qword  ptr  [rbx+0x28]\n403685  mov     r10, qword  ptr  [rsp+0x38]\n40368a  mov     r9d, ebp\n40368d  mov     r8d, dword  ptr  [rbx]\n403690  mov     rcx, r15\n403693  mov     rdx, r14\n403696  mov     rdi, rax\n403699  push    r10\n40369b  mov     rsi, qword  ptr  [rsp+0x38]\n4036a0  call    quotearg_buffer_restyled\n4036a5  mov     eax, dword  ptr  [rsp+0x2c]\n4036a9  add     rsp, 0x20\n4036ad  test    r12, r12\n4036b0  mov     dword  ptr  [r13], eax\n4036b4  je      0x4036bf\n4036bf  mov     rax, qword  ptr  [rsp+0x10]\n4036c4  add     rsp, 0x38\n4036c8  pop     rbx\n4036c9  pop     rbp\n4036ca  pop     r12\n4036cc  pop     r13\n4036ce  pop     r14\n4036d0  pop     r15\n4036d2  ret     \n4036b6  mov     r11, qword  ptr  [rsp+0x28]\n4036bb  mov     qword  ptr  [r12], r11\n\n4036bf  mov     rax, qword  ptr  [rsp+0x10]\n4036c4  add     rsp, 0x38\n4036c8  pop     rbx\n4036c9  pop     rbp\n4036ca  pop     r12\n4036cc  pop     r13\n4036ce  pop     r14\n4036d0  pop     r15\n4036d2  ret     \n,\nquotearg_buffer_restyledsub_4036d3
,4036d3  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4036d3  nop     dword  ptr  [rax]\n,\nNo-Operation (NOP) Instructionquotearg_alloc
,4036e0  mov     rcx, rdx\n4036e3  xor     edx, edx\n4036e5  jmp     quotearg_alloc_mem\n,Name the following assembly function:\n4036e0  mov     rcx, rdx\n4036e3  xor     edx, edx\n4036e5  jmp     quotearg_alloc_mem\n,\nquotearg_alloc_mem()sub_4036ea
,4036ea  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4036ea  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Word Pointer on RAX and RAXquotearg_free
,4036f0  mov     eax,  [nslots]\n4036f6  push    r12\n4036f8  mov     r12,  [slotvec]\n4036ff  push    rbp\n403700  push    rbx\n403701  cmp     eax, 0x1\n403704  jle     0x403731\n403731  mov     rdi, qword  ptr  [r12+0x8]\n403736  lea     rbx,  [slot0]\n40373d  cmp     rdi, rbx\n403740  je      0x403759\n403706  sub     eax, 0x2\n403709  lea     rbx,  [r12+0x18]\n40370e  shl     rax, 0x4\n403712  lea     rbp,  [r12+rax+0x28]\n403717  nop     word  ptr  [rax+rax]\n\n403720  mov     rdi, qword  ptr  [rbx]\n403723  add     rbx, 0x10\n403727  call    free\n403759  lea     rbx,  [slotvec0]\n403760  cmp     r12, rbx\n403763  je      0x403774\n403742  call    free\n40372c  cmp     rbx, rbp\n40372f  jne     0x403720\n403774  pop     rbx\n403775  mov      [nslots], 0x1\n40377f  pop     rbp\n403780  pop     r12\n403782  ret     \n403765  mov     rdi, r12\n403768  call    free\n403747  mov      [slotvec0], 0x100\n403752  mov      [0x607078], rbx\n\n403759  lea     rbx,  [slotvec0]\n403760  cmp     r12, rbx\n403763  je      0x403774\n403720  mov     rdi, qword  ptr  [rbx]\n403723  add     rbx, 0x10\n403727  call    free\n40376d  mov      [slotvec], rbx\n\n403774  pop     rbx\n403775  mov      [nslots], 0x1\n40377f  pop     rbp\n403780  pop     r12\n403782  ret     \n,Name the following assembly function:\n4036f0  mov     eax,  [nslots]\n4036f6  push    r12\n4036f8  mov     r12,  [slotvec]\n4036ff  push    rbp\n403700  push    rbx\n403701  cmp     eax, 0x1\n403704  jle     0x403731\n403731  mov     rdi, qword  ptr  [r12+0x8]\n403736  lea     rbx,  [slot0]\n40373d  cmp     rdi, rbx\n403740  je      0x403759\n403706  sub     eax, 0x2\n403709  lea     rbx,  [r12+0x18]\n40370e  shl     rax, 0x4\n403712  lea     rbp,  [r12+rax+0x28]\n403717  nop     word  ptr  [rax+rax]\n\n403720  mov     rdi, qword  ptr  [rbx]\n403723  add     rbx, 0x10\n403727  call    free\n403759  lea     rbx,  [slotvec0]\n403760  cmp     r12, rbx\n403763  je      0x403774\n403742  call    free\n40372c  cmp     rbx, rbp\n40372f  jne     0x403720\n403774  pop     rbx\n403775  mov      [nslots], 0x1\n40377f  pop     rbp\n403780  pop     r12\n403782  ret     \n403765  mov     rdi, r12\n403768  call    free\n403747  mov      [slotvec0], 0x100\n403752  mov      [0x607078], rbx\n\n403759  lea     rbx,  [slotvec0]\n403760  cmp     r12, rbx\n403763  je      0x403774\n403720  mov     rdi, qword  ptr  [rbx]\n403723  add     rbx, 0x10\n403727  call    free\n40376d  mov      [slotvec], rbx\n\n403774  pop     rbx\n403775  mov      [nslots], 0x1\n40377f  pop     rbp\n403780  pop     r12\n403782  ret     \n,\nfree_slotvec_and_slots()sub_403783
,403783  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403783  nop     dword  ptr  [rax]\n,\nNo Operation (NOP) Functionquotearg_n
,403790  lea     rcx,  [default_quoting_options]\n403797  mov     rdx, -0x1\n40379e  jmp     quotearg_n_options\n,Name the following assembly function:\n403790  lea     rcx,  [default_quoting_options]\n403797  mov     rdx, -0x1\n40379e  jmp     quotearg_n_options\n,\nquotearg_n_options()sub_4037a3
,4037a3  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4037a3  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)quotearg_n_mem
,4037b0  lea     rcx,  [default_quoting_options]\n4037b7  jmp     quotearg_n_options\n,Name the following assembly function:\n4037b0  lea     rcx,  [default_quoting_options]\n4037b7  jmp     quotearg_n_options\n,\nquotearg_n_options()sub_4037bc
,4037bc  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4037bc  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)quotearg
,4037c0  lea     rcx,  [default_quoting_options]\n4037c7  mov     rsi, rdi\n4037ca  mov     rdx, -0x1\n4037d1  xor     edi, edi\n4037d3  jmp     quotearg_n_options\n,Name the following assembly function:\n4037c0  lea     rcx,  [default_quoting_options]\n4037c7  mov     rsi, rdi\n4037ca  mov     rdx, -0x1\n4037d1  xor     edi, edi\n4037d3  jmp     quotearg_n_options\n,\nquotearg_n_options()sub_4037d8
,4037d8  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4037d8  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_mem
,4037e0  lea     rcx,  [default_quoting_options]\n4037e7  mov     rdx, rsi\n4037ea  mov     rsi, rdi\n4037ed  xor     edi, edi\n4037ef  jmp     quotearg_n_options\n,Name the following assembly function:\n4037e0  lea     rcx,  [default_quoting_options]\n4037e7  mov     rdx, rsi\n4037ea  mov     rsi, rdi\n4037ed  xor     edi, edi\n4037ef  jmp     quotearg_n_options\n,\nquotearg_n_options()sub_4037f4
,4037f4  nop     \n,Name the following assembly function:\n4037f4  nop     \n,\nNOP (No Operation)quotearg_n_style
,403800  sub     rsp, 0x48\n403804  mov     rax, rdx\n403810  mov     qword  ptr  [rsp+0x38], rdx\n403815  xor     edx, edx\n403817  cmp     esi, 0xa\n40381a  je      0x403884\n403884  call    abort\n40381c  mov     dword  ptr  [rsp], esi\n40381f  mov     rcx, rsp\n403822  mov     rdx, -0x1\n403829  mov     rsi, rax\n40382c  mov     qword  ptr  [rsp+0x4], 0x0\n403835  mov     qword  ptr  [rsp+0xc], 0x0\n40383e  mov     qword  ptr  [rsp+0x14], 0x0\n403847  mov     qword  ptr  [rsp+0x1c], 0x0\n403850  mov     qword  ptr  [rsp+0x24], 0x0\n403859  mov     qword  ptr  [rsp+0x2c], 0x0\n403862  mov     dword  ptr  [rsp+0x34], 0x0\n40386a  call    quotearg_n_options\n40386f  mov     rcx, qword  ptr  [rsp+0x38]\n40387d  jne     0x403889\n40387f  add     rsp, 0x48\n403883  ret     \n403889  call    __stack_chk_fail\n,Name the following assembly function:\n403800  sub     rsp, 0x48\n403804  mov     rax, rdx\n403810  mov     qword  ptr  [rsp+0x38], rdx\n403815  xor     edx, edx\n403817  cmp     esi, 0xa\n40381a  je      0x403884\n403884  call    abort\n40381c  mov     dword  ptr  [rsp], esi\n40381f  mov     rcx, rsp\n403822  mov     rdx, -0x1\n403829  mov     rsi, rax\n40382c  mov     qword  ptr  [rsp+0x4], 0x0\n403835  mov     qword  ptr  [rsp+0xc], 0x0\n40383e  mov     qword  ptr  [rsp+0x14], 0x0\n403847  mov     qword  ptr  [rsp+0x1c], 0x0\n403850  mov     qword  ptr  [rsp+0x24], 0x0\n403859  mov     qword  ptr  [rsp+0x2c], 0x0\n403862  mov     dword  ptr  [rsp+0x34], 0x0\n40386a  call    quotearg_n_options\n40386f  mov     rcx, qword  ptr  [rsp+0x38]\n40387d  jne     0x403889\n40387f  add     rsp, 0x48\n403883  ret     \n403889  call    __stack_chk_fail\n,\nquotearg_n_optionssub_40388e
,40388e  nop     \n,Name the following assembly function:\n40388e  nop     \n,\nNOP (No Operation)quotearg_n_style_mem
,403890  sub     rsp, 0x48\n403894  mov     rax, rdx\n403897  mov     rdx, rcx\n4038a3  mov     qword  ptr  [rsp+0x38], rcx\n4038a8  xor     ecx, ecx\n4038aa  cmp     esi, 0xa\n4038ad  je      0x403910\n403910  call    abort\n4038af  mov     dword  ptr  [rsp], esi\n4038b2  mov     rcx, rsp\n4038b5  mov     rsi, rax\n4038b8  mov     qword  ptr  [rsp+0x4], 0x0\n4038c1  mov     qword  ptr  [rsp+0xc], 0x0\n4038ca  mov     qword  ptr  [rsp+0x14], 0x0\n4038d3  mov     qword  ptr  [rsp+0x1c], 0x0\n4038dc  mov     qword  ptr  [rsp+0x24], 0x0\n4038e5  mov     qword  ptr  [rsp+0x2c], 0x0\n4038ee  mov     dword  ptr  [rsp+0x34], 0x0\n4038f6  call    quotearg_n_options\n4038fb  mov     rdx, qword  ptr  [rsp+0x38]\n403909  jne     0x403915\n40390b  add     rsp, 0x48\n40390f  ret     \n403915  call    __stack_chk_fail\n,Name the following assembly function:\n403890  sub     rsp, 0x48\n403894  mov     rax, rdx\n403897  mov     rdx, rcx\n4038a3  mov     qword  ptr  [rsp+0x38], rcx\n4038a8  xor     ecx, ecx\n4038aa  cmp     esi, 0xa\n4038ad  je      0x403910\n403910  call    abort\n4038af  mov     dword  ptr  [rsp], esi\n4038b2  mov     rcx, rsp\n4038b5  mov     rsi, rax\n4038b8  mov     qword  ptr  [rsp+0x4], 0x0\n4038c1  mov     qword  ptr  [rsp+0xc], 0x0\n4038ca  mov     qword  ptr  [rsp+0x14], 0x0\n4038d3  mov     qword  ptr  [rsp+0x1c], 0x0\n4038dc  mov     qword  ptr  [rsp+0x24], 0x0\n4038e5  mov     qword  ptr  [rsp+0x2c], 0x0\n4038ee  mov     dword  ptr  [rsp+0x34], 0x0\n4038f6  call    quotearg_n_options\n4038fb  mov     rdx, qword  ptr  [rsp+0x38]\n403909  jne     0x403915\n40390b  add     rsp, 0x48\n40390f  ret     \n403915  call    __stack_chk_fail\n,\nquotearg_n_optionssub_40391a
,40391a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40391a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_style
,403920  mov     rdx, rsi\n403923  mov     esi, edi\n403925  xor     edi, edi\n403927  jmp     quotearg_n_style\n,Name the following assembly function:\n403920  mov     rdx, rsi\n403923  mov     esi, edi\n403925  xor     edi, edi\n403927  jmp     quotearg_n_style\n,\nquotearg_n_style()sub_40392c
,40392c  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40392c  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)quotearg_style_mem
,403930  mov     rcx, rdx\n403933  mov     rdx, rsi\n403936  mov     esi, edi\n403938  xor     edi, edi\n40393a  jmp     quotearg_n_style_mem\n,Name the following assembly function:\n403930  mov     rcx, rdx\n403933  mov     rdx, rsi\n403936  mov     esi, edi\n403938  xor     edi, edi\n40393a  jmp     quotearg_n_style_mem\n,\nquotearg_n_style_mem functionsub_40393f
,40393f  nop     \n,Name the following assembly function:\n40393f  nop     \n,\nNOP (No Operation)quotearg_char_mem
,403940  sub     rsp, 0x48\n403944  mov     ecx, edx\n40394f  mov     qword  ptr  [rsp+0x38], rax\n403954  xor     eax, eax\n403956  mov     rax,  [0x607230]\n40395d  mov     r8, rsp\n403960  and     ecx, 0x1f\n403963  movdqa  xmm0,  [default_quoting_options]\n40396b  mov     qword  ptr  [rsp+0x30], rax\n403970  mov     eax, edx\n403972  movaps  xmmword  ptr  [rsp], xmm0\n403976  shr     al, 0x5\n403979  movzx   eax, al\n40397c  lea     r9,  [r8+rax*0x4+0x8]\n403981  movdqa  xmm0,  [0x607210]\n403989  movaps  xmmword  ptr  [rsp+0x10], xmm0\n40398e  movdqa  xmm0,  [0x607220]\n403996  movaps  xmmword  ptr  [rsp+0x20], xmm0\n40399b  mov     edx, dword  ptr  [r9]\n40399e  mov     eax, edx\n4039a0  shr     eax, cl\n4039a2  not     eax\n4039a4  and     eax, 0x1\n4039a7  shl     eax, cl\n4039a9  mov     rcx, r8\n4039ac  xor     eax, edx\n4039ae  mov     rdx, rsi\n4039b1  mov     rsi, rdi\n4039b4  mov     dword  ptr  [r9], eax\n4039b7  xor     edi, edi\n4039b9  call    quotearg_n_options\n4039be  mov     rsi, qword  ptr  [rsp+0x38]\n4039cc  jne     0x4039d3\n4039ce  add     rsp, 0x48\n4039d2  ret     \n4039d3  call    __stack_chk_fail\n,Name the following assembly function:\n403940  sub     rsp, 0x48\n403944  mov     ecx, edx\n40394f  mov     qword  ptr  [rsp+0x38], rax\n403954  xor     eax, eax\n403956  mov     rax,  [0x607230]\n40395d  mov     r8, rsp\n403960  and     ecx, 0x1f\n403963  movdqa  xmm0,  [default_quoting_options]\n40396b  mov     qword  ptr  [rsp+0x30], rax\n403970  mov     eax, edx\n403972  movaps  xmmword  ptr  [rsp], xmm0\n403976  shr     al, 0x5\n403979  movzx   eax, al\n40397c  lea     r9,  [r8+rax*0x4+0x8]\n403981  movdqa  xmm0,  [0x607210]\n403989  movaps  xmmword  ptr  [rsp+0x10], xmm0\n40398e  movdqa  xmm0,  [0x607220]\n403996  movaps  xmmword  ptr  [rsp+0x20], xmm0\n40399b  mov     edx, dword  ptr  [r9]\n40399e  mov     eax, edx\n4039a0  shr     eax, cl\n4039a2  not     eax\n4039a4  and     eax, 0x1\n4039a7  shl     eax, cl\n4039a9  mov     rcx, r8\n4039ac  xor     eax, edx\n4039ae  mov     rdx, rsi\n4039b1  mov     rsi, rdi\n4039b4  mov     dword  ptr  [r9], eax\n4039b7  xor     edi, edi\n4039b9  call    quotearg_n_options\n4039be  mov     rsi, qword  ptr  [rsp+0x38]\n4039cc  jne     0x4039d3\n4039ce  add     rsp, 0x48\n4039d2  ret     \n4039d3  call    __stack_chk_fail\n,\nquotearg_n_optionssub_4039d8
,4039d8  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4039d8  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_char
,4039e0  movsx   edx, sil\n4039e4  mov     rsi, -0x1\n4039eb  jmp     quotearg_char_mem\n,Name the following assembly function:\n4039e0  movsx   edx, sil\n4039e4  mov     rsi, -0x1\n4039eb  jmp     quotearg_char_mem\n,\nquotearg_char_memquotearg_colon
,4039f0  mov     edx, 0x3a\n4039f5  mov     rsi, -0x1\n4039fc  jmp     quotearg_char_mem\n,Name the following assembly function:\n4039f0  mov     edx, 0x3a\n4039f5  mov     rsi, -0x1\n4039fc  jmp     quotearg_char_mem\n,\nquotearg_char_memsub_403a01
,403a01  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n403a01  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_colon_mem
,403a10  mov     edx, 0x3a\n403a15  jmp     quotearg_char_mem\n,Name the following assembly function:\n403a10  mov     edx, 0x3a\n403a15  jmp     quotearg_char_mem\n,\nquotearg_char_memsub_403a1a
,403a1a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n403a1a  nop     word  ptr  [rax+rax]\n,\nNOP (No Operation)quotearg_n_style_colon
,403a20  sub     rsp, 0x48\n403a24  mov     rax, rdx\n403a30  mov     qword  ptr  [rsp+0x38], rdx\n403a35  xor     edx, edx\n403a37  cmp     esi, 0xa\n403a3a  je      0x403aa4\n403aa4  call    abort\n403a3c  mov     dword  ptr  [rsp], esi\n403a3f  mov     rcx, rsp\n403a42  mov     rdx, -0x1\n403a49  mov     rsi, rax\n403a4c  mov     qword  ptr  [rsp+0x4], 0x0\n403a55  mov     qword  ptr  [rsp+0xc], 0x4000000\n403a5e  mov     qword  ptr  [rsp+0x14], 0x0\n403a67  mov     qword  ptr  [rsp+0x1c], 0x0\n403a70  mov     qword  ptr  [rsp+0x24], 0x0\n403a79  mov     qword  ptr  [rsp+0x2c], 0x0\n403a82  mov     dword  ptr  [rsp+0x34], 0x0\n403a8a  call    quotearg_n_options\n403a8f  mov     rcx, qword  ptr  [rsp+0x38]\n403a9d  jne     0x403aa9\n403a9f  add     rsp, 0x48\n403aa3  ret     \n403aa9  call    __stack_chk_fail\n,Name the following assembly function:\n403a20  sub     rsp, 0x48\n403a24  mov     rax, rdx\n403a30  mov     qword  ptr  [rsp+0x38], rdx\n403a35  xor     edx, edx\n403a37  cmp     esi, 0xa\n403a3a  je      0x403aa4\n403aa4  call    abort\n403a3c  mov     dword  ptr  [rsp], esi\n403a3f  mov     rcx, rsp\n403a42  mov     rdx, -0x1\n403a49  mov     rsi, rax\n403a4c  mov     qword  ptr  [rsp+0x4], 0x0\n403a55  mov     qword  ptr  [rsp+0xc], 0x4000000\n403a5e  mov     qword  ptr  [rsp+0x14], 0x0\n403a67  mov     qword  ptr  [rsp+0x1c], 0x0\n403a70  mov     qword  ptr  [rsp+0x24], 0x0\n403a79  mov     qword  ptr  [rsp+0x2c], 0x0\n403a82  mov     dword  ptr  [rsp+0x34], 0x0\n403a8a  call    quotearg_n_options\n403a8f  mov     rcx, qword  ptr  [rsp+0x38]\n403a9d  jne     0x403aa9\n403a9f  add     rsp, 0x48\n403aa3  ret     \n403aa9  call    __stack_chk_fail\n,\nquotearg_n_optionssub_403aae
,403aae  nop     \n,Name the following assembly function:\n403aae  nop     \n,\nNOP (No Operation)quotearg_n_custom_mem
,403ab0  sub     rsp, 0x48\n403ab4  mov     r9, rcx\n403ab7  mov     rcx,  [0x607230]\n403abe  movdqa  xmm0,  [default_quoting_options]\n403acf  mov     qword  ptr  [rsp+0x38], rax\n403ad4  xor     eax, eax\n403ad6  movaps  xmmword  ptr  [rsp], xmm0\n403ada  test    rsi, rsi\n403add  mov     qword  ptr  [rsp+0x30], rcx\n403ae2  mov     dword  ptr  [rsp], 0xa\n403ae9  movdqa  xmm0,  [0x607210]\n403af1  movaps  xmmword  ptr  [rsp+0x10], xmm0\n403af6  movdqa  xmm0,  [0x607220]\n403afe  movaps  xmmword  ptr  [rsp+0x20], xmm0\n403b03  je      0x403b37\n403b37  call    abort\n403b05  test    rdx, rdx\n403b08  je      0x403b37\n403b0a  mov     qword  ptr  [rsp+0x28], rsi\n403b0f  mov     qword  ptr  [rsp+0x30], rdx\n403b14  mov     rcx, rsp\n403b17  mov     rdx, r8\n403b1a  mov     rsi, r9\n403b1d  call    quotearg_n_options\n403b22  mov     rdi, qword  ptr  [rsp+0x38]\n403b30  jne     0x403b3c\n403b32  add     rsp, 0x48\n403b36  ret     \n403b3c  call    __stack_chk_fail\n,Name the following assembly function:\n403ab0  sub     rsp, 0x48\n403ab4  mov     r9, rcx\n403ab7  mov     rcx,  [0x607230]\n403abe  movdqa  xmm0,  [default_quoting_options]\n403acf  mov     qword  ptr  [rsp+0x38], rax\n403ad4  xor     eax, eax\n403ad6  movaps  xmmword  ptr  [rsp], xmm0\n403ada  test    rsi, rsi\n403add  mov     qword  ptr  [rsp+0x30], rcx\n403ae2  mov     dword  ptr  [rsp], 0xa\n403ae9  movdqa  xmm0,  [0x607210]\n403af1  movaps  xmmword  ptr  [rsp+0x10], xmm0\n403af6  movdqa  xmm0,  [0x607220]\n403afe  movaps  xmmword  ptr  [rsp+0x20], xmm0\n403b03  je      0x403b37\n403b37  call    abort\n403b05  test    rdx, rdx\n403b08  je      0x403b37\n403b0a  mov     qword  ptr  [rsp+0x28], rsi\n403b0f  mov     qword  ptr  [rsp+0x30], rdx\n403b14  mov     rcx, rsp\n403b17  mov     rdx, r8\n403b1a  mov     rsi, r9\n403b1d  call    quotearg_n_options\n403b22  mov     rdi, qword  ptr  [rsp+0x38]\n403b30  jne     0x403b3c\n403b32  add     rsp, 0x48\n403b36  ret     \n403b3c  call    __stack_chk_fail\n,\nquotearg_n_optionssub_403b41
,403b41  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n403b41  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_n_custom
,403b50  mov     r8, -0x1\n403b57  jmp     quotearg_n_custom_mem\n,Name the following assembly function:\n403b50  mov     r8, -0x1\n403b57  jmp     quotearg_n_custom_mem\n,\nquotearg_n_custom_memsub_403b5c
,403b5c  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403b5c  nop     dword  ptr  [rax]\n,No operation (NOP)quotearg_custom
,403b60  mov     rcx, rdx\n403b63  mov     r8, -0x1\n403b6a  mov     rdx, rsi\n403b6d  mov     rsi, rdi\n403b70  xor     edi, edi\n403b72  jmp     quotearg_n_custom_mem\n,Name the following assembly function:\n403b60  mov     rcx, rdx\n403b63  mov     r8, -0x1\n403b6a  mov     rdx, rsi\n403b6d  mov     rsi, rdi\n403b70  xor     edi, edi\n403b72  jmp     quotearg_n_custom_mem\n,\nquotearg_n_custom_memsub_403b77
,403b77  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n403b77  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)quotearg_custom_mem
,403b80  mov     r8, rcx\n403b83  mov     rcx, rdx\n403b86  mov     rdx, rsi\n403b89  mov     rsi, rdi\n403b8c  xor     edi, edi\n403b8e  jmp     quotearg_n_custom_mem\n,Name the following assembly function:\n403b80  mov     r8, rcx\n403b83  mov     rcx, rdx\n403b86  mov     rdx, rsi\n403b89  mov     rsi, rdi\n403b8c  xor     edi, edi\n403b8e  jmp     quotearg_n_custom_mem\n,\nquotearg_n_custom_mem functionsub_403b93
,403b93  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403b93  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)quote_n_mem
,403ba0  lea     rcx,  [quote_quoting_options]\n403ba7  jmp     quotearg_n_options\n,Name the following assembly function:\n403ba0  lea     rcx,  [quote_quoting_options]\n403ba7  jmp     quotearg_n_options\n,\nquotearg_n_optionssub_403bac
,403bac  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403bac  nop     dword  ptr  [rax]\n,\nNOP (No Operation)quote_mem
,403bb0  lea     rcx,  [quote_quoting_options]\n403bb7  mov     rdx, rsi\n403bba  mov     rsi, rdi\n403bbd  xor     edi, edi\n403bbf  jmp     quotearg_n_options\n,Name the following assembly function:\n403bb0  lea     rcx,  [quote_quoting_options]\n403bb7  mov     rdx, rsi\n403bba  mov     rsi, rdi\n403bbd  xor     edi, edi\n403bbf  jmp     quotearg_n_options\n,\nquotearg_n_optionssub_403bc4
,403bc4  nop     \n,Name the following assembly function:\n403bc4  nop     \n,\nNOP (No Operation)quote_n
,403bd0  lea     rcx,  [quote_quoting_options]\n403bd7  mov     rdx, -0x1\n403bde  jmp     quotearg_n_options\n,Name the following assembly function:\n403bd0  lea     rcx,  [quote_quoting_options]\n403bd7  mov     rdx, -0x1\n403bde  jmp     quotearg_n_options\n,\nquotearg_n_optionssub_403be3
,403be3  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403be3  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)quote
,403bf0  lea     rcx,  [quote_quoting_options]\n403bf7  mov     rsi, rdi\n403bfa  mov     rdx, -0x1\n403c01  xor     edi, edi\n403c03  jmp     quotearg_n_options\n,Name the following assembly function:\n403bf0  lea     rcx,  [quote_quoting_options]\n403bf7  mov     rsi, rdi\n403bfa  mov     rdx, -0x1\n403c01  xor     edi, edi\n403c03  jmp     quotearg_n_options\n,\nquotearg_n_optionssub_403c08
,403c08  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n403c08  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)safe_write
,403c10  push    r13\n403c12  push    r12\n403c14  mov     r13d, edi\n403c17  push    rbp\n403c18  push    rbx\n403c19  mov     r12, rsi\n403c1c  mov     rbx, rdx\n403c1f  sub     rsp, 0x8\n403c23  nop     dword  ptr  [rax+rax]\n\n403c28  mov     rdx, rbx\n403c2b  mov     rsi, r12\n403c2e  mov     edi, r13d\n403c31  call    write\n403c36  test    rax, rax\n403c39  mov     rbp, rax\n403c3c  jns     0x403c60\n403c3e  call    __errno_location\n403c60  add     rsp, 0x8\n403c64  mov     rax, rbp\n403c67  pop     rbx\n403c68  pop     rbp\n403c69  pop     r12\n403c6b  pop     r13\n403c6d  ret     \n403c43  mov     eax, dword  ptr  [rax]\n403c45  cmp     eax, 0x4\n403c48  je      0x403c28\n403c28  mov     rdx, rbx\n403c2b  mov     rsi, r12\n403c2e  mov     edi, r13d\n403c31  call    write\n403c4a  cmp     eax, 0x16\n403c4d  jne     0x403c60\n403c4f  cmp     rbx, 0x7ff00000\n403c56  jbe     0x403c60\n403c58  mov     ebx, 0x7ff00000\n403c5d  jmp     0x403c28\n,Name the following assembly function:\n403c10  push    r13\n403c12  push    r12\n403c14  mov     r13d, edi\n403c17  push    rbp\n403c18  push    rbx\n403c19  mov     r12, rsi\n403c1c  mov     rbx, rdx\n403c1f  sub     rsp, 0x8\n403c23  nop     dword  ptr  [rax+rax]\n\n403c28  mov     rdx, rbx\n403c2b  mov     rsi, r12\n403c2e  mov     edi, r13d\n403c31  call    write\n403c36  test    rax, rax\n403c39  mov     rbp, rax\n403c3c  jns     0x403c60\n403c3e  call    __errno_location\n403c60  add     rsp, 0x8\n403c64  mov     rax, rbp\n403c67  pop     rbx\n403c68  pop     rbp\n403c69  pop     r12\n403c6b  pop     r13\n403c6d  ret     \n403c43  mov     eax, dword  ptr  [rax]\n403c45  cmp     eax, 0x4\n403c48  je      0x403c28\n403c28  mov     rdx, rbx\n403c2b  mov     rsi, r12\n403c2e  mov     edi, r13d\n403c31  call    write\n403c4a  cmp     eax, 0x16\n403c4d  jne     0x403c60\n403c4f  cmp     rbx, 0x7ff00000\n403c56  jbe     0x403c60\n403c58  mov     ebx, 0x7ff00000\n403c5d  jmp     0x403c28\n,\nFunction Name: writesub_403c5f
,403c5f  nop     \n,Name the following assembly function:\n403c5f  nop     \n,\nNOP (No Operation)sub_403c6e
,403c6e  nop     \n,Name the following assembly function:\n403c6e  nop     \n,\nNOP (No Operation)version_etc_arn
,403c70  push    r15\n403c72  push    r14\n403c74  push    r13\n403c76  push    r12\n403c78  mov     r12, r9\n403c7b  push    rbp\n403c7c  push    rbx\n403c7d  mov     rbp, rdi\n403c80  mov     rbx, r8\n403c83  sub     rsp, 0x28\n403c87  test    rsi, rsi\n403c8a  je      0x403da8\n403da8  mov     r8, rcx\n403dab  mov     rcx, rdx\n403dae  lea     rdx,  [0x405074]\n403db5  mov     esi, 0x1\n403dba  xor     eax, eax\n403dbc  call    __fprintf_chk\n403c90  mov     r8, rdx\n403c93  lea     rdx,  [0x405068]\n403c9a  mov     r9, rcx\n403c9d  xor     eax, eax\n403c9f  mov     rcx, rsi\n403ca2  mov     esi, 0x1\n403ca7  call    __fprintf_chk\n403dc1  jmp     0x403cac\n403cac  lea     rsi,  [0x40507b]\n403cb3  xor     edi, edi\n403cb5  mov     edx, 0x5\n403cba  call    dcgettext\n403cbf  lea     rdx,  [version_etc_copyright]\n403cc6  mov     rcx, rax\n403cc9  mov     r8d, 0x7e3\n403ccf  mov     esi, 0x1\n403cd4  mov     rdi, rbp\n403cd7  xor     eax, eax\n403cd9  call    __fprintf_chk\n403cde  lea     rsi,  [0x405108]\n403ce5  xor     edi, edi\n403ce7  mov     edx, 0x5\n403cec  call    dcgettext\n403cf1  mov     rsi, rbp\n403cf4  mov     rdi, rax\n403cf7  call    fputs_unlocked\n403cfc  cmp     r12, 0x9\n403d00  ja      0x404040\n403d06  lea     rdx,  [0x405368]\n403d0d  movsxd  rax, dword  ptr  [rdx+r12*0x4]\n403d11  add     rax, rdx\n403d14  jmp     rax\n404040  mov     r10, qword  ptr  [rbx+0x40]\n404044  mov     r9, qword  ptr  [rbx+0x38]\n404048  mov     edx, 0x5\n40404d  mov     rax, qword  ptr  [rbx+0x10]\n404051  mov     r8, qword  ptr  [rbx+0x8]\n404055  lea     rsi,  [0x4052e0]\n40405c  mov     r13, qword  ptr  [rbx+0x30]\n404060  mov     r12, qword  ptr  [rbx+0x28]\n404064  mov     r15, qword  ptr  [rbx+0x20]\n404068  mov     r14, qword  ptr  [rbx+0x18]\n40406c  mov     qword  ptr  [rsp+0x18], r10\n404071  mov     qword  ptr  [rsp+0x10], r9\n404076  mov     qword  ptr  [rsp], rax\n40407a  mov     qword  ptr  [rsp+0x8], r8\n40407f  mov     rbx, qword  ptr  [rbx]\n404082  jmp     0x403e12\n403f00  lea     rsi,  [0x4051d8]\n403f07  mov     edx, 0x5\n403f0c  xor     edi, edi\n403f0e  mov     r14, qword  ptr  [rbx+0x18]\n403f12  mov     r13, qword  ptr  [rbx+0x10]\n403f16  mov     r12, qword  ptr  [rbx+0x8]\n403f1a  mov     rbx, qword  ptr  [rbx]\n403f1d  call    dcgettext\n403d20  mov     r9, qword  ptr  [rbx+0x38]\n403d24  mov     rax, qword  ptr  [rbx+0x10]\n403d28  lea     rsi,  [0x405278]\n403d2f  mov     r8, qword  ptr  [rbx+0x8]\n403d33  mov     edx, 0x5\n403d38  xor     edi, edi\n403d3a  mov     r13, qword  ptr  [rbx+0x30]\n403d3e  mov     r12, qword  ptr  [rbx+0x28]\n403d42  mov     qword  ptr  [rsp+0x10], r9\n403d47  mov     r15, qword  ptr  [rbx+0x20]\n403d4b  mov     r14, qword  ptr  [rbx+0x18]\n403d4f  mov     qword  ptr  [rsp], rax\n403d53  mov     qword  ptr  [rsp+0x8], r8\n403d58  mov     rbx, qword  ptr  [rbx]\n403d5b  call    dcgettext\n403e28  mov     rbx, qword  ptr  [rbx]\n403e2b  lea     rsi,  [0x40507f]\n403e32  mov     edx, 0x5\n403e37  xor     edi, edi\n403e39  call    dcgettext\n403e68  mov     r12, qword  ptr  [rbx+0x8]\n403e6c  lea     rsi,  [0x40508f]\n403e73  mov     rbx, qword  ptr  [rbx]\n403e76  mov     edx, 0x5\n403e7b  xor     edi, edi\n403e7d  call    dcgettext\n403f88  mov     r8, qword  ptr  [rbx+0x8]\n403f8c  mov     r12, qword  ptr  [rbx+0x28]\n403f90  lea     rsi,  [0x405220]\n403f97  mov     r15, qword  ptr  [rbx+0x20]\n403f9b  mov     r14, qword  ptr  [rbx+0x18]\n403f9f  mov     edx, 0x5\n403fa4  mov     r13, qword  ptr  [rbx+0x10]\n403fa8  xor     edi, edi\n403faa  mov     rbx, qword  ptr  [rbx]\n403fad  mov     qword  ptr  [rsp], r8\n403fb1  call    dcgettext\n403eb0  mov     r13, qword  ptr  [rbx+0x10]\n403eb4  mov     r12, qword  ptr  [rbx+0x8]\n403eb8  lea     rsi,  [0x4050a6]\n403ebf  mov     rbx, qword  ptr  [rbx]\n403ec2  mov     edx, 0x5\n403ec7  xor     edi, edi\n403ec9  call    dcgettext\n403ff0  mov     r9, qword  ptr  [rbx+0x10]\n403ff4  mov     r13, qword  ptr  [rbx+0x30]\n403ff8  lea     rsi,  [0x405248]\n403fff  mov     r12, qword  ptr  [rbx+0x28]\n404003  mov     r15, qword  ptr  [rbx+0x20]\n404007  mov     edx, 0x5\n40400c  mov     r14, qword  ptr  [rbx+0x18]\n404010  mov     r8, qword  ptr  [rbx+0x8]\n404014  xor     edi, edi\n404016  mov     qword  ptr  [rsp+0x8], r9\n40401b  mov     rbx, qword  ptr  [rbx]\n40401e  mov     qword  ptr  [rsp], r8\n404022  call    dcgettext\n403dd0  mov     r10, qword  ptr  [rbx+0x40]\n403dd4  mov     r9, qword  ptr  [rbx+0x38]\n403dd8  lea     rsi,  [0x4052a8]\n403ddf  mov     rax, qword  ptr  [rbx+0x10]\n403de3  mov     r8, qword  ptr  [rbx+0x8]\n403de7  mov     edx, 0x5\n403dec  mov     r13, qword  ptr  [rbx+0x30]\n403df0  mov     r12, qword  ptr  [rbx+0x28]\n403df4  mov     r15, qword  ptr  [rbx+0x20]\n403df8  mov     r14, qword  ptr  [rbx+0x18]\n403dfc  mov     rbx, qword  ptr  [rbx]\n403dff  mov     qword  ptr  [rsp+0x18], r10\n403e04  mov     qword  ptr  [rsp+0x10], r9\n403e09  mov     qword  ptr  [rsp], rax\n403e0d  mov     qword  ptr  [rsp+0x8], r8\n\n403e12  xor     edi, edi\n403e14  call    dcgettext\n403d96  add     rsp, 0x28\n403d9a  pop     rbx\n403d9b  pop     rbp\n403d9c  pop     r12\n403d9e  pop     r13\n403da0  pop     r14\n403da2  pop     r15\n403da4  ret     \n403f58  mov     r15, qword  ptr  [rbx+0x20]\n403f5c  lea     rsi,  [0x4051f8]\n403f63  mov     edx, 0x5\n403f68  xor     edi, edi\n403f6a  mov     r14, qword  ptr  [rbx+0x18]\n403f6e  mov     r13, qword  ptr  [rbx+0x10]\n403f72  mov     r12, qword  ptr  [rbx+0x8]\n403f76  mov     rbx, qword  ptr  [rbx]\n403f79  call    dcgettext\n403e12  xor     edi, edi\n403e14  call    dcgettext\n403f22  sub     rsp, 0x8\n\n403f26  push    r14\n403f28  mov     rdx, rax\n403f2b  mov     r9, r13\n403f2e  mov     r8, r12\n403f31  mov     rcx, rbx\n403f34  mov     rdi, rbp\n403f37  mov     esi, 0x1\n403f3c  xor     eax, eax\n403f3e  call    __fprintf_chk\n403d60  sub     rsp, 0x8\n\n403d64  mov     r9, qword  ptr  [rsp+0x18]\n403d69  mov     rdx, rax\n403d6c  mov     rcx, rbx\n403d6f  mov     esi, 0x1\n403d74  mov     rdi, rbp\n403d77  xor     eax, eax\n403d79  push    r9\n403d7b  push    r13\n403d7d  push    r12\n403d7f  push    r15\n403d81  push    r14\n403d83  mov     r9, qword  ptr  [rsp+0x30]\n403d88  mov     r8, qword  ptr  [rsp+0x38]\n403d8d  call    __fprintf_chk\n403e3e  add     rsp, 0x28\n403e42  mov     rcx, rbx\n403e45  mov     rdi, rbp\n403e48  pop     rbx\n403e49  pop     rbp\n403e4a  pop     r12\n403e4c  pop     r13\n403e4e  pop     r14\n403e50  pop     r15\n403e52  mov     rdx, rax\n403e55  mov     esi, 0x1\n403e5a  xor     eax, eax\n403e5c  jmp     __fprintf_chk\n403e82  add     rsp, 0x28\n403e86  mov     r8, r12\n403e89  mov     rcx, rbx\n403e8c  mov     rdi, rbp\n403e8f  mov     rdx, rax\n403e92  mov     esi, 0x1\n403e97  pop     rbx\n403e98  pop     rbp\n403e99  pop     r12\n403e9b  pop     r13\n403e9d  pop     r14\n403e9f  pop     r15\n403ea1  xor     eax, eax\n403ea3  jmp     __fprintf_chk\n403fb6  sub     rsp, 0x8\n403fba  mov     r9, r13\n403fbd  push    r12\n403fbf  push    r15\n403fc1  push    r14\n\n403fc3  mov     r8, qword  ptr  [rsp+0x20]\n403fc8  mov     rcx, rbx\n403fcb  mov     rdx, rax\n403fce  mov     rdi, rbp\n403fd1  mov     esi, 0x1\n403fd6  xor     eax, eax\n403fd8  call    __fprintf_chk\n403ece  add     rsp, 0x28\n403ed2  mov     r9, r13\n403ed5  mov     r8, r12\n403ed8  mov     rcx, rbx\n403edb  mov     rdi, rbp\n403ede  mov     rdx, rax\n403ee1  pop     rbx\n403ee2  pop     rbp\n403ee3  pop     r12\n403ee5  pop     r13\n403ee7  pop     r14\n403ee9  pop     r15\n403eeb  mov     esi, 0x1\n403ef0  xor     eax, eax\n403ef2  jmp     __fprintf_chk\n404027  push    r13\n404029  push    r12\n40402b  push    r15\n40402d  push    r14\n40402f  mov     r9, qword  ptr  [rsp+0x28]\n404034  jmp     0x403fc3\n403e19  mov     r10, qword  ptr  [rsp+0x18]\n403e1e  push    r10\n403e20  jmp     0x403d64\n403f7e  push    r15\n403f80  jmp     0x403f26\n403f43  pop     rax\n403f44  pop     rdx\n403f45  add     rsp, 0x28\n403f49  pop     rbx\n403f4a  pop     rbp\n403f4b  pop     r12\n403f4d  pop     r13\n403f4f  pop     r14\n403f51  pop     r15\n403f53  ret     \n403d92  add     rsp, 0x30\n\n403d96  add     rsp, 0x28\n403d9a  pop     rbx\n403d9b  pop     rbp\n403d9c  pop     r12\n403d9e  pop     r13\n403da0  pop     r14\n403da2  pop     r15\n403da4  ret     \n403fdd  add     rsp, 0x20\n403fe1  add     rsp, 0x28\n403fe5  pop     rbx\n403fe6  pop     rbp\n403fe7  pop     r12\n403fe9  pop     r13\n403feb  pop     r14\n403fed  pop     r15\n403fef  ret     \n403fc3  mov     r8, qword  ptr  [rsp+0x20]\n403fc8  mov     rcx, rbx\n403fcb  mov     rdx, rax\n403fce  mov     rdi, rbp\n403fd1  mov     esi, 0x1\n403fd6  xor     eax, eax\n403fd8  call    __fprintf_chk\n403d64  mov     r9, qword  ptr  [rsp+0x18]\n403d69  mov     rdx, rax\n403d6c  mov     rcx, rbx\n403d6f  mov     esi, 0x1\n403d74  mov     rdi, rbp\n403d77  xor     eax, eax\n403d79  push    r9\n403d7b  push    r13\n403d7d  push    r12\n403d7f  push    r15\n403d81  push    r14\n403d83  mov     r9, qword  ptr  [rsp+0x30]\n403d88  mov     r8, qword  ptr  [rsp+0x38]\n403d8d  call    __fprintf_chk\n403f26  push    r14\n403f28  mov     rdx, rax\n403f2b  mov     r9, r13\n403f2e  mov     r8, r12\n403f31  mov     rcx, rbx\n403f34  mov     rdi, rbp\n403f37  mov     esi, 0x1\n403f3c  xor     eax, eax\n403f3e  call    __fprintf_chk\n,Name the following assembly function:\n403c70  push    r15\n403c72  push    r14\n403c74  push    r13\n403c76  push    r12\n403c78  mov     r12, r9\n403c7b  push    rbp\n403c7c  push    rbx\n403c7d  mov     rbp, rdi\n403c80  mov     rbx, r8\n403c83  sub     rsp, 0x28\n403c87  test    rsi, rsi\n403c8a  je      0x403da8\n403da8  mov     r8, rcx\n403dab  mov     rcx, rdx\n403dae  lea     rdx,  [0x405074]\n403db5  mov     esi, 0x1\n403dba  xor     eax, eax\n403dbc  call    __fprintf_chk\n403c90  mov     r8, rdx\n403c93  lea     rdx,  [0x405068]\n403c9a  mov     r9, rcx\n403c9d  xor     eax, eax\n403c9f  mov     rcx, rsi\n403ca2  mov     esi, 0x1\n403ca7  call    __fprintf_chk\n403dc1  jmp     0x403cac\n403cac  lea     rsi,  [0x40507b]\n403cb3  xor     edi, edi\n403cb5  mov     edx, 0x5\n403cba  call    dcgettext\n403cbf  lea     rdx,  [version_etc_copyright]\n403cc6  mov     rcx, rax\n403cc9  mov     r8d, 0x7e3\n403ccf  mov     esi, 0x1\n403cd4  mov     rdi, rbp\n403cd7  xor     eax, eax\n403cd9  call    __fprintf_chk\n403cde  lea     rsi,  [0x405108]\n403ce5  xor     edi, edi\n403ce7  mov     edx, 0x5\n403cec  call    dcgettext\n403cf1  mov     rsi, rbp\n403cf4  mov     rdi, rax\n403cf7  call    fputs_unlocked\n403cfc  cmp     r12, 0x9\n403d00  ja      0x404040\n403d06  lea     rdx,  [0x405368]\n403d0d  movsxd  rax, dword  ptr  [rdx+r12*0x4]\n403d11  add     rax, rdx\n403d14  jmp     rax\n404040  mov     r10, qword  ptr  [rbx+0x40]\n404044  mov     r9, qword  ptr  [rbx+0x38]\n404048  mov     edx, 0x5\n40404d  mov     rax, qword  ptr  [rbx+0x10]\n404051  mov     r8, qword  ptr  [rbx+0x8]\n404055  lea     rsi,  [0x4052e0]\n40405c  mov     r13, qword  ptr  [rbx+0x30]\n404060  mov     r12, qword  ptr  [rbx+0x28]\n404064  mov     r15, qword  ptr  [rbx+0x20]\n404068  mov     r14, qword  ptr  [rbx+0x18]\n40406c  mov     qword  ptr  [rsp+0x18], r10\n404071  mov     qword  ptr  [rsp+0x10], r9\n404076  mov     qword  ptr  [rsp], rax\n40407a  mov     qword  ptr  [rsp+0x8], r8\n40407f  mov     rbx, qword  ptr  [rbx]\n404082  jmp     0x403e12\n403f00  lea     rsi,  [0x4051d8]\n403f07  mov     edx, 0x5\n403f0c  xor     edi, edi\n403f0e  mov     r14, qword  ptr  [rbx+0x18]\n403f12  mov     r13, qword  ptr  [rbx+0x10]\n403f16  mov     r12, qword  ptr  [rbx+0x8]\n403f1a  mov     rbx, qword  ptr  [rbx]\n403f1d  call    dcgettext\n403d20  mov     r9, qword  ptr  [rbx+0x38]\n403d24  mov     rax, qword  ptr  [rbx+0x10]\n403d28  lea     rsi,  [0x405278]\n403d2f  mov     r8, qword  ptr  [rbx+0x8]\n403d33  mov     edx, 0x5\n403d38  xor     edi, edi\n403d3a  mov     r13, qword  ptr  [rbx+0x30]\n403d3e  mov     r12, qword  ptr  [rbx+0x28]\n403d42  mov     qword  ptr  [rsp+0x10], r9\n403d47  mov     r15, qword  ptr  [rbx+0x20]\n403d4b  mov     r14, qword  ptr  [rbx+0x18]\n403d4f  mov     qword  ptr  [rsp], rax\n403d53  mov     qword  ptr  [rsp+0x8], r8\n403d58  mov     rbx, qword  ptr  [rbx]\n403d5b  call    dcgettext\n403e28  mov     rbx, qword  ptr  [rbx]\n403e2b  lea     rsi,  [0x40507f]\n403e32  mov     edx, 0x5\n403e37  xor     edi, edi\n403e39  call    dcgettext\n403e68  mov     r12, qword  ptr  [rbx+0x8]\n403e6c  lea     rsi,  [0x40508f]\n403e73  mov     rbx, qword  ptr  [rbx]\n403e76  mov     edx, 0x5\n403e7b  xor     edi, edi\n403e7d  call    dcgettext\n403f88  mov     r8, qword  ptr  [rbx+0x8]\n403f8c  mov     r12, qword  ptr  [rbx+0x28]\n403f90  lea     rsi,  [0x405220]\n403f97  mov     r15, qword  ptr  [rbx+0x20]\n403f9b  mov     r14, qword  ptr  [rbx+0x18]\n403f9f  mov     edx, 0x5\n403fa4  mov     r13, qword  ptr  [rbx+0x10]\n403fa8  xor     edi, edi\n403faa  mov     rbx, qword  ptr  [rbx]\n403fad  mov     qword  ptr  [rsp], r8\n403fb1  call    dcgettext\n403eb0  mov     r13, qword  ptr  [rbx+0x10]\n403eb4  mov     r12, qword  ptr  [rbx+0x8]\n403eb8  lea     rsi,  [0x4050a6]\n403ebf  mov     rbx, qword  ptr  [rbx]\n403ec2  mov     edx, 0x5\n403ec7  xor     edi, edi\n403ec9  call    dcgettext\n403ff0  mov     r9, qword  ptr  [rbx+0x10]\n403ff4  mov     r13, qword  ptr  [rbx+0x30]\n403ff8  lea     rsi,  [0x405248]\n403fff  mov     r12, qword  ptr  [rbx+0x28]\n404003  mov     r15, qword  ptr  [rbx+0x20]\n404007  mov     edx, 0x5\n40400c  mov     r14, qword  ptr  [rbx+0x18]\n404010  mov     r8, qword  ptr  [rbx+0x8]\n404014  xor     edi, edi\n404016  mov     qword  ptr  [rsp+0x8], r9\n40401b  mov     rbx, qword  ptr  [rbx]\n40401e  mov     qword  ptr  [rsp], r8\n404022  call    dcgettext\n403dd0  mov     r10, qword  ptr  [rbx+0x40]\n403dd4  mov     r9, qword  ptr  [rbx+0x38]\n403dd8  lea     rsi,  [0x4052a8]\n403ddf  mov     rax, qword  ptr  [rbx+0x10]\n403de3  mov     r8, qword  ptr  [rbx+0x8]\n403de7  mov     edx, 0x5\n403dec  mov     r13, qword  ptr  [rbx+0x30]\n403df0  mov     r12, qword  ptr  [rbx+0x28]\n403df4  mov     r15, qword  ptr  [rbx+0x20]\n403df8  mov     r14, qword  ptr  [rbx+0x18]\n403dfc  mov     rbx, qword  ptr  [rbx]\n403dff  mov     qword  ptr  [rsp+0x18], r10\n403e04  mov     qword  ptr  [rsp+0x10], r9\n403e09  mov     qword  ptr  [rsp], rax\n403e0d  mov     qword  ptr  [rsp+0x8], r8\n\n403e12  xor     edi, edi\n403e14  call    dcgettext\n403d96  add     rsp, 0x28\n403d9a  pop     rbx\n403d9b  pop     rbp\n403d9c  pop     r12\n403d9e  pop     r13\n403da0  pop     r14\n403da2  pop     r15\n403da4  ret     \n403f58  mov     r15, qword  ptr  [rbx+0x20]\n403f5c  lea     rsi,  [0x4051f8]\n403f63  mov     edx, 0x5\n403f68  xor     edi, edi\n403f6a  mov     r14, qword  ptr  [rbx+0x18]\n403f6e  mov     r13, qword  ptr  [rbx+0x10]\n403f72  mov     r12, qword  ptr  [rbx+0x8]\n403f76  mov     rbx, qword  ptr  [rbx]\n403f79  call    dcgettext\n403e12  xor     edi, edi\n403e14  call    dcgettext\n403f22  sub     rsp, 0x8\n\n403f26  push    r14\n403f28  mov     rdx, rax\n403f2b  mov     r9, r13\n403f2e  mov     r8, r12\n403f31  mov     rcx, rbx\n403f34  mov     rdi, rbp\n403f37  mov     esi, 0x1\n403f3c  xor     eax, eax\n403f3e  call    __fprintf_chk\n403d60  sub     rsp, 0x8\n\n403d64  mov     r9, qword  ptr  [rsp+0x18]\n403d69  mov     rdx, rax\n403d6c  mov     rcx, rbx\n403d6f  mov     esi, 0x1\n403d74  mov     rdi, rbp\n403d77  xor     eax, eax\n403d79  push    r9\n403d7b  push    r13\n403d7d  push    r12\n403d7f  push    r15\n403d81  push    r14\n403d83  mov     r9, qword  ptr  [rsp+0x30]\n403d88  mov     r8, qword  ptr  [rsp+0x38]\n403d8d  call    __fprintf_chk\n403e3e  add     rsp, 0x28\n403e42  mov     rcx, rbx\n403e45  mov     rdi, rbp\n403e48  pop     rbx\n403e49  pop     rbp\n403e4a  pop     r12\n403e4c  pop     r13\n403e4e  pop     r14\n403e50  pop     r15\n403e52  mov     rdx, rax\n403e55  mov     esi, 0x1\n403e5a  xor     eax, eax\n403e5c  jmp     __fprintf_chk\n403e82  add     rsp, 0x28\n403e86  mov     r8, r12\n403e89  mov     rcx, rbx\n403e8c  mov     rdi, rbp\n403e8f  mov     rdx, rax\n403e92  mov     esi, 0x1\n403e97  pop     rbx\n403e98  pop     rbp\n403e99  pop     r12\n403e9b  pop     r13\n403e9d  pop     r14\n403e9f  pop     r15\n403ea1  xor     eax, eax\n403ea3  jmp     __fprintf_chk\n403fb6  sub     rsp, 0x8\n403fba  mov     r9, r13\n403fbd  push    r12\n403fbf  push    r15\n403fc1  push    r14\n\n403fc3  mov     r8, qword  ptr  [rsp+0x20]\n403fc8  mov     rcx, rbx\n403fcb  mov     rdx, rax\n403fce  mov     rdi, rbp\n403fd1  mov     esi, 0x1\n403fd6  xor     eax, eax\n403fd8  call    __fprintf_chk\n403ece  add     rsp, 0x28\n403ed2  mov     r9, r13\n403ed5  mov     r8, r12\n403ed8  mov     rcx, rbx\n403edb  mov     rdi, rbp\n403ede  mov     rdx, rax\n403ee1  pop     rbx\n403ee2  pop     rbp\n403ee3  pop     r12\n403ee5  pop     r13\n403ee7  pop     r14\n403ee9  pop     r15\n403eeb  mov     esi, 0x1\n403ef0  xor     eax, eax\n403ef2  jmp     __fprintf_chk\n404027  push    r13\n404029  push    r12\n40402b  push    r15\n40402d  push    r14\n40402f  mov     r9, qword  ptr  [rsp+0x28]\n404034  jmp     0x403fc3\n403e19  mov     r10, qword  ptr  [rsp+0x18]\n403e1e  push    r10\n403e20  jmp     0x403d64\n403f7e  push    r15\n403f80  jmp     0x403f26\n403f43  pop     rax\n403f44  pop     rdx\n403f45  add     rsp, 0x28\n403f49  pop     rbx\n403f4a  pop     rbp\n403f4b  pop     r12\n403f4d  pop     r13\n403f4f  pop     r14\n403f51  pop     r15\n403f53  ret     \n403d92  add     rsp, 0x30\n\n403d96  add     rsp, 0x28\n403d9a  pop     rbx\n403d9b  pop     rbp\n403d9c  pop     r12\n403d9e  pop     r13\n403da0  pop     r14\n403da2  pop     r15\n403da4  ret     \n403fdd  add     rsp, 0x20\n403fe1  add     rsp, 0x28\n403fe5  pop     rbx\n403fe6  pop     rbp\n403fe7  pop     r12\n403fe9  pop     r13\n403feb  pop     r14\n403fed  pop     r15\n403fef  ret     \n403fc3  mov     r8, qword  ptr  [rsp+0x20]\n403fc8  mov     rcx, rbx\n403fcb  mov     rdx, rax\n403fce  mov     rdi, rbp\n403fd1  mov     esi, 0x1\n403fd6  xor     eax, eax\n403fd8  call    __fprintf_chk\n403d64  mov     r9, qword  ptr  [rsp+0x18]\n403d69  mov     rdx, rax\n403d6c  mov     rcx, rbx\n403d6f  mov     esi, 0x1\n403d74  mov     rdi, rbp\n403d77  xor     eax, eax\n403d79  push    r9\n403d7b  push    r13\n403d7d  push    r12\n403d7f  push    r15\n403d81  push    r14\n403d83  mov     r9, qword  ptr  [rsp+0x30]\n403d88  mov     r8, qword  ptr  [rsp+0x38]\n403d8d  call    __fprintf_chk\n403f26  push    r14\n403f28  mov     rdx, rax\n403f2b  mov     r9, r13\n403f2e  mov     r8, r12\n403f31  mov     rcx, rbx\n403f34  mov     rdi, rbp\n403f37  mov     esi, 0x1\n403f3c  xor     eax, eax\n403f3e  call    __fprintf_chk\n,an error occurred.\nThis model's maximum context length is 4097 tokens, however you requested 7132 tokens (4632 in your prompt; 2500 for the completion). Please reduce your prompt; or completion length.sub_403d16
,,Name the following assembly function:\n,\nMOV\n\nMOV is an assembly function that stands for "Move" and is used to move data from one location in memory to another.sub_403da5
,403da5  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403da5  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_403dc6
,,Name the following assembly function:\n,\nMOV\n\nMOV is an assembly function that stands for "Move" and is used to move data from one location to another.sub_403e25
,403e25  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403e25  nop     dword  ptr  [rax]\n,\nNOP (No Operation)sub_403e61
,403e61  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403e61  nop     dword  ptr  [rax]\n,\nNOP Operationsub_403ea8
,403ea8  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n403ea8  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_403ef7
,403ef7  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n403ef7  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_403f54
,403f54  nop     dword  ptr  [rax]\n,Name the following assembly function:\n403f54  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_403f82
,403f82  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n403f82  nop     word  ptr  [rax+rax]\n,\nNo operation (NOP)sub_404036
,,Name the following assembly function:\n,\nMOV\n\nMOV is a Assembly language instruction that moves data from one location to another.sub_404087
,404087  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n404087  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)version_etc_ar
,404090  xor     r9d, r9d\n404093  cmp     qword  ptr  [r8], 0x0\n404097  je      0x4040ab\n4040ab  jmp     version_etc_arn\n404099  nop     dword  ptr  [rax]\n+>4040a0  add     r9, 0x1\n| 4040a4  cmp     qword  ptr  [r8+r9*0x8], 0x0\n+-4040a9  jne     0x4040a0\n,Name the following assembly function:\n404090  xor     r9d, r9d\n404093  cmp     qword  ptr  [r8], 0x0\n404097  je      0x4040ab\n4040ab  jmp     version_etc_arn\n404099  nop     dword  ptr  [rax]\n+>4040a0  add     r9, 0x1\n| 4040a4  cmp     qword  ptr  [r8+r9*0x8], 0x0\n+-4040a9  jne     0x4040a0\n,\nIncrementing Counter Functionversion_etc_va
,4040b0  sub     rsp, 0x68\n4040b4  mov     r10, r8\n4040b7  xor     r9d, r9d\n4040c3  mov     qword  ptr  [rsp+0x58], rax\n4040c8  xor     eax, eax\n4040ca  mov     r8, rsp\n4040cd  nop     dword  ptr  [rax]\n\n4040d0  mov     eax, dword  ptr  [r10]\n4040d3  cmp     eax, 0x2f\n4040d6  ja      0x40411a\n4040d8  mov     r11d, eax\n4040db  add     r11, qword  ptr  [r10+0x10]\n4040df  add     eax, 0x8\n4040e2  mov     dword  ptr  [r10], eax\n\n4040e5  mov     rax, qword  ptr  [r11]\n4040e8  test    rax, rax\n4040eb  mov     qword  ptr  [r8+r9*0x8], rax\n4040ef  je      0x4040fb\n40411a  mov     r11, qword  ptr  [r10+0x8]\n40411e  lea     rax,  [r11+0x8]\n404122  mov     qword  ptr  [r10+0x8], rax\n404126  jmp     0x4040e5\n4040fb  call    version_etc_arn\n4040f1  add     r9, 0x1\n4040f5  cmp     r9, 0xa\n4040f9  jne     0x4040d0\n4040e5  mov     rax, qword  ptr  [r11]\n4040e8  test    rax, rax\n4040eb  mov     qword  ptr  [r8+r9*0x8], rax\n4040ef  je      0x4040fb\n404100  mov     rax, qword  ptr  [rsp+0x58]\n40410e  jne     0x404115\n4040d0  mov     eax, dword  ptr  [r10]\n4040d3  cmp     eax, 0x2f\n4040d6  ja      0x40411a\n404110  add     rsp, 0x68\n404114  ret     \n404115  call    __stack_chk_fail\n,Name the following assembly function:\n4040b0  sub     rsp, 0x68\n4040b4  mov     r10, r8\n4040b7  xor     r9d, r9d\n4040c3  mov     qword  ptr  [rsp+0x58], rax\n4040c8  xor     eax, eax\n4040ca  mov     r8, rsp\n4040cd  nop     dword  ptr  [rax]\n\n4040d0  mov     eax, dword  ptr  [r10]\n4040d3  cmp     eax, 0x2f\n4040d6  ja      0x40411a\n4040d8  mov     r11d, eax\n4040db  add     r11, qword  ptr  [r10+0x10]\n4040df  add     eax, 0x8\n4040e2  mov     dword  ptr  [r10], eax\n\n4040e5  mov     rax, qword  ptr  [r11]\n4040e8  test    rax, rax\n4040eb  mov     qword  ptr  [r8+r9*0x8], rax\n4040ef  je      0x4040fb\n40411a  mov     r11, qword  ptr  [r10+0x8]\n40411e  lea     rax,  [r11+0x8]\n404122  mov     qword  ptr  [r10+0x8], rax\n404126  jmp     0x4040e5\n4040fb  call    version_etc_arn\n4040f1  add     r9, 0x1\n4040f5  cmp     r9, 0xa\n4040f9  jne     0x4040d0\n4040e5  mov     rax, qword  ptr  [r11]\n4040e8  test    rax, rax\n4040eb  mov     qword  ptr  [r8+r9*0x8], rax\n4040ef  je      0x4040fb\n404100  mov     rax, qword  ptr  [rsp+0x58]\n40410e  jne     0x404115\n4040d0  mov     eax, dword  ptr  [r10]\n4040d3  cmp     eax, 0x2f\n4040d6  ja      0x40411a\n404110  add     rsp, 0x68\n404114  ret     \n404115  call    __stack_chk_fail\n,\nversion_etc_arn functionsub_404128
,404128  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n404128  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionversion_etc
,404130  push    rbp\n404131  push    rbx\n404132  mov     r10d, 0x20\n404138  xor     r11d, r11d\n40413b  sub     rsp, 0xb8\n40414b  mov     qword  ptr  [rsp+0x78], rax\n404150  xor     eax, eax\n404152  lea     rax,  [rsp+0xd0]\n40415a  mov     qword  ptr  [rsp+0xa0], r8\n404162  lea     rbx,  [rsp+0xd0]\n40416a  lea     r8,  [rsp+0x20]\n40416f  mov     qword  ptr  [rsp+0xa8], r9\n404177  mov     dword  ptr  [rsp+0x8], 0x20\n40417f  mov     qword  ptr  [rsp+0x10], rax\n404184  lea     rax,  [rsp+0x80]\n40418c  xor     r9d, r9d\n40418f  mov     qword  ptr  [rsp+0x18], rax\n404194  mov     rbp, rax\n404197  nop     word  ptr  [rax+rax]\n\n4041a0  cmp     r10d, 0x2f\n4041a4  ja      0x4041fc\n4041a6  mov     eax, r10d\n4041a9  mov     r11d, 0x1\n4041af  add     r10d, 0x8\n4041b3  add     rax, rbp\n\n4041b6  mov     rax, qword  ptr  [rax]\n4041b9  test    rax, rax\n4041bc  mov     qword  ptr  [r8+r9*0x8], rax\n4041c0  je      0x4041cc\n4041fc  mov     rax, rbx\n4041ff  add     rbx, 0x8\n404203  jmp     0x4041b6\n4041cc  test    r11b, r11b\n4041cf  jne     0x4041f5\n4041c2  add     r9, 0x1\n4041c6  cmp     r9, 0xa\n4041ca  jne     0x4041a0\n4041b6  mov     rax, qword  ptr  [rax]\n4041b9  test    rax, rax\n4041bc  mov     qword  ptr  [r8+r9*0x8], rax\n4041c0  je      0x4041cc\n4041d1  call    version_etc_arn\n4041f5  mov     dword  ptr  [rsp+0x8], r10d\n4041fa  jmp     0x4041d1\n4041a0  cmp     r10d, 0x2f\n4041a4  ja      0x4041fc\n4041d6  mov     rax, qword  ptr  [rsp+0x78]\n4041e4  jne     0x4041f0\n4041e6  add     rsp, 0xb8\n4041ed  pop     rbx\n4041ee  pop     rbp\n4041ef  ret     \n4041f0  call    __stack_chk_fail\n,Name the following assembly function:\n404130  push    rbp\n404131  push    rbx\n404132  mov     r10d, 0x20\n404138  xor     r11d, r11d\n40413b  sub     rsp, 0xb8\n40414b  mov     qword  ptr  [rsp+0x78], rax\n404150  xor     eax, eax\n404152  lea     rax,  [rsp+0xd0]\n40415a  mov     qword  ptr  [rsp+0xa0], r8\n404162  lea     rbx,  [rsp+0xd0]\n40416a  lea     r8,  [rsp+0x20]\n40416f  mov     qword  ptr  [rsp+0xa8], r9\n404177  mov     dword  ptr  [rsp+0x8], 0x20\n40417f  mov     qword  ptr  [rsp+0x10], rax\n404184  lea     rax,  [rsp+0x80]\n40418c  xor     r9d, r9d\n40418f  mov     qword  ptr  [rsp+0x18], rax\n404194  mov     rbp, rax\n404197  nop     word  ptr  [rax+rax]\n\n4041a0  cmp     r10d, 0x2f\n4041a4  ja      0x4041fc\n4041a6  mov     eax, r10d\n4041a9  mov     r11d, 0x1\n4041af  add     r10d, 0x8\n4041b3  add     rax, rbp\n\n4041b6  mov     rax, qword  ptr  [rax]\n4041b9  test    rax, rax\n4041bc  mov     qword  ptr  [r8+r9*0x8], rax\n4041c0  je      0x4041cc\n4041fc  mov     rax, rbx\n4041ff  add     rbx, 0x8\n404203  jmp     0x4041b6\n4041cc  test    r11b, r11b\n4041cf  jne     0x4041f5\n4041c2  add     r9, 0x1\n4041c6  cmp     r9, 0xa\n4041ca  jne     0x4041a0\n4041b6  mov     rax, qword  ptr  [rax]\n4041b9  test    rax, rax\n4041bc  mov     qword  ptr  [r8+r9*0x8], rax\n4041c0  je      0x4041cc\n4041d1  call    version_etc_arn\n4041f5  mov     dword  ptr  [rsp+0x8], r10d\n4041fa  jmp     0x4041d1\n4041a0  cmp     r10d, 0x2f\n4041a4  ja      0x4041fc\n4041d6  mov     rax, qword  ptr  [rsp+0x78]\n4041e4  jne     0x4041f0\n4041e6  add     rsp, 0xb8\n4041ed  pop     rbx\n4041ee  pop     rbp\n4041ef  ret     \n4041f0  call    __stack_chk_fail\n,\n__stack_chk_failure_loopsub_404205
,404205  nop     \n,Name the following assembly function:\n404205  nop     \n,\nNo Operation (NOP)emit_bug_reporting_address
,404210  push    rbx\n404211  lea     rsi,  [0x4050c2]\n404218  mov     edx, 0x5\n40421d  xor     edi, edi\n40421f  call    dcgettext\n404224  lea     rdx,  [0x4050d7]\n40422b  mov     rsi, rax\n40422e  mov     edi, 0x1\n404233  xor     eax, eax\n404235  call    __printf_chk\n40423a  lea     rsi,  [0x4050ed]\n404241  mov     edx, 0x5\n404246  xor     edi, edi\n404248  call    dcgettext\n40424d  lea     rcx,  [0x404a88]\n404254  lea     rdx,  [0x40491e]\n40425b  mov     rsi, rax\n40425e  mov     edi, 0x1\n404263  xor     eax, eax\n404265  call    __printf_chk\n40426a  mov     rbx,  [stdout@@GLIBC_2.2.5]\n404271  lea     rsi,  [0x405320]\n404278  xor     edi, edi\n40427a  mov     edx, 0x5\n40427f  call    dcgettext\n404284  mov     rsi, rbx\n404287  mov     rdi, rax\n40428a  pop     rbx\n40428b  jmp     fputs_unlocked\n,Name the following assembly function:\n404210  push    rbx\n404211  lea     rsi,  [0x4050c2]\n404218  mov     edx, 0x5\n40421d  xor     edi, edi\n40421f  call    dcgettext\n404224  lea     rdx,  [0x4050d7]\n40422b  mov     rsi, rax\n40422e  mov     edi, 0x1\n404233  xor     eax, eax\n404235  call    __printf_chk\n40423a  lea     rsi,  [0x4050ed]\n404241  mov     edx, 0x5\n404246  xor     edi, edi\n404248  call    dcgettext\n40424d  lea     rcx,  [0x404a88]\n404254  lea     rdx,  [0x40491e]\n40425b  mov     rsi, rax\n40425e  mov     edi, 0x1\n404263  xor     eax, eax\n404265  call    __printf_chk\n40426a  mov     rbx,  [stdout@@GLIBC_2.2.5]\n404271  lea     rsi,  [0x405320]\n404278  xor     edi, edi\n40427a  mov     edx, 0x5\n40427f  call    dcgettext\n404284  mov     rsi, rbx\n404287  mov     rdi, rax\n40428a  pop     rbx\n40428b  jmp     fputs_unlocked\n,\nfputs_unlocked functionxmalloc
,404290  push    rbx\n404291  mov     rbx, rdi\n404294  call    malloc\n404299  test    rax, rax\n40429c  jne     0x4042a3\n40429e  test    rbx, rbx\n4042a1  jne     0x4042a5\n4042a3  pop     rbx\n4042a4  ret     \n4042a5  call    xalloc_die\n,Name the following assembly function:\n404290  push    rbx\n404291  mov     rbx, rdi\n404294  call    malloc\n404299  test    rax, rax\n40429c  jne     0x4042a3\n40429e  test    rbx, rbx\n4042a1  jne     0x4042a5\n4042a3  pop     rbx\n4042a4  ret     \n4042a5  call    xalloc_die\n,\nxalloc_die_if_nullsub_4042aa
,4042aa  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4042aa  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) function.xnmalloc
,4042b0  mov     rax, rdi\n4042b3  mul     rsi\n4042b6  mov     rdi, rax\n4042b9  seto    al\n4042bc  test    rdi, rdi\n4042bf  js      0x4042cb\n4042cb  sub     rsp, 0x8\n4042cf  call    xalloc_die\n4042c1  movzx   eax, al\n4042c4  test    rax, rax\n4042c7  jne     0x4042cb\n4042c9  jmp     xmalloc\n,Name the following assembly function:\n4042b0  mov     rax, rdi\n4042b3  mul     rsi\n4042b6  mov     rdi, rax\n4042b9  seto    al\n4042bc  test    rdi, rdi\n4042bf  js      0x4042cb\n4042cb  sub     rsp, 0x8\n4042cf  call    xalloc_die\n4042c1  movzx   eax, al\n4042c4  test    rax, rax\n4042c7  jne     0x4042cb\n4042c9  jmp     xmalloc\n,\nxmalloc_safesub_4042d4
,4042d4  nop     \n,Name the following assembly function:\n4042d4  nop     \n,\nNOP (No Operation)xcharalloc
,4042e0  jmp     xmalloc\n,Name the following assembly function:\n4042e0  jmp     xmalloc\n,\nxmalloc()sub_4042e2
,4042e2  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4042e2  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)xrealloc
,4042f0  test    rsi, rsi\n4042f3  push    rbx\n4042f4  mov     rbx, rsi\n4042f7  jne     0x4042fe\n4042f9  test    rdi, rdi\n4042fc  jne     0x404318\n4042fe  mov     rsi, rbx\n404301  call    realloc\n404318  call    free\n404306  test    rax, rax\n404309  jne     0x404310\n40431d  xor     eax, eax\n40431f  pop     rbx\n404320  ret     \n40430b  test    rbx, rbx\n40430e  jne     0x404321\n404310  pop     rbx\n404311  ret     \n404321  call    xalloc_die\n,Name the following assembly function:\n4042f0  test    rsi, rsi\n4042f3  push    rbx\n4042f4  mov     rbx, rsi\n4042f7  jne     0x4042fe\n4042f9  test    rdi, rdi\n4042fc  jne     0x404318\n4042fe  mov     rsi, rbx\n404301  call    realloc\n404318  call    free\n404306  test    rax, rax\n404309  jne     0x404310\n40431d  xor     eax, eax\n40431f  pop     rbx\n404320  ret     \n40430b  test    rbx, rbx\n40430e  jne     0x404321\n404310  pop     rbx\n404311  ret     \n404321  call    xalloc_die\n,\nrealloc_or_freesub_404312
,404312  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n404312  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP) Instructionsub_404326
,,Name the following assembly function:\n,\nMOVSB\n\nMOVSB is a machine language assembly instruction that stands for Move String Byte. It is used to copy a byte from the source location to the destination location, one byte at a time.xnrealloc
,404330  mov     rax, rsi\n404333  mul     rdx\n404336  mov     rsi, rax\n404339  seto    al\n40433c  test    rsi, rsi\n40433f  js      0x40434b\n40434b  sub     rsp, 0x8\n40434f  call    xalloc_die\n404341  movzx   eax, al\n404344  test    rax, rax\n404347  jne     0x40434b\n404349  jmp     xrealloc\n,Name the following assembly function:\n404330  mov     rax, rsi\n404333  mul     rdx\n404336  mov     rsi, rax\n404339  seto    al\n40433c  test    rsi, rsi\n40433f  js      0x40434b\n40434b  sub     rsp, 0x8\n40434f  call    xalloc_die\n404341  movzx   eax, al\n404344  test    rax, rax\n404347  jne     0x40434b\n404349  jmp     xrealloc\n,\nxrealloc_or_diesub_404354
,404354  nop     \n,Name the following assembly function:\n404354  nop     \n,\nAnswer: NOP (No Operation)x2nrealloc
,404360  test    rdi, rdi\n404363  mov     r9, rdx\n404366  mov     rcx, qword  ptr  [rsi]\n404369  je      0x4043a0\n4043a0  test    rcx, rcx\n4043a3  je      0x4043c8\n40436b  xor     edx, edx\n40436d  movabs  rax, 0x5555555555555554\n404377  div     r9\n40437a  cmp     rax, rcx\n40437d  jbe     0x4043bb\n4043c8  xor     edx, edx\n4043ca  mov     eax, 0x80\n4043cf  xor     r8d, r8d\n4043d2  div     r9\n4043d5  test    rax, rax\n4043d8  sete    r8b\n4043dc  lea     rcx,  [r8+rax]\n4043e0  jmp     0x4043a5\n4043a5  mov     rax, rcx\n4043a8  mul     r9\n4043ab  seto    dl\n4043ae  test    rax, rax\n4043b1  movzx   edx, dl\n4043b4  js      0x4043bb\n4043bb  sub     rsp, 0x8\n4043bf  call    xalloc_die\n40437f  mov     rax, rcx\n404382  shr     rax, 0x1\n404385  lea     rcx,  [rax+rcx+0x1]\n\n40438a  mov     qword  ptr  [rsi], rcx\n40438d  imul    rcx, r9\n404391  mov     rsi, rcx\n404394  jmp     xrealloc\n4043b6  test    rdx, rdx\n4043b9  je      0x40438a\n40438a  mov     qword  ptr  [rsi], rcx\n40438d  imul    rcx, r9\n404391  mov     rsi, rcx\n404394  jmp     xrealloc\n,Name the following assembly function:\n404360  test    rdi, rdi\n404363  mov     r9, rdx\n404366  mov     rcx, qword  ptr  [rsi]\n404369  je      0x4043a0\n4043a0  test    rcx, rcx\n4043a3  je      0x4043c8\n40436b  xor     edx, edx\n40436d  movabs  rax, 0x5555555555555554\n404377  div     r9\n40437a  cmp     rax, rcx\n40437d  jbe     0x4043bb\n4043c8  xor     edx, edx\n4043ca  mov     eax, 0x80\n4043cf  xor     r8d, r8d\n4043d2  div     r9\n4043d5  test    rax, rax\n4043d8  sete    r8b\n4043dc  lea     rcx,  [r8+rax]\n4043e0  jmp     0x4043a5\n4043a5  mov     rax, rcx\n4043a8  mul     r9\n4043ab  seto    dl\n4043ae  test    rax, rax\n4043b1  movzx   edx, dl\n4043b4  js      0x4043bb\n4043bb  sub     rsp, 0x8\n4043bf  call    xalloc_die\n40437f  mov     rax, rcx\n404382  shr     rax, 0x1\n404385  lea     rcx,  [rax+rcx+0x1]\n\n40438a  mov     qword  ptr  [rsi], rcx\n40438d  imul    rcx, r9\n404391  mov     rsi, rcx\n404394  jmp     xrealloc\n4043b6  test    rdx, rdx\n4043b9  je      0x40438a\n40438a  mov     qword  ptr  [rsi], rcx\n40438d  imul    rcx, r9\n404391  mov     rsi, rcx\n404394  jmp     xrealloc\n,\nxrealloc_expandsub_404399
,404399  nop     dword  ptr  [rax]\n,Name the following assembly function:\n404399  nop     dword  ptr  [rax]\n,\nNo operation (NOP)sub_4043c4
,4043c4  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4043c4  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_4043e2
,4043e2  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4043e2  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)x2realloc
,4043f0  test    rdi, rdi\n4043f3  mov     rax, qword  ptr  [rsi]\n4043f6  je      0x404420\n404420  test    rax, rax\n404423  mov     edx, 0x80\n404428  cmove   rax, rdx\n40442c  test    rax, rax\n40442f  jns     0x404412\n4043f8  movabs  rdx, 0x5555555555555553\n404402  cmp     rax, rdx\n404405  ja      0x404431\n404431  sub     rsp, 0x8\n404435  call    xalloc_die\n404412  mov     qword  ptr  [rsi], rax\n404415  mov     rsi, rax\n404418  jmp     xrealloc\n404407  mov     rdx, rax\n40440a  shr     rdx, 0x1\n40440d  lea     rax,  [rdx+rax+0x1]\n\n404412  mov     qword  ptr  [rsi], rax\n404415  mov     rsi, rax\n404418  jmp     xrealloc\n,Name the following assembly function:\n4043f0  test    rdi, rdi\n4043f3  mov     rax, qword  ptr  [rsi]\n4043f6  je      0x404420\n404420  test    rax, rax\n404423  mov     edx, 0x80\n404428  cmove   rax, rdx\n40442c  test    rax, rax\n40442f  jns     0x404412\n4043f8  movabs  rdx, 0x5555555555555553\n404402  cmp     rax, rdx\n404405  ja      0x404431\n404431  sub     rsp, 0x8\n404435  call    xalloc_die\n404412  mov     qword  ptr  [rsi], rax\n404415  mov     rsi, rax\n404418  jmp     xrealloc\n404407  mov     rdx, rax\n40440a  shr     rdx, 0x1\n40440d  lea     rax,  [rdx+rax+0x1]\n\n404412  mov     qword  ptr  [rsi], rax\n404415  mov     rsi, rax\n404418  jmp     xrealloc\n,\nxreallocsub_40441d
,40441d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40441d  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_40443a
,40443a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40443a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)xzalloc
,404440  push    rbx\n404441  mov     rbx, rdi\n404444  call    xmalloc\n404449  mov     rdx, rbx\n40444c  xor     esi, esi\n40444e  mov     rdi, rax\n404451  pop     rbx\n404452  jmp     memset\n,Name the following assembly function:\n404440  push    rbx\n404441  mov     rbx, rdi\n404444  call    xmalloc\n404449  mov     rdx, rbx\n40444c  xor     esi, esi\n40444e  mov     rdi, rax\n404451  pop     rbx\n404452  jmp     memset\n,\nmemcpy_xmallocsub_404457
,404457  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n404457  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)xcalloc
,404460  mov     rax, rdi\n404463  sub     rsp, 0x8\n404467  mul     rsi\n40446a  seto    dl\n40446d  test    rax, rax\n404470  js      0x404489\n404489  call    xalloc_die\n404472  movzx   edx, dl\n404475  test    rdx, rdx\n404478  jne     0x404489\n40447a  call    calloc\n40447f  test    rax, rax\n404482  je      0x404489\n404484  add     rsp, 0x8\n404488  ret     \n,Name the following assembly function:\n404460  mov     rax, rdi\n404463  sub     rsp, 0x8\n404467  mul     rsi\n40446a  seto    dl\n40446d  test    rax, rax\n404470  js      0x404489\n404489  call    xalloc_die\n404472  movzx   edx, dl\n404475  test    rdx, rdx\n404478  jne     0x404489\n40447a  call    calloc\n40447f  test    rax, rax\n404482  je      0x404489\n404484  add     rsp, 0x8\n404488  ret     \n,\ncalloc_or_diesub_40448e
,40448e  nop     \n,Name the following assembly function:\n40448e  nop     \n,\nNOP (No Operation)xmemdup
,404490  push    rbp\n404491  push    rbx\n404492  mov     rbp, rdi\n404495  mov     rdi, rsi\n404498  mov     rbx, rsi\n40449b  sub     rsp, 0x8\n40449f  call    xmalloc\n4044a4  add     rsp, 0x8\n4044a8  mov     rdx, rbx\n4044ab  mov     rsi, rbp\n4044ae  pop     rbx\n4044af  pop     rbp\n4044b0  mov     rdi, rax\n4044b3  jmp     memcpy\n,Name the following assembly function:\n404490  push    rbp\n404491  push    rbx\n404492  mov     rbp, rdi\n404495  mov     rdi, rsi\n404498  mov     rbx, rsi\n40449b  sub     rsp, 0x8\n40449f  call    xmalloc\n4044a4  add     rsp, 0x8\n4044a8  mov     rdx, rbx\n4044ab  mov     rsi, rbp\n4044ae  pop     rbx\n4044af  pop     rbp\n4044b0  mov     rdi, rax\n4044b3  jmp     memcpy\n,\nmemcpy(xmalloc(), rsi, rbp)sub_4044b8
,4044b8  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n4044b8  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP) Functionxstrdup
,4044c0  push    rbx\n4044c1  mov     rbx, rdi\n4044c4  call    strlen\n4044c9  mov     rdi, rbx\n4044cc  lea     rsi,  [rax+0x1]\n4044d0  pop     rbx\n4044d1  jmp     xmemdup\n,Name the following assembly function:\n4044c0  push    rbx\n4044c1  mov     rbx, rdi\n4044c4  call    strlen\n4044c9  mov     rdi, rbx\n4044cc  lea     rsi,  [rax+0x1]\n4044d0  pop     rbx\n4044d1  jmp     xmemdup\n,\nxmemdup_with_lengthsub_4044d3
,4044dd  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4044dd  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)xalloc_die
,4044e0  lea     rsi,  [0x4053cf]\n4044e7  sub     rsp, 0x8\n4044eb  mov     edx, 0x5\n4044f0  xor     edi, edi\n4044f2  call    dcgettext\n4044f7  mov     edi,  [exit_failure]\n4044fd  lea     rdx,  [0x404b40]\n404504  mov     rcx, rax\n404507  xor     esi, esi\n404509  xor     eax, eax\n40450b  call    error\n404510  call    abort\n,Name the following assembly function:\n4044e0  lea     rsi,  [0x4053cf]\n4044e7  sub     rsp, 0x8\n4044eb  mov     edx, 0x5\n4044f0  xor     edi, edi\n4044f2  call    dcgettext\n4044f7  mov     edi,  [exit_failure]\n4044fd  lea     rdx,  [0x404b40]\n404504  mov     rcx, rax\n404507  xor     esi, esi\n404509  xor     eax, eax\n40450b  call    error\n404510  call    abort\n,\ndcgettext()sub_404515
,40451f  nop     \n,Name the following assembly function:\n40451f  nop     \n,\nNOP (No Operation)rpl_mbrtowc
,404520  push    r13\n404522  push    r12\n404524  mov     r13, rsi\n404527  push    rbp\n404528  push    rbx\n404529  mov     rbx, rdi\n40452c  mov     r12, rdx\n40452f  sub     rsp, 0x18\n40453c  mov     qword  ptr  [rsp+0x8], rax\n404541  xor     eax, eax\n404543  lea     rax,  [rsp+0x4]\n404548  test    rdi, rdi\n40454b  cmove   rbx, rax\n40454f  mov     rdi, rbx\n404552  call    mbrtowc\n404557  cmp     rax, -0x3\n40455b  mov     rbp, rax\n40455e  jbe     0x404580\n404580  mov     rdx, qword  ptr  [rsp+0x8]\n40458e  mov     rax, rbp\n404591  jne     0x40459e\n404560  test    r12, r12\n404563  je      0x404580\n404593  add     rsp, 0x18\n404597  pop     rbx\n404598  pop     rbp\n404599  pop     r12\n40459b  pop     r13\n40459d  ret     \n40459e  call    __stack_chk_fail\n404565  xor     edi, edi\n404567  call    hard_locale\n40456c  test    al, al\n40456e  jne     0x404580\n404570  movzx   eax, byte  ptr  [r13]\n404575  mov     ebp, 0x1\n40457a  mov     dword  ptr  [rbx], eax\n40457c  nop     dword  ptr  [rax]\n\n404580  mov     rdx, qword  ptr  [rsp+0x8]\n40458e  mov     rax, rbp\n404591  jne     0x40459e\n,Name the following assembly function:\n404520  push    r13\n404522  push    r12\n404524  mov     r13, rsi\n404527  push    rbp\n404528  push    rbx\n404529  mov     rbx, rdi\n40452c  mov     r12, rdx\n40452f  sub     rsp, 0x18\n40453c  mov     qword  ptr  [rsp+0x8], rax\n404541  xor     eax, eax\n404543  lea     rax,  [rsp+0x4]\n404548  test    rdi, rdi\n40454b  cmove   rbx, rax\n40454f  mov     rdi, rbx\n404552  call    mbrtowc\n404557  cmp     rax, -0x3\n40455b  mov     rbp, rax\n40455e  jbe     0x404580\n404580  mov     rdx, qword  ptr  [rsp+0x8]\n40458e  mov     rax, rbp\n404591  jne     0x40459e\n404560  test    r12, r12\n404563  je      0x404580\n404593  add     rsp, 0x18\n404597  pop     rbx\n404598  pop     rbp\n404599  pop     r12\n40459b  pop     r13\n40459d  ret     \n40459e  call    __stack_chk_fail\n404565  xor     edi, edi\n404567  call    hard_locale\n40456c  test    al, al\n40456e  jne     0x404580\n404570  movzx   eax, byte  ptr  [r13]\n404575  mov     ebp, 0x1\n40457a  mov     dword  ptr  [rbx], eax\n40457c  nop     dword  ptr  [rax]\n\n404580  mov     rdx, qword  ptr  [rsp+0x8]\n40458e  mov     rax, rbp\n404591  jne     0x40459e\n,\nmovzx_call_hard_localesub_4045a3
,4045ad  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4045ad  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)close_stream
,4045b0  push    r12\n4045b2  push    rbp\n4045b3  mov     rbp, rdi\n4045b6  push    rbx\n4045b7  call    __fpending\n4045bc  mov     ebx, dword  ptr  [rbp]\n4045bf  mov     rdi, rbp\n4045c2  mov     r12, rax\n4045c5  call    rpl_fclose\n4045ca  and     ebx, 0x20\n4045cd  test    ebx, ebx\n4045cf  jne     0x4045e8\n4045d1  test    eax, eax\n4045d3  je      0x4045df\n4045e8  test    eax, eax\n4045ea  jne     0x404608\n4045df  pop     rbx\n4045e0  pop     rbp\n4045e1  pop     r12\n4045e3  ret     \n4045d5  test    r12, r12\n4045d8  mov     eax, 0xffffffff\n4045dd  je      0x404618\n4045ec  call    __errno_location\n404608  pop     rbx\n404609  mov     eax, 0xffffffff\n40460e  pop     rbp\n40460f  pop     r12\n404611  ret     \n404618  call    __errno_location\n4045f1  mov     dword  ptr  [rax], 0x0\n4045f7  mov     eax, 0xffffffff\n4045fc  pop     rbx\n4045fd  pop     rbp\n4045fe  pop     r12\n404600  ret     \n40461d  cmp     dword  ptr  [rax], 0x9\n404620  pop     rbx\n404621  pop     rbp\n404622  pop     r12\n404624  setne   al\n404627  movzx   eax, al\n40462a  neg     eax\n40462c  ret     \n,Name the following assembly function:\n4045b0  push    r12\n4045b2  push    rbp\n4045b3  mov     rbp, rdi\n4045b6  push    rbx\n4045b7  call    __fpending\n4045bc  mov     ebx, dword  ptr  [rbp]\n4045bf  mov     rdi, rbp\n4045c2  mov     r12, rax\n4045c5  call    rpl_fclose\n4045ca  and     ebx, 0x20\n4045cd  test    ebx, ebx\n4045cf  jne     0x4045e8\n4045d1  test    eax, eax\n4045d3  je      0x4045df\n4045e8  test    eax, eax\n4045ea  jne     0x404608\n4045df  pop     rbx\n4045e0  pop     rbp\n4045e1  pop     r12\n4045e3  ret     \n4045d5  test    r12, r12\n4045d8  mov     eax, 0xffffffff\n4045dd  je      0x404618\n4045ec  call    __errno_location\n404608  pop     rbx\n404609  mov     eax, 0xffffffff\n40460e  pop     rbp\n40460f  pop     r12\n404611  ret     \n404618  call    __errno_location\n4045f1  mov     dword  ptr  [rax], 0x0\n4045f7  mov     eax, 0xffffffff\n4045fc  pop     rbx\n4045fd  pop     rbp\n4045fe  pop     r12\n404600  ret     \n40461d  cmp     dword  ptr  [rax], 0x9\n404620  pop     rbx\n404621  pop     rbp\n404622  pop     r12\n404624  setne   al\n404627  movzx   eax, al\n40462a  neg     eax\n40462c  ret     \n,\nClose File and Check for Error Functionsub_4045e4
,4045e4  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4045e4  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_404601
,404601  nop     dword  ptr  [rax]\n,Name the following assembly function:\n404601  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_404612
,404612  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n404612  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_40462d
,40462d  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40462d  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)hard_locale
,404630  sub     rsp, 0x8\n404634  xor     esi, esi\n404636  call    setlocale\n40463b  mov     rdx, rax\n40463e  mov     eax, 0x1\n404643  test    rdx, rdx\n404646  je      0x404665\n404665  add     rsp, 0x8\n404669  ret     \n  404648  lea     rdi,  [0x4053e0]\n  40464f  mov     ecx, 0x2\n  404654  mov     rsi, rdx\n  \n@ 404657  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n404659  seta    cl\n40465c  sbb     cl, 0x0\n40465f  xor     eax, eax\n404661  test    cl, cl\n404663  jne     0x404670\n@ 404657  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n  404670  lea     rdi,  [0x4053e2]\n  404677  mov     ecx, 0x6\n  40467c  mov     rsi, rdx\n  \n@ 40467f  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n404681  seta    al\n404684  sbb     al, 0x0\n404686  test    al, al\n404688  setne   al\n40468b  add     rsp, 0x8\n40468f  ret     \n@ 40467f  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n,Name the following assembly function:\n404630  sub     rsp, 0x8\n404634  xor     esi, esi\n404636  call    setlocale\n40463b  mov     rdx, rax\n40463e  mov     eax, 0x1\n404643  test    rdx, rdx\n404646  je      0x404665\n404665  add     rsp, 0x8\n404669  ret     \n  404648  lea     rdi,  [0x4053e0]\n  40464f  mov     ecx, 0x2\n  404654  mov     rsi, rdx\n  \n@ 404657  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n404659  seta    cl\n40465c  sbb     cl, 0x0\n40465f  xor     eax, eax\n404661  test    cl, cl\n404663  jne     0x404670\n@ 404657  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n  404670  lea     rdi,  [0x4053e2]\n  404677  mov     ecx, 0x6\n  40467c  mov     rsi, rdx\n  \n@ 40467f  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n404681  seta    al\n404684  sbb     al, 0x0\n404686  test    al, al\n404688  setne   al\n40468b  add     rsp, 0x8\n40468f  ret     \n@ 40467f  repe cmpsb byte  ptr  [rsi], byte  ptr  [rdi]\n,\ncompare_locale()sub_40466a
,40466a  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n40466a  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)locale_charset
,404690  sub     rsp, 0x8\n404694  mov     edi, 0xe\n404699  call    nl_langinfo\n40469e  test    rax, rax\n4046a1  je      0x4046c0\n4046c0  lea     rax,  [0x4053e8]\n4046c7  add     rsp, 0x8\n4046cb  ret     \n4046a3  cmp     byte  ptr  [rax], 0x0\n4046a6  lea     rdx,  [0x4053e8]\n4046ad  cmove   rax, rdx\n4046b1  add     rsp, 0x8\n4046b5  ret     \n,Name the following assembly function:\n404690  sub     rsp, 0x8\n404694  mov     edi, 0xe\n404699  call    nl_langinfo\n40469e  test    rax, rax\n4046a1  je      0x4046c0\n4046c0  lea     rax,  [0x4053e8]\n4046c7  add     rsp, 0x8\n4046cb  ret     \n4046a3  cmp     byte  ptr  [rax], 0x0\n4046a6  lea     rdx,  [0x4053e8]\n4046ad  cmove   rax, rdx\n4046b1  add     rsp, 0x8\n4046b5  ret     \n,\nnl_langinfo()sub_4046b6
,,Name the following assembly function:\n,\nMOV\n\nMOV (Move) is an assembly function used to move data from one location to another.sub_4046cc
,4046cc  nop     dword  ptr  [rax]\n,Name the following assembly function:\n4046cc  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)rpl_fclose
,4046d0  push    r12\n4046d2  push    rbp\n4046d3  push    rbx\n4046d4  mov     rbx, rdi\n4046d7  call    fileno\n4046dc  test    eax, eax\n4046de  mov     rdi, rbx\n4046e1  js      0x404737\n404737  pop     rbx\n404738  pop     rbp\n404739  pop     r12\n40473b  jmp     fclose\n4046e3  call    __freading\n4046e8  test    eax, eax\n4046ea  jne     0x404718\n4046ec  mov     rdi, rbx\n4046ef  call    rpl_fflush\n404718  mov     rdi, rbx\n40471b  call    fileno\n4046f4  test    eax, eax\n4046f6  je      0x404734\n404720  xor     esi, esi\n404722  mov     edx, 0x1\n404727  mov     edi, eax\n404729  call    lseek\n404734  mov     rdi, rbx\n\n404737  pop     rbx\n404738  pop     rbp\n404739  pop     r12\n40473b  jmp     fclose\n4046f8  call    __errno_location\n40472e  cmp     rax, -0x1\n404732  jne     0x4046ec\n4046fd  mov     r12d, dword  ptr  [rax]\n404700  mov     rdi, rbx\n404703  mov     rbp, rax\n404706  call    fclose\n40470b  test    r12d, r12d\n40470e  jne     0x404740\n404710  pop     rbx\n404711  pop     rbp\n404712  pop     r12\n404714  ret     \n404740  mov     dword  ptr  [rbp], r12d\n404744  mov     eax, 0xffffffff\n404749  jmp     0x404710\n,Name the following assembly function:\n4046d0  push    r12\n4046d2  push    rbp\n4046d3  push    rbx\n4046d4  mov     rbx, rdi\n4046d7  call    fileno\n4046dc  test    eax, eax\n4046de  mov     rdi, rbx\n4046e1  js      0x404737\n404737  pop     rbx\n404738  pop     rbp\n404739  pop     r12\n40473b  jmp     fclose\n4046e3  call    __freading\n4046e8  test    eax, eax\n4046ea  jne     0x404718\n4046ec  mov     rdi, rbx\n4046ef  call    rpl_fflush\n404718  mov     rdi, rbx\n40471b  call    fileno\n4046f4  test    eax, eax\n4046f6  je      0x404734\n404720  xor     esi, esi\n404722  mov     edx, 0x1\n404727  mov     edi, eax\n404729  call    lseek\n404734  mov     rdi, rbx\n\n404737  pop     rbx\n404738  pop     rbp\n404739  pop     r12\n40473b  jmp     fclose\n4046f8  call    __errno_location\n40472e  cmp     rax, -0x1\n404732  jne     0x4046ec\n4046fd  mov     r12d, dword  ptr  [rax]\n404700  mov     rdi, rbx\n404703  mov     rbp, rax\n404706  call    fclose\n40470b  test    r12d, r12d\n40470e  jne     0x404740\n404710  pop     rbx\n404711  pop     rbp\n404712  pop     r12\n404714  ret     \n404740  mov     dword  ptr  [rbp], r12d\n404744  mov     eax, 0xffffffff\n404749  jmp     0x404710\n,\nfclose with error checkingsub_404715
,404715  nop     dword  ptr  [rax]\n,Name the following assembly function:\n404715  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)sub_40474b
,40474b  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n40474b  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)rpl_fflush
,404750  test    rdi, rdi\n404753  push    rbx\n404754  mov     rbx, rdi\n404757  je      0x40476a\n40476a  mov     rdi, rbx\n40476d  pop     rbx\n40476e  jmp     fflush\n404759  call    __freading\n40475e  test    eax, eax\n404760  je      0x40476a\n404762  test    dword  ptr  [rbx], 0x100\n404768  jne     0x404778\n404778  mov     rdi, rbx\n40477b  mov     edx, 0x1\n404780  xor     esi, esi\n404782  call    rpl_fseeko\n404787  mov     rdi, rbx\n40478a  pop     rbx\n40478b  jmp     fflush\n,Name the following assembly function:\n404750  test    rdi, rdi\n404753  push    rbx\n404754  mov     rbx, rdi\n404757  je      0x40476a\n40476a  mov     rdi, rbx\n40476d  pop     rbx\n40476e  jmp     fflush\n404759  call    __freading\n40475e  test    eax, eax\n404760  je      0x40476a\n404762  test    dword  ptr  [rbx], 0x100\n404768  jne     0x404778\n404778  mov     rdi, rbx\n40477b  mov     edx, 0x1\n404780  xor     esi, esi\n404782  call    rpl_fseeko\n404787  mov     rdi, rbx\n40478a  pop     rbx\n40478b  jmp     fflush\n,\n__freading_wrappersub_404773
,404773  nop     dword  ptr  [rax+rax]\n,Name the following assembly function:\n404773  nop     dword  ptr  [rax+rax]\n,\nNo Operation (NOP)rpl_fseeko
,404790  mov     rax, qword  ptr  [rdi+0x8]\n404794  cmp     qword  ptr  [rdi+0x10], rax\n404798  je      0x4047a0\n4047a0  mov     rax, qword  ptr  [rdi+0x20]\n4047a4  cmp     qword  ptr  [rdi+0x28], rax\n4047a8  jne     0x40479a\n40479a  jmp     fseeko\n4047aa  cmp     qword  ptr  [rdi+0x48], 0x0\n4047af  jne     0x40479a\n4047b1  push    r12\n4047b3  push    rbp\n4047b4  mov     r12d, edx\n4047b7  push    rbx\n4047b8  mov     rbp, rsi\n4047bb  mov     rbx, rdi\n4047be  call    fileno\n4047c3  mov     edx, r12d\n4047c6  mov     rsi, rbp\n4047c9  mov     edi, eax\n4047cb  call    lseek\n4047d0  cmp     rax, -0x1\n4047d4  je      0x4047e2\n4047e2  pop     rbx\n4047e3  pop     rbp\n4047e4  pop     r12\n4047e6  ret     \n4047d6  and     dword  ptr  [rbx], 0xffffffef\n4047d9  mov     qword  ptr  [rbx+0x90], rax\n4047e0  xor     eax, eax\n\n4047e2  pop     rbx\n4047e3  pop     rbp\n4047e4  pop     r12\n4047e6  ret     \n,Name the following assembly function:\n404790  mov     rax, qword  ptr  [rdi+0x8]\n404794  cmp     qword  ptr  [rdi+0x10], rax\n404798  je      0x4047a0\n4047a0  mov     rax, qword  ptr  [rdi+0x20]\n4047a4  cmp     qword  ptr  [rdi+0x28], rax\n4047a8  jne     0x40479a\n40479a  jmp     fseeko\n4047aa  cmp     qword  ptr  [rdi+0x48], 0x0\n4047af  jne     0x40479a\n4047b1  push    r12\n4047b3  push    rbp\n4047b4  mov     r12d, edx\n4047b7  push    rbx\n4047b8  mov     rbp, rsi\n4047bb  mov     rbx, rdi\n4047be  call    fileno\n4047c3  mov     edx, r12d\n4047c6  mov     rsi, rbp\n4047c9  mov     edi, eax\n4047cb  call    lseek\n4047d0  cmp     rax, -0x1\n4047d4  je      0x4047e2\n4047e2  pop     rbx\n4047e3  pop     rbp\n4047e4  pop     r12\n4047e6  ret     \n4047d6  and     dword  ptr  [rbx], 0xffffffef\n4047d9  mov     qword  ptr  [rbx+0x90], rax\n4047e0  xor     eax, eax\n\n4047e2  pop     rbx\n4047e3  pop     rbp\n4047e4  pop     r12\n4047e6  ret     \n,\nThe assembly function is called "lseek".sub_40479f
,40479f  nop     \n,Name the following assembly function:\n40479f  nop     \n,\nNo Operation (NOP)sub_4047e7
,4047e7  nop     word  ptr  [rax+rax]\n,Name the following assembly function:\n4047e7  nop     word  ptr  [rax+rax]\n,\nNo Operation (NOP)sub_404855
,404855  nop     \n,Name the following assembly function:\n404855  nop     \n,\nNo Operation (NOP)sub_404862
,40486c  nop     dword  ptr  [rax]\n,Name the following assembly function:\n40486c  nop     dword  ptr  [rax]\n,\nNo Operation (NOP)atexit
,404870  mov     rdx,  [__dso_handle]\n404877  xor     esi, esi\n404879  jmp     __cxa_atexit\n,Name the following assembly function:\n404870  mov     rdx,  [__dso_handle]\n404877  xor     esi, esi\n404879  jmp     __cxa_atexit\n,\n__cxa_atexit_fini
,404880  sub     rsp, 0x8\n404884  add     rsp, 0x8\n404888  ret     \n,Name the following assembly function:\n404880  sub     rsp, 0x8\n404884  add     rsp, 0x8\n404888  ret     \n,\nRestore Stack Pointer Function